<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="datetime_8hpp" kind="file" language="C++">
    <compoundname>datetime.hpp</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">ctime</includes>
    <includes local="no">array</includes>
    <includes local="no">chrono</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">ostream</includes>
    <includes local="no">tuple</includes>
    <includedby refid="types_8hpp" local="yes">external/toml/types.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>external/toml/datetime.hpp</label>
        <link refid="datetime_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>array</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>ctime</label>
      </node>
      <node id="7">
        <label>iomanip</label>
      </node>
      <node id="8">
        <label>ostream</label>
      </node>
      <node id="9">
        <label>tuple</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>Game/Game.cpp</label>
        <link refid="_game_8cpp"/>
      </node>
      <node id="6">
        <label>Game/Game.hpp</label>
        <link refid="_game_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Player/Player.cpp</label>
        <link refid="_player_8cpp"/>
      </node>
      <node id="11">
        <label>Player/Player.hpp</label>
        <link refid="_player_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SettingsManager/SettingsManager.cpp</label>
        <link refid="_settings_manager_8cpp"/>
      </node>
      <node id="5">
        <label>SettingsManager/SettingsManager.hpp</label>
        <link refid="_settings_manager_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SpriteContoller/SpriteController.cpp</label>
        <link refid="_sprite_controller_8cpp"/>
      </node>
      <node id="10">
        <label>SpriteContoller/SpriteController.hpp</label>
        <link refid="_sprite_controller_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>external/toml.hpp</label>
        <link refid="toml_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>external/toml/datetime.hpp</label>
        <link refid="datetime_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>external/toml/get.hpp</label>
        <link refid="get_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>external/toml/literal.hpp</label>
        <link refid="literal_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>external/toml/parser.hpp</label>
        <link refid="parser_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>external/toml/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>external/toml/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>external/toml/value.hpp</label>
        <link refid="value_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtoml_1_1local__date" prot="public">toml::local_date</innerclass>
    <innerclass refid="structtoml_1_1local__time" prot="public">toml::local_time</innerclass>
    <innerclass refid="structtoml_1_1time__offset" prot="public">toml::time_offset</innerclass>
    <innerclass refid="structtoml_1_1local__datetime" prot="public">toml::local_datetime</innerclass>
    <innerclass refid="structtoml_1_1offset__datetime" prot="public">toml::offset_datetime</innerclass>
    <innernamespace refid="namespacetoml">toml</innernamespace>
    <innernamespace refid="namespacetoml_1_1detail">toml::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Toru<sp/>Niina<sp/>2017.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOML11_DATETIME_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOML11_DATETIME_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetoml" kindref="compound">toml</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>non-threadsafe<sp/>std::localtime.<sp/>In<sp/>C11<sp/>(not<sp/>C++11!),<sp/>localtime_s<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>provided<sp/>in<sp/>the<sp/>absolutely<sp/>same<sp/>purpose,<sp/>but<sp/>C++11<sp/>is<sp/>actually<sp/>not<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>C11.<sp/>We<sp/>need<sp/>to<sp/>dispatch<sp/>the<sp/>function<sp/>depending<sp/>on<sp/>the<sp/>OS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>find<sp/>more<sp/>sophisticated<sp/>way<sp/>to<sp/>handle<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::tm<sp/><ref refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" kindref="member">localtime_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t*<sp/>src)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tm<sp/>dst;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" kindref="member">::localtime_s</ref>(&amp;dst,<sp/>src);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;localtime_s<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dst;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::tm<sp/><ref refid="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" kindref="member">gmtime_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t*<sp/>src)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tm<sp/>dst;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" kindref="member">::gmtime_s</ref>(&amp;dst,<sp/>src);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;gmtime_s<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dst;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined(_POSIX_C_SOURCE)<sp/>&amp;&amp;<sp/>_POSIX_C_SOURCE<sp/>&gt;=<sp/>1)<sp/>||<sp/>defined(_XOPEN_SOURCE)<sp/>||<sp/>defined(_BSD_SOURCE)<sp/>||<sp/>defined(_SVID_SOURCE)<sp/>||<sp/>defined(_POSIX_SOURCE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::tm<sp/><ref refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" kindref="member">localtime_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t*<sp/>src)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tm<sp/>dst;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>::localtime_r(src,<sp/>&amp;dst);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;localtime_r<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dst;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::tm<sp/><ref refid="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" kindref="member">gmtime_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t*<sp/>src)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::tm<sp/>dst;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>::gmtime_r(src,<sp/>&amp;dst);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;gmtime_r<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dst;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>fallback.<sp/>not<sp/>threadsafe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::tm<sp/><ref refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" kindref="member">localtime_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t*<sp/>src)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/>=<sp/>std::localtime(src);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structtoml_1_1result" kindref="compound">result</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;localtime<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="structtoml_1_1result" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61" refid="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::tm<sp/><ref refid="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" kindref="member">gmtime_s</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t*<sp/>src)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/>=<sp/>std::gmtime(src);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structtoml_1_1result" kindref="compound">result</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;gmtime<sp/>failed.&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="structtoml_1_1result" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5" kindref="member">month_t</ref><sp/>:<sp/>std::uint8_t</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5ae68564f23e0e939acea76dc3d2bc01bf" kindref="member">Jan</ref><sp/>=<sp/><sp/>0,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5aea171d540ccd5f0669171ef06d3cd848" kindref="member">Feb</ref><sp/>=<sp/><sp/>1,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a7ce6b2286a5396e614b8484105d277e0" kindref="member">Mar</ref><sp/>=<sp/><sp/>2,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a6d7215c4b3bc4716d026ac46c6d9ae64" kindref="member">Apr</ref><sp/>=<sp/><sp/>3,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a195fbb57ffe7449796d23466085ce6d8" kindref="member">May</ref><sp/>=<sp/><sp/>4,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5aeb4b40c1221dad5b23fe7ef84d292be1" kindref="member">Jun</ref><sp/>=<sp/><sp/>5,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5aa2866cd6efaa65c92278d4771a9eaec7" kindref="member">Jul</ref><sp/>=<sp/><sp/>6,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a22f1a4667604b8557c9b209c201b4bc6" kindref="member">Aug</ref><sp/>=<sp/><sp/>7,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5af04aa7019c490474fa3ce16e93501b57" kindref="member">Sep</ref><sp/>=<sp/><sp/>8,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a594be08882c8e9d5efb9eeb62f303744" kindref="member">Oct</ref><sp/>=<sp/><sp/>9,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a343e6957be77c6247aa2b8d0deb68bd6" kindref="member">Nov</ref><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5ad207b4e0bce42a8f1555ce3a05e287f6" kindref="member">Dec</ref><sp/>=<sp/>11</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structtoml_1_1local__date" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref></highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88" refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int16_t<sp/><ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A.D.<sp/>(like,<sp/>2018)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>11]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[1,<sp/>31]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structtoml_1_1local__date_1a4f2db66b6d12432f41de1d277007995c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a4f2db66b6d12432f41de1d277007995c" kindref="member">local_date</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/><ref refid="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5" kindref="member">month_t</ref><sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref><sp/>(static_cast&lt;std::int16_t&gt;(y)),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>(static_cast&lt;std::uint8_t&gt;(m)),</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref><sp/><sp/>(static_cast&lt;std::uint8_t&gt;(d))</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structtoml_1_1local__date_1adf08c8069e3f6161c07878c205169387" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date_1adf08c8069e3f6161c07878c205169387" kindref="member">local_date</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tm&amp;<sp/>t)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref><sp/>(static_cast&lt;std::int16_t&gt;(t.tm_year<sp/>+<sp/>1900)),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>(static_cast&lt;std::uint8_t&gt;(t.tm_mon)),</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref><sp/><sp/>(static_cast&lt;std::uint8_t&gt;(t.tm_mday))</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structtoml_1_1local__date_1a6dab1481278ccbb8f5518f8e1194cb80" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date_1a6dab1481278ccbb8f5518f8e1194cb80" kindref="member">local_date</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point&amp;<sp/>tp)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/><sp/><sp/><sp/>=<sp/>std::chrono::system_clock::to_time_t(tp);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time<sp/>=<sp/><ref refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" kindref="member">detail::localtime_s</ref>(&amp;t);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="structtoml_1_1local__date_1a2e3cbe768e77fdc1cd33376e7cf73d18" kindref="member">local_date</ref>(time);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="structtoml_1_1local__date_1aa21d1fdf114386f9c2be3c1deacf16c9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date_1aa21d1fdf114386f9c2be3c1deacf16c9" kindref="member">local_date</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t<sp/>t)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>(std::chrono::system_clock::from_time_t(t))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="structtoml_1_1local__date_1a53898f4d068b48647b33a70ceb365454" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="116"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::mktime<sp/>returns<sp/>date<sp/>as<sp/>local<sp/>time<sp/>zone.<sp/>no<sp/>conversion<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm<sp/>t;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_sec<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_min<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_hour<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_mday<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_mon<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_year<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>)<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_wday<sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_yday<sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::system_clock::from_time_t(std::mktime(&amp;t));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structtoml_1_1local__date_1aa2c1270efdda78b821decb52178e3809" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::time_t()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="132"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::system_clock::to_time_t(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::system_clock::time_point(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="structtoml_1_1local__date_1a2e3cbe768e77fdc1cd33376e7cf73d18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a2e3cbe768e77fdc1cd33376e7cf73d18" kindref="member">local_date</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138" refid="structtoml_1_1local__date_1a76aae2bf788b6e2ebdb03662c481118f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a76aae2bf788b6e2ebdb03662c481118f" kindref="member">~local_date</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139" refid="structtoml_1_1local__date_1a299d492d159ad800b859f7c08bdfdffc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a299d492d159ad800b859f7c08bdfdffc" kindref="member">local_date</ref>(<ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140" refid="structtoml_1_1local__date_1a0b30581eeadbc9425c4e605ef4ba179e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date_1a0b30581eeadbc9425c4e605ef4ba179e" kindref="member">local_date</ref>(<ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141" refid="structtoml_1_1local__date_1a19b085abb791335b60a17bfa57b8b964" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/><ref refid="structtoml_1_1local__date_1a19b085abb791335b60a17bfa57b8b964" kindref="member">operator=</ref>(<ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142" refid="structtoml_1_1local__date_1a864832d5aa93ec5cc485e1b71cc7444b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/><ref refid="structtoml_1_1local__date_1a864832d5aa93ec5cc485e1b71cc7444b" kindref="member">operator=</ref>(<ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="namespacetoml_1af35aae2bad0915a002d755034d26ab3d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>)<sp/>==</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150" refid="namespacetoml_1aab37e29caecefebb2ac530538dbc4bb9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154" refid="namespacetoml_1ac367edbc5bd982fe5c635d88da0a3647" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>)<sp/>&lt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159" refid="namespacetoml_1a90f46905b91f75df91574bc674c51213" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>&lt;<sp/>rhs)<sp/>||<sp/>(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163" refid="namespacetoml_1af1136c79cfbb2f44cf90798c33a8bf83" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;=<sp/>rhs);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167" refid="namespacetoml_1abac12305b9b16c45e5ca53f15247f76d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;<sp/>rhs);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="namespacetoml_1a11b17eff44b8e4b0b49c85cc34e241c7" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>local_date&amp;<sp/>date)</highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(4)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(date.year<sp/>)<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(date.month)<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(date.day<sp/><sp/>)<sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="structtoml_1_1local__time" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref></highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184" refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><sp/><ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>23]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><sp/><ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>59]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/><sp/><ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>60]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint16_t<sp/><ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>;<sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>999]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint16_t<sp/><ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref>;<sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>999]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint16_t<sp/><ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>[0,<sp/>999]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="structtoml_1_1local__time_1a609d0e68525d1a8ecabc716a9fdead89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a609d0e68525d1a8ecabc716a9fdead89" kindref="member">local_time</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>us<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ns<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref><sp/><sp/>(static_cast&lt;std::uint8_t&gt;(h)),</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>(static_cast&lt;std::uint8_t&gt;(m)),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>(static_cast&lt;std::uint8_t&gt;(s)),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>(static_cast&lt;std::uint16_t&gt;(ms)),</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref>(static_cast&lt;std::uint16_t&gt;(us)),</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref><sp/>(static_cast&lt;std::uint16_t&gt;(ns))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="structtoml_1_1local__time_1a5b1e8becdabbb119cd41feec54a9480b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time_1a5b1e8becdabbb119cd41feec54a9480b" kindref="member">local_time</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tm&amp;<sp/>t)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref><sp/><sp/>(static_cast&lt;std::uint8_t&gt;(t.tm_hour)),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>(static_cast&lt;std::uint8_t&gt;(t.tm_min)),</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>(static_cast&lt;std::uint8_t&gt;(t.tm_sec)),</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>(0),<sp/><ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref>(0),<sp/><ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref>(0)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Rep,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Period&gt;</highlight></codeline>
<codeline lineno="209" refid="structtoml_1_1local__time_1ad0b9703bddbddd6892da536355368c6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time_1ad0b9703bddbddd6892da536355368c6e" kindref="member">local_time</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;Rep,<sp/>Period&gt;&amp;<sp/>t)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::hours&gt;(t);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;hour<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(h.count());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>t<sp/>-<sp/>h;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::minutes&gt;(t2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;minute<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m.count());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t3<sp/>=<sp/>t2<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::seconds&gt;(t3);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;second<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.count());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t4<sp/>=<sp/>t3<sp/>-<sp/>s;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(t4);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;millisecond<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ms.count());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t5<sp/>=<sp/>t4<sp/>-<sp/>ms;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>us<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(t5);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;microsecond<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(us.count());</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t6<sp/>=<sp/>t5<sp/>-<sp/>us;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ns<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(t6);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;nanosecond<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ns.count());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="structtoml_1_1local__time_1adfbdb7059387b2b2aeeeefd74ab993dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::chrono::nanoseconds()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="231"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::nanoseconds<sp/>(this-&gt;nanosecond)<sp/><sp/>+</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::microseconds(this-&gt;microsecond)<sp/>+</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::milliseconds(this-&gt;millisecond)<sp/>+</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::seconds(this-&gt;second)<sp/>+</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::minutes(this-&gt;minute)<sp/>+</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::hours(this-&gt;hour);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="structtoml_1_1local__time_1a5c6bd161bd1033dbbbe765c20d5c0aea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a5c6bd161bd1033dbbbe765c20d5c0aea" kindref="member">local_time</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241" refid="structtoml_1_1local__time_1a80303ca380fb1bedeff8c5dabb1fdfe3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a80303ca380fb1bedeff8c5dabb1fdfe3" kindref="member">~local_time</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242" refid="structtoml_1_1local__time_1abf404543324c69fded36970396982b31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1abf404543324c69fded36970396982b31" kindref="member">local_time</ref>(<ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243" refid="structtoml_1_1local__time_1a787550ac9a80245a80e7e10fff886bfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time_1a787550ac9a80245a80e7e10fff886bfa" kindref="member">local_time</ref>(<ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244" refid="structtoml_1_1local__time_1a23fa88afe4ff13b01827f7b2db14709f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/><ref refid="structtoml_1_1local__time_1a23fa88afe4ff13b01827f7b2db14709f" kindref="member">operator=</ref>(<ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245" refid="structtoml_1_1local__time_1a6568ebe390d338d1cd8d2fe1670643a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/><ref refid="structtoml_1_1local__time_1a6568ebe390d338d1cd8d2fe1670643a8" kindref="member">operator=</ref>(<ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="namespacetoml_1adae6a0bfa82af7af9c68ee486a504147" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref>)<sp/>==</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253" refid="namespacetoml_1ab3f5d6ed91a0a09fd3f7f90c2e5ce517" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257" refid="namespacetoml_1a8ac4788635f0adc24fd6673ff7a8789d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref>)<sp/>&lt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262" refid="namespacetoml_1ab9b601bc4aafc95aaaa6438245709f14" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>&lt;<sp/>rhs)<sp/>||<sp/>(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266" refid="namespacetoml_1ae6f2283748b662e7bb9a988cc9aeb7cf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;=<sp/>rhs);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270" refid="namespacetoml_1a787a45161dd461b59e72243c8c1ef0ab" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;<sp/>rhs);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><ref refid="namespacetoml_1a11b17eff44b8e4b0b49c85cc34e241c7" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>local_time&amp;<sp/>time)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(time.hour<sp/><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(time.minute)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(time.second);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time.millisecond<sp/>!=<sp/>0<sp/>||<sp/>time.microsecond<sp/>!=<sp/>0<sp/>||<sp/>time.nanosecond<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(3)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(time.millisecond);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time.microsecond<sp/>!=<sp/>0<sp/>||<sp/>time.nanosecond<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(3)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(time.microsecond);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(time.nanosecond<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(&apos;0&apos;)<sp/>&lt;&lt;<sp/>std::setw(3)<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(time.nanosecond);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="structtoml_1_1time__offset" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref></highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300" refid="structtoml_1_1time__offset_1a557c47c1baa919af2fd0054564036bb3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int8_t<sp/><ref refid="structtoml_1_1time__offset_1a557c47c1baa919af2fd0054564036bb3" kindref="member">hour</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[-12,<sp/>12]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="structtoml_1_1time__offset_1a616f18e4a925a97929dd1b412906c5a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::int8_t<sp/><ref refid="structtoml_1_1time__offset_1a616f18e4a925a97929dd1b412906c5a1" kindref="member">minute</ref>;<sp/></highlight><highlight class="comment">//<sp/>[-59,<sp/>59]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="structtoml_1_1time__offset_1afc93860b4f3c310cb10a58adeae1724a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset_1afc93860b4f3c310cb10a58adeae1724a" kindref="member">time_offset</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1time__offset_1a557c47c1baa919af2fd0054564036bb3" kindref="member">hour</ref><sp/><sp/>(static_cast&lt;std::int8_t&gt;(h)),</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset_1a616f18e4a925a97929dd1b412906c5a1" kindref="member">minute</ref>(static_cast&lt;std::int8_t&gt;(m))</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="structtoml_1_1time__offset_1ab6f192f307f0802f7aeb16a3961907c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::chrono::minutes()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="309"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::minutes(this-&gt;minute)<sp/>+</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::hours(this-&gt;hour);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="structtoml_1_1time__offset_1a3489ef3aa2639009c247ec5cc00fe897" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset_1a3489ef3aa2639009c247ec5cc00fe897" kindref="member">time_offset</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315" refid="structtoml_1_1time__offset_1a3a942bf044542bdaaec3803507a49d48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset_1a3a942bf044542bdaaec3803507a49d48" kindref="member">~time_offset</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316" refid="structtoml_1_1time__offset_1af6edd404924ab93bf2d3cda9a6a573cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset_1af6edd404924ab93bf2d3cda9a6a573cf" kindref="member">time_offset</ref>(<ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317" refid="structtoml_1_1time__offset_1aeed99533d8379569ebd0d15b96301fdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset_1aeed99533d8379569ebd0d15b96301fdc" kindref="member">time_offset</ref>(<ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318" refid="structtoml_1_1time__offset_1acaec8ec2b5c8334ff7685c6486ebc193" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/><ref refid="structtoml_1_1time__offset_1acaec8ec2b5c8334ff7685c6486ebc193" kindref="member">operator=</ref>(<ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319" refid="structtoml_1_1time__offset_1a9fa7b9e89bc9ef2f1c9825383dc1deda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/><ref refid="structtoml_1_1time__offset_1a9fa7b9e89bc9ef2f1c9825383dc1deda" kindref="member">operator=</ref>(<ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">};</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="namespacetoml_1a13c8f4bf5481e5c33c4e60fc9d92976a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1time__offset_1a557c47c1baa919af2fd0054564036bb3" kindref="member">hour</ref>,<sp/>lhs.<ref refid="structtoml_1_1time__offset_1a616f18e4a925a97929dd1b412906c5a1" kindref="member">minute</ref>)<sp/>==</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1time__offset_1a557c47c1baa919af2fd0054564036bb3" kindref="member">hour</ref>,<sp/>rhs.<ref refid="structtoml_1_1time__offset_1a616f18e4a925a97929dd1b412906c5a1" kindref="member">minute</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327" refid="namespacetoml_1a8fe05e18b90d71d6cb891403c211ea46" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331" refid="namespacetoml_1a535023506bd5bd80e79e222958d94b8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1time__offset_1a557c47c1baa919af2fd0054564036bb3" kindref="member">hour</ref>,<sp/>lhs.<ref refid="structtoml_1_1time__offset_1a616f18e4a925a97929dd1b412906c5a1" kindref="member">minute</ref>)<sp/>&lt;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1time__offset_1a557c47c1baa919af2fd0054564036bb3" kindref="member">hour</ref>,<sp/>rhs.<ref refid="structtoml_1_1time__offset_1a616f18e4a925a97929dd1b412906c5a1" kindref="member">minute</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336" refid="namespacetoml_1acf9d108f54a091e71ac1439d76741eb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>&lt;<sp/>rhs)<sp/>||<sp/>(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340" refid="namespacetoml_1ac6cedd38d7f06988d0e842452da992ac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;=<sp/>rhs);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344" refid="namespacetoml_1a63d2db02e66e87fe0ae89f0680eba6bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;<sp/>rhs);</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits&gt;</highlight></codeline>
<codeline lineno="350"><highlight class="normal">std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><ref refid="namespacetoml_1a11b17eff44b8e4b0b49c85cc34e241c7" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>time_offset&amp;<sp/>offset)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(offset.hour<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>offset.minute<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minute<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(offset.hour)<sp/>*<sp/>60<sp/>+<sp/>offset.minute;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(minute<sp/>&lt;<sp/>0){os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;<sp/>minute<sp/>=<sp/>std::abs(minute);}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>minute<sp/>/<sp/>60<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>minute<sp/>%<sp/>60;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="structtoml_1_1local__datetime" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref></highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367" refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref><sp/><ref refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" kindref="member">date</ref>;</highlight></codeline>
<codeline lineno="368" refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref><sp/><ref refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="structtoml_1_1local__datetime_1a254dcececa30720639f84f072ccf8380" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__datetime_1a254dcececa30720639f84f072ccf8380" kindref="member">local_datetime</ref>(<ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref><sp/>d,<sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref><sp/>t):<sp/><ref refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" kindref="member">date</ref>(d),<sp/><ref refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" kindref="member">time</ref>(t)<sp/>{}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="structtoml_1_1local__datetime_1a5392efc57d6b0fc68f267798b7dc8e65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime_1a5392efc57d6b0fc68f267798b7dc8e65" kindref="member">local_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tm&amp;<sp/>t):<sp/><ref refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" kindref="member">date</ref>(t),<sp/><ref refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" kindref="member">time</ref>(t){}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="structtoml_1_1local__datetime_1a7f4d5cf5654aa1a65cc22625dc5844f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime_1a7f4d5cf5654aa1a65cc22625dc5844f9" kindref="member">local_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point&amp;<sp/>tp)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>std::chrono::system_clock::to_time_t(tp);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm<sp/>ltime<sp/>=<sp/><ref refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" kindref="member">detail::localtime_s</ref>(&amp;t);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;date<sp/>=<sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>(ltime);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;time<sp/>=<sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>(ltime);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::tm<sp/>lacks<sp/>subsecond<sp/>information,<sp/>so<sp/>diff<sp/>between<sp/>tp<sp/>and<sp/>tm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>to<sp/>get<sp/>millisecond<sp/>&amp;<sp/>microsecond<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_diff<sp/>=<sp/>tp<sp/>-</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::system_clock::from_time_t(std::mktime(&amp;ltime));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;time.<ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(t_diff).count());</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;time.<ref refid="structtoml_1_1local__time_1a67662d3f6d54baea2fda9268e2b90845" kindref="member">microsecond</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(t_diff).count());</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;time.<ref refid="structtoml_1_1local__time_1a9bcf84d9eee020b6ce7d5c6fe335d0dc" kindref="member">nanosecond</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::duration_cast&lt;std::chrono::nanoseconds<sp/>&gt;(t_diff).count());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="structtoml_1_1local__datetime_1aa457a64948bb1c012c43e36d4a7f4dab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime_1aa457a64948bb1c012c43e36d4a7f4dab" kindref="member">local_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t<sp/>t)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>(std::chrono::system_clock::from_time_t(t))</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="structtoml_1_1local__datetime_1a18c240e01afbe23ae1d46577b13d5229" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="399"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal_duration<sp/>=</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point::duration;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normally<sp/>DST<sp/>begins<sp/>at<sp/>A.M.<sp/>3<sp/>or<sp/>4.<sp/>If<sp/>we<sp/>re-use<sp/>conversion<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>local_date<sp/>and<sp/>local_time<sp/>independently,<sp/>the<sp/>conversion<sp/>fails<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>the<sp/>day<sp/>when<sp/>DST<sp/>begins<sp/>or<sp/>ends.<sp/>Since<sp/>local_date<sp/>considers<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>is<sp/>00:00<sp/>A.M.<sp/>and<sp/>local_time<sp/>does<sp/>not<sp/>consider<sp/>DST<sp/>because<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>have<sp/>any<sp/>date<sp/>information.<sp/>We<sp/>need<sp/>to<sp/>consider<sp/>both<sp/>date<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>information<sp/>at<sp/>the<sp/>same<sp/>time<sp/>to<sp/>convert<sp/>it<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm<sp/>t;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_sec<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;time.<ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_min<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;time.<ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_hour<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;time.<ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_mday<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;date.<ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_mon<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;date.<ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_year<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;date.<ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>)<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_wday<sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_yday<sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::mktime<sp/>returns<sp/>date<sp/>as<sp/>local<sp/>time<sp/>zone.<sp/>no<sp/>conversion<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dt<sp/>=<sp/>std::chrono::system_clock::from_time_t(std::mktime(&amp;t));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>+=<sp/>std::chrono::duration_cast&lt;internal_duration&gt;(</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::milliseconds(this-&gt;time.<ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>)<sp/>+</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::microseconds(this-&gt;time.microsecond)<sp/>+</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::nanoseconds<sp/>(this-&gt;time.nanosecond));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="structtoml_1_1local__datetime_1a608dc5ac903be59d77c72dda9db3d588" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::time_t()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="431"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::system_clock::to_time_t(</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::system_clock::time_point(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="structtoml_1_1local__datetime_1a3a8d9a41123839fe943e96202d6c66ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__datetime_1a3a8d9a41123839fe943e96202d6c66ef" kindref="member">local_datetime</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437" refid="structtoml_1_1local__datetime_1a674473e3479c2dac1240c23a576867b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__datetime_1a674473e3479c2dac1240c23a576867b1" kindref="member">~local_datetime</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438" refid="structtoml_1_1local__datetime_1a82e479900e34c2c92e5e2af6ead37e9a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__datetime_1a82e479900e34c2c92e5e2af6ead37e9a" kindref="member">local_datetime</ref>(<ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439" refid="structtoml_1_1local__datetime_1a00aa1062cf158059f8c825d8008ee06e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__datetime_1a00aa1062cf158059f8c825d8008ee06e" kindref="member">local_datetime</ref>(<ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440" refid="structtoml_1_1local__datetime_1ac77710c49af1b2d157de567f02cb5700" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/><ref refid="structtoml_1_1local__datetime_1ac77710c49af1b2d157de567f02cb5700" kindref="member">operator=</ref>(<ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441" refid="structtoml_1_1local__datetime_1acfa49dc26316e048ac5c2cfa5ed032c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/><ref refid="structtoml_1_1local__datetime_1acfa49dc26316e048ac5c2cfa5ed032c7" kindref="member">operator=</ref>(<ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">};</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="namespacetoml_1a571d28a85f4c58a55a5b2476c4b40f02" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" kindref="member">date</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" kindref="member">time</ref>)<sp/>==</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" kindref="member">date</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449" refid="namespacetoml_1a2d132d819828088bbf8ffd0be058abf1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453" refid="namespacetoml_1a9a9873847f70650c75b8377d904d9a6e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" kindref="member">date</ref>,<sp/>lhs.<ref refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" kindref="member">time</ref>)<sp/>&lt;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1local__datetime_1a67661503e7b2843effbb0672bf081364" kindref="member">date</ref>,<sp/>rhs.<ref refid="structtoml_1_1local__datetime_1aef74396c27a3a98071c518dbbde230fe" kindref="member">time</ref>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458" refid="namespacetoml_1abec28df936eb43c4d486fd64ebae25e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>&lt;<sp/>rhs)<sp/>||<sp/>(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462" refid="namespacetoml_1add5891928f2a7d03cb0df52c6c2431fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;=<sp/>rhs);</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466" refid="namespacetoml_1afc60c5ee53512fca9140f06e407d9af3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;<sp/>rhs);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits&gt;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><ref refid="namespacetoml_1a11b17eff44b8e4b0b49c85cc34e241c7" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>local_datetime&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>dt.date<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dt.time;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="structtoml_1_1offset__datetime" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref></highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481" refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>;</highlight></codeline>
<codeline lineno="482" refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="483" refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref><sp/><ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="structtoml_1_1offset__datetime_1a5afab406cfde7741ce3f420d33151c3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1a5afab406cfde7741ce3f420d33151c3e" kindref="member">offset_datetime</ref>(<ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref><sp/>d,<sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref><sp/>t,<sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref><sp/>o)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>(d),<sp/><ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>(t),<sp/><ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>(o)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="488" refid="structtoml_1_1offset__datetime_1a409e92dedf7fb3f9194c62dce3d609b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1a409e92dedf7fb3f9194c62dce3d609b3" kindref="member">offset_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>dt,<sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref><sp/>o)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>(dt.<ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>),<sp/><ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>(dt.<ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>),<sp/><ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>(o)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="491" refid="structtoml_1_1offset__datetime_1a5f5680aa44bd153f131710ffeb8853df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime_1a5f5680aa44bd153f131710ffeb8853df" kindref="member">offset_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>&amp;<sp/>ld)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>(ld.<ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>),<sp/><ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>(ld.<ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>),<sp/><ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>(get_local_offset(nullptr))</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>current<sp/>local<sp/>timezone<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="495" refid="structtoml_1_1offset__datetime_1ab88d42517d06c737adcab8d28c7ad616" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime_1ab88d42517d06c737adcab8d28c7ad616" kindref="member">offset_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point&amp;<sp/>tp)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>(0,<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>use<sp/>gmtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>timet<sp/>=<sp/>std::chrono::system_clock::to_time_t(tp);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tm<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" kindref="member">detail::gmtime_s</ref>(&amp;timet);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;date<sp/>=<sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>(tm);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;time<sp/>=<sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>(tm);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503" refid="structtoml_1_1offset__datetime_1aa410fddd45775679696c7878e27427f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime_1aa410fddd45775679696c7878e27427f6" kindref="member">offset_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t&amp;<sp/>t)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>(0,<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>use<sp/>gmtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tm<sp/><sp/><sp/><sp/>=<sp/><ref refid="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" kindref="member">detail::gmtime_s</ref>(&amp;t);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;date<sp/>=<sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>(tm);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;time<sp/>=<sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>(tm);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510" refid="structtoml_1_1offset__datetime_1aaa667428a52be74dbcdfbb9ce5ac34c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime_1aaa667428a52be74dbcdfbb9ce5ac34c4" kindref="member">offset_datetime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tm&amp;<sp/>t)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>(0,<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>assume<sp/>gmtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;date<sp/>=<sp/><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>(t);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;time<sp/>=<sp/><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>(t);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="structtoml_1_1offset__datetime_1ad5277e982736acaf9e905b2cd121a862" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="518"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>date-time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">internal_duration<sp/>=</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point::duration;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first,<sp/>convert<sp/>it<sp/>to<sp/>local<sp/>date-time<sp/>information<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local_datetime<sp/>does.<sp/>later<sp/>we<sp/>will<sp/>use<sp/>time_t<sp/>to<sp/>adjust<sp/>time<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm<sp/>t;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_sec<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;time.<ref refid="structtoml_1_1local__time_1a8fbc45c5e3f4406e115883169e813c15" kindref="member">second</ref>);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_min<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;time.<ref refid="structtoml_1_1local__time_1a72d8ddb60132940e69383e21668f1250" kindref="member">minute</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_hour<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;time.<ref refid="structtoml_1_1local__time_1a64d6774d20c6c5070cf25be976255838" kindref="member">hour</ref>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_mday<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;date.<ref refid="structtoml_1_1local__date_1a0ea8f1fdf2edf762a0c1d7eb9367f6e5" kindref="member">day</ref>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_mon<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;date.<ref refid="structtoml_1_1local__date_1a5f31fcbf4188bc94d8ba6f46a8a8fd54" kindref="member">month</ref>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_year<sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(this-&gt;date.<ref refid="structtoml_1_1local__date_1a14d9c1cd86cb25b2141b9a7d64f68d6f" kindref="member">year</ref>)<sp/>-<sp/>1900;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_wday<sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_yday<sp/><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>the<sp/>value<sp/>will<sp/>be<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.tm_isdst<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t<sp/>tp_loc<sp/>=<sp/>std::mktime(std::addressof(t));</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tp<sp/>=<sp/>std::chrono::system_clock::from_time_t(tp_loc);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>+=<sp/>std::chrono::duration_cast&lt;internal_duration&gt;(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::milliseconds(this-&gt;time.<ref refid="structtoml_1_1local__time_1aa74932ceccf287bfaea3073e6f2b9291" kindref="member">millisecond</ref>)<sp/>+</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::microseconds(this-&gt;time.microsecond)<sp/>+</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::nanoseconds<sp/>(this-&gt;time.nanosecond));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>mktime<sp/>uses<sp/>local<sp/>time<sp/>zone,<sp/>it<sp/>should<sp/>be<sp/>corrected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`12:00:00+09:00`<sp/>means<sp/>`03:00:00Z`.<sp/>So<sp/>mktime<sp/>returns<sp/>`03:00:00Z`<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>in<sp/>`+09:00`<sp/>timezone.<sp/>To<sp/>represent<sp/>`12:00:00Z`<sp/>there,<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>add<sp/>`+09:00`<sp/>to<sp/>`03:00:00Z`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Here,<sp/>it<sp/>uses<sp/>the<sp/>time_t<sp/>converted<sp/>from<sp/>date-time<sp/>info<sp/>to<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>daylight<sp/>saving<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ofs<sp/>=<sp/>get_local_offset(std::addressof(tp_loc));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>+=<sp/>std::chrono::hours<sp/><sp/>(ofs.hour);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>+=<sp/>std::chrono::minutes(ofs.minute);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>got<sp/>`12:00:00Z`<sp/>by<sp/>correcting<sp/>local<sp/>timezone<sp/>applied<sp/>by<sp/>mktime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>we<sp/>will<sp/>apply<sp/>the<sp/>offset.<sp/>Let&apos;s<sp/>say<sp/>`12:00:00-08:00`<sp/>is<sp/>given.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>now,<sp/>we<sp/>have<sp/>`12:00:00Z`.<sp/>`12:00:00-08:00`<sp/>means<sp/>`20:00:00Z`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>need<sp/>to<sp/>subtract<sp/>the<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>-=<sp/>std::chrono::minutes(this-&gt;offset);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tp;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="structtoml_1_1offset__datetime_1ae0991d276090d83c9cbea277234ccb35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::time_t()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="562"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::system_clock::to_time_t(</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::system_clock::time_point(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="structtoml_1_1offset__datetime_1a90306b9efe58d2133bfe8bd5f62212c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1a90306b9efe58d2133bfe8bd5f62212c3" kindref="member">offset_datetime</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568" refid="structtoml_1_1offset__datetime_1ac8ca48c1555cfdbb3ef7d090f93abf69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1ac8ca48c1555cfdbb3ef7d090f93abf69" kindref="member">~offset_datetime</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569" refid="structtoml_1_1offset__datetime_1ad37ab5a9d9b6a456b1785238987245e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1ad37ab5a9d9b6a456b1785238987245e9" kindref="member">offset_datetime</ref>(<ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="570" refid="structtoml_1_1offset__datetime_1aef650fd2caefcb29554391a595e49abb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime_1aef650fd2caefcb29554391a595e49abb" kindref="member">offset_datetime</ref>(<ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="571" refid="structtoml_1_1offset__datetime_1a420eeeca7f2bf2c2cbd21d713f50b84c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/><ref refid="structtoml_1_1offset__datetime_1a420eeeca7f2bf2c2cbd21d713f50b84c" kindref="member">operator=</ref>(<ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572" refid="structtoml_1_1offset__datetime_1a7bd56a72c134e784c68b693bd0541618" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/><ref refid="structtoml_1_1offset__datetime_1a7bd56a72c134e784c68b693bd0541618" kindref="member">operator=</ref>(<ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref><sp/>get_local_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::time_t*<sp/>tp)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>local<sp/>timezone<sp/>with<sp/>the<sp/>same<sp/>date-time<sp/>information<sp/>as<sp/>mktime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t<sp/>=<sp/><ref refid="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" kindref="member">detail::localtime_s</ref>(tp);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;char,<sp/>6&gt;<sp/>buf;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/>=<sp/>std::strftime(buf.data(),<sp/>6,<sp/></highlight><highlight class="stringliteral">&quot;%z&quot;</highlight><highlight class="normal">,<sp/>&amp;t);<sp/></highlight><highlight class="comment">//<sp/>+hhmm\0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/>!=<sp/>5)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;toml::offset_datetime:<sp/>cannot<sp/>obtain<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;timezone<sp/>information<sp/>of<sp/>current<sp/>env&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ofs<sp/>=<sp/>std::atoi(buf.data());</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ofs_h<sp/>=<sp/>ofs<sp/>/<sp/>100;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ofs_m<sp/>=<sp/>ofs<sp/>-<sp/>(ofs_h<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref>(ofs_h,<sp/>ofs_m);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal">};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595" refid="namespacetoml_1a80acff1c40bfb3b925e67572ff08836c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>,<sp/>lhs.<ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>,<sp/>lhs.<ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>)<sp/>==</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>,<sp/>rhs.<ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>,<sp/>rhs.<ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600" refid="namespacetoml_1a07ccf5c55fcebe7a98dfa832d22eebd0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604" refid="namespacetoml_1a9b122489594d7f6293f1cd205658756d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(lhs.<ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>,<sp/>lhs.<ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>,<sp/>lhs.<ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>)<sp/>&lt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_tuple(rhs.<ref refid="structtoml_1_1offset__datetime_1a154eb1ecc13b3533aa38c79d08ed9c20" kindref="member">date</ref>,<sp/>rhs.<ref refid="structtoml_1_1offset__datetime_1a1445f154a6789e821d246c157e4779c7" kindref="member">time</ref>,<sp/>rhs.<ref refid="structtoml_1_1offset__datetime_1a2ae16349956379241f713a9fc0d6a246" kindref="member">offset</ref>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609" refid="namespacetoml_1ac2df538a92d25d6a049ca3a86e7c7561" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>&lt;<sp/>rhs)<sp/>||<sp/>(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613" refid="namespacetoml_1a0f1036b4702599b81fb073090c84defd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;=<sp/>rhs);</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617" refid="namespacetoml_1abd10c0a7b1fb382b0d4b355177e3d978" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;<sp/>rhs);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits&gt;</highlight></codeline>
<codeline lineno="623"><highlight class="normal">std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><ref refid="namespacetoml_1a11b17eff44b8e4b0b49c85cc34e241c7" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_datetime&amp;<sp/>dt)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>dt.date<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dt.time<sp/>&lt;&lt;<sp/>dt.offset;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight><highlight class="comment">//toml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//<sp/>TOML11_DATETIME</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="external/toml/datetime.hpp"/>
  </compounddef>
</doxygen>
