<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_simplex_noise_8cpp" kind="file" language="C++">
    <compoundname>SimplexNoise.cpp</compoundname>
    <includes refid="_simplex_noise_8hpp" local="yes">SimplexNoise.hpp</includes>
    <includes local="no">cstdint</includes>
    <incdepgraph>
      <node id="1">
        <label>external/SimplexNoise/SimplexNoise.cpp</label>
        <link refid="_simplex_noise_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>SimplexNoise.hpp</label>
        <link refid="_simplex_noise_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_simplex_noise_8cpp_1a1587ac10c84c0df57701797b751eddda" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t perm[256]</definition>
        <argsstring>[256]</argsstring>
        <name>perm</name>
        <initializer>= {
	151, 160, 137, 91, 90, 15,
	131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
	190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
	88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
	77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
	102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
	135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
	5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
	223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
	129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
	251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
	49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
	138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Permutation table. This is just a random jumble of all numbers 0-255.</para>
<para>This produce a repeatable pattern of 256, but Ken Perlin stated that it is not a problem for graphic texture as the noise features disappear at a distance far enough to be able to see a repeatable pattern of 256.</para>
<para>This needs to be exactly the same for all instances on all platforms, so it&apos;s easiest to just keep it as static explicit data. This also removes the need for any initialisation of this class.</para>
<para>Note that making this an uint32_t[] instead of a uint8_t[] might make the code run faster on platforms with a high penalty for unaligned single byte addressing. Intel x86 is generally single-byte-friendly, but some other CPUs are faster with 4-aligned reads. However, a char[] is smaller, which avoids cache trashing, and that is probably the most important aspect on most architectures. This array is accessed a <emphasis>lot</emphasis> by the noise functions. A vector-valued noise over 3D accesses it 96 times, and a float-valued 4D noise 64 times. We want this to fit in the cache! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/SimplexNoise/SimplexNoise.cpp" line="72" column="22" bodyfile="external/SimplexNoise/SimplexNoise.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_simplex_noise_8cpp_1ac357795e5f54b15183807d99cde5199d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t fastfloor</definition>
        <argsstring>(float fp)</argsstring>
        <name>fastfloor</name>
        <param>
          <type>float</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes the largest integer value not greater than the float one</para>
<para>This method is faster than using (int32_t)std::floor(fp).</para>
<para>I measured it to be approximately twice as fast: float: ~18.4ns instead of ~39.6ns on an AMD APU), double: ~20.6ns instead of ~36.6ns on an AMD APU), Reference: <ulink url="http://www.codeproject.com/Tips/700780/Fast-floor-ceiling-functions">http://www.codeproject.com/Tips/700780/Fast-floor-ceiling-functions</ulink></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fp</parametername>
</parameternamelist>
<parameterdescription>
<para>float input value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>largest integer value not greater than fp </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/SimplexNoise/SimplexNoise.cpp" line="45" column="23" bodyfile="external/SimplexNoise/SimplexNoise.cpp" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="_simplex_noise_8cpp_1a39b91b979c2d169ec26079a983134a54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t hash</definition>
        <argsstring>(int32_t i)</argsstring>
        <name>hash</name>
        <param>
          <type>int32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to hash an integer using the above permutation table</para>
<para>This inline function costs around 1ns, and is called N+1 times for a noise of N dimension.</para>
<para>Using a real hash function would be better to improve the &quot;repeatability of 256&quot; of the above permutation table, but fast integer Hash functions uses more time and have bad random properties.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>Integer value to hash</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>8-bits hashed value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/SimplexNoise/SimplexNoise.cpp" line="99" column="23" bodyfile="external/SimplexNoise/SimplexNoise.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="_simplex_noise_8cpp_1a70932d9c87977053f493d729e778e661" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float grad</definition>
        <argsstring>(int32_t hash, float x)</argsstring>
        <name>grad</name>
        <param>
          <type>int32_t</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function to compute gradients-dot-residual vectors (1D)</para>
<para><simplesect kind="note"><para>that these generate gradients of more than unit length. To make a close match with the value range of classic Perlin noise, the final noise values need to be rescaled to fit nicely within [-1,1]. (The simplex noise functions as such also have different scaling.) Note also that these noise functions are the most practical and useful signed version of Perlin noise.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>distance to the corner</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gradient value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/SimplexNoise/SimplexNoise.cpp" line="126" column="14" bodyfile="external/SimplexNoise/SimplexNoise.cpp" bodystart="126" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="_simplex_noise_8cpp_1a944a4d8f19534304e5d0192670da10b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float grad</definition>
        <argsstring>(int32_t hash, float x, float y)</argsstring>
        <name>grad</name>
        <param>
          <type>int32_t</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper functions to compute gradients-dot-residual vectors (2D)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>x coord of the distance to the corner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>y coord of the distance to the corner</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gradient value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/SimplexNoise/SimplexNoise.cpp" line="145" column="14" bodyfile="external/SimplexNoise/SimplexNoise.cpp" bodystart="145" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="_simplex_noise_8cpp_1a6f1acf5d562d1ab1bdbe7e4292cabb9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float grad</definition>
        <argsstring>(int32_t hash, float x, float y, float z)</argsstring>
        <name>grad</name>
        <param>
          <type>int32_t</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper functions to compute gradients-dot-residual vectors (3D)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hash</parametername>
</parameternamelist>
<parameterdescription>
<para>hash value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>x coord of the distance to the corner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>y coord of the distance to the corner </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">z</parametername>
</parameternamelist>
<parameterdescription>
<para>z coord of the distance to the corner</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gradient value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/SimplexNoise/SimplexNoise.cpp" line="163" column="14" bodyfile="external/SimplexNoise/SimplexNoise.cpp" bodystart="163" bodyend="170"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Perlin Simplex Noise C++ Implementation (1D, 2D, 3D). </para>
    </briefdescription>
    <detaileddescription>
<para>Copyright (c) 2014-2018 Sebastien Rombauts (<ulink url="mailto:sebastien.rombauts@gmail.com">sebastien.rombauts@gmail.com</ulink>)</para>
<para>This C++ implementation is based on the speed-improved Java version 2012-03-09 by Stefan Gustavson (original Java source code in the public domain). <ulink url="http://webstaff.itn.liu.se/~stegu/simplexnoise/SimplexNoise.java:">http://webstaff.itn.liu.se/~stegu/simplexnoise/SimplexNoise.java:</ulink><itemizedlist>
<listitem><para>Based on example code by Stefan Gustavson (<ulink url="mailto:stegu@itn.liu.se">stegu@itn.liu.se</ulink>).</para>
</listitem><listitem><para>Optimisations by Peter Eastman (<ulink url="mailto:peastman@drizzle.stanford.edu">peastman@drizzle.stanford.edu</ulink>).</para>
</listitem><listitem><para>Better rank ordering method by Stefan Gustavson in 2012.</para>
</listitem></itemizedlist>
</para>
<para>This implementation is &quot;Simplex Noise&quot; as presented by Ken Perlin at a relatively obscure and not often cited course session &quot;Real-Time Shading&quot; at Siggraph 2001 (before real time shading actually took on), under the title &quot;hardware noise&quot;. The 3D function is numerically equivalent to his Java reference code available in the PDF course notes, although I re-implemented it from scratch to get more readable code. The 1D, 2D and 4D cases were implemented from scratch by me from Ken Perlin&apos;s text.</para>
<para>Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt or copy at <ulink url="http://opensource.org/licenses/MIT">http://opensource.org/licenses/MIT</ulink>) </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_simplex_noise_8hpp" kindref="compound">SimplexNoise.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>int32_t/uint8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>fastfloor(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fp)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fp);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fp<sp/>&lt;<sp/>i)<sp/>?<sp/>(i<sp/>-<sp/>1)<sp/>:<sp/>(i);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>perm[256]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>151,<sp/>160,<sp/>137,<sp/>91,<sp/>90,<sp/>15,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>131,<sp/>13,<sp/>201,<sp/>95,<sp/>96,<sp/>53,<sp/>194,<sp/>233,<sp/>7,<sp/>225,<sp/>140,<sp/>36,<sp/>103,<sp/>30,<sp/>69,<sp/>142,<sp/>8,<sp/>99,<sp/>37,<sp/>240,<sp/>21,<sp/>10,<sp/>23,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>190,<sp/>6,<sp/>148,<sp/>247,<sp/>120,<sp/>234,<sp/>75,<sp/>0,<sp/>26,<sp/>197,<sp/>62,<sp/>94,<sp/>252,<sp/>219,<sp/>203,<sp/>117,<sp/>35,<sp/>11,<sp/>32,<sp/>57,<sp/>177,<sp/>33,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>88,<sp/>237,<sp/>149,<sp/>56,<sp/>87,<sp/>174,<sp/>20,<sp/>125,<sp/>136,<sp/>171,<sp/>168,<sp/>68,<sp/>175,<sp/>74,<sp/>165,<sp/>71,<sp/>134,<sp/>139,<sp/>48,<sp/>27,<sp/>166,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>77,<sp/>146,<sp/>158,<sp/>231,<sp/>83,<sp/>111,<sp/>229,<sp/>122,<sp/>60,<sp/>211,<sp/>133,<sp/>230,<sp/>220,<sp/>105,<sp/>92,<sp/>41,<sp/>55,<sp/>46,<sp/>245,<sp/>40,<sp/>244,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>102,<sp/>143,<sp/>54,<sp/>65,<sp/>25,<sp/>63,<sp/>161,<sp/>1,<sp/>216,<sp/>80,<sp/>73,<sp/>209,<sp/>76,<sp/>132,<sp/>187,<sp/>208,<sp/>89,<sp/>18,<sp/>169,<sp/>200,<sp/>196,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>135,<sp/>130,<sp/>116,<sp/>188,<sp/>159,<sp/>86,<sp/>164,<sp/>100,<sp/>109,<sp/>198,<sp/>173,<sp/>186,<sp/>3,<sp/>64,<sp/>52,<sp/>217,<sp/>226,<sp/>250,<sp/>124,<sp/>123,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>202,<sp/>38,<sp/>147,<sp/>118,<sp/>126,<sp/>255,<sp/>82,<sp/>85,<sp/>212,<sp/>207,<sp/>206,<sp/>59,<sp/>227,<sp/>47,<sp/>16,<sp/>58,<sp/>17,<sp/>182,<sp/>189,<sp/>28,<sp/>42,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>223,<sp/>183,<sp/>170,<sp/>213,<sp/>119,<sp/>248,<sp/>152,<sp/>2,<sp/>44,<sp/>154,<sp/>163,<sp/>70,<sp/>221,<sp/>153,<sp/>101,<sp/>155,<sp/>167,<sp/>43,<sp/>172,<sp/>9,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>129,<sp/>22,<sp/>39,<sp/>253,<sp/>19,<sp/>98,<sp/>108,<sp/>110,<sp/>79,<sp/>113,<sp/>224,<sp/>232,<sp/>178,<sp/>185,<sp/>112,<sp/>104,<sp/>218,<sp/>246,<sp/>97,<sp/>228,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>251,<sp/>34,<sp/>242,<sp/>193,<sp/>238,<sp/>210,<sp/>144,<sp/>12,<sp/>191,<sp/>179,<sp/>162,<sp/>241,<sp/>81,<sp/>51,<sp/>145,<sp/>235,<sp/>249,<sp/>14,<sp/>239,<sp/>107,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>49,<sp/>192,<sp/>214,<sp/>31,<sp/>181,<sp/>199,<sp/>106,<sp/>157,<sp/>184,<sp/>84,<sp/>204,<sp/>176,<sp/>115,<sp/>121,<sp/>50,<sp/>45,<sp/>127,<sp/>4,<sp/>150,<sp/>254,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>138,<sp/>236,<sp/>205,<sp/>93,<sp/>222,<sp/>114,<sp/>67,<sp/>29,<sp/>24,<sp/>72,<sp/>243,<sp/>141,<sp/>128,<sp/>195,<sp/>78,<sp/>66,<sp/>215,<sp/>61,<sp/>156,<sp/>180};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/>hash(int32_t<sp/>i)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>perm[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i)];</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>NOTE<sp/>Gradient<sp/>table<sp/>to<sp/>test<sp/>if<sp/>lookup-table<sp/>are<sp/>more<sp/>efficient<sp/>than<sp/>calculs</highlight></codeline>
<codeline lineno="105"><highlight class="comment">static<sp/>const<sp/>float<sp/>gradients1D[16]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-8.f,<sp/>-7.f,<sp/>-6.f,<sp/>-5.f,<sp/>-4.f,<sp/>-3.f,<sp/>-2.f,<sp/>-1.f,</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.f,<sp/><sp/>2.f,<sp/><sp/>3.f,<sp/><sp/>4.f,<sp/><sp/>5.f,<sp/><sp/>6.f,<sp/><sp/>7.f,<sp/><sp/>8.f</highlight></codeline>
<codeline lineno="108"><highlight class="comment">};</highlight></codeline>
<codeline lineno="109"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>grad(int32_t<sp/>hash,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>h<sp/>=<sp/>hash<sp/>&amp;<sp/>0x0F;<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>low<sp/>4<sp/>bits<sp/>of<sp/>hash<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>grad<sp/>=<sp/>1.0f<sp/>+<sp/>(h<sp/>&amp;<sp/>7);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gradient<sp/>value<sp/>1.0,<sp/>2.0,<sp/>...,<sp/>8.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((h<sp/>&amp;<sp/>8)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grad<sp/>=<sp/>-grad;<sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>a<sp/>random<sp/>sign<sp/>for<sp/>the<sp/>gradient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>float<sp/>grad<sp/>=<sp/>gradients1D[h];<sp/><sp/><sp/><sp/>//<sp/>NOTE<sp/>:<sp/>Test<sp/>of<sp/>Gradient<sp/>look-up<sp/>table<sp/>instead<sp/>of<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(grad<sp/>*<sp/>x);<sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>the<sp/>gradient<sp/>with<sp/>the<sp/>distance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>grad(int32_t<sp/>hash,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>h<sp/>=<sp/>hash<sp/>&amp;<sp/>0x3F;<sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>low<sp/>3<sp/>bits<sp/>of<sp/>hash<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>h<sp/>&lt;<sp/>4<sp/>?<sp/>x<sp/>:<sp/>y;<sp/></highlight><highlight class="comment">//<sp/>into<sp/>8<sp/>simple<sp/>gradient<sp/>directions,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>h<sp/>&lt;<sp/>4<sp/>?<sp/>y<sp/>:<sp/>x;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((h<sp/>&amp;<sp/>1)<sp/>?<sp/>-u<sp/>:<sp/>u)<sp/>+<sp/>((h<sp/>&amp;<sp/>2)<sp/>?<sp/>-2.0f<sp/>*<sp/>v<sp/>:<sp/>2.0f<sp/>*<sp/>v);<sp/></highlight><highlight class="comment">//<sp/>and<sp/>compute<sp/>the<sp/>dot<sp/>product<sp/>with<sp/>(x,y).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>grad(int32_t<sp/>hash,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>hash<sp/>&amp;<sp/>15;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>low<sp/>4<sp/>bits<sp/>of<sp/>hash<sp/>code<sp/>into<sp/>12<sp/>simple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>u<sp/>=<sp/>h<sp/>&lt;<sp/>8<sp/>?<sp/>x<sp/>:<sp/>y;<sp/></highlight><highlight class="comment">//<sp/>gradient<sp/>directions,<sp/>and<sp/>compute<sp/>dot<sp/>product.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>h<sp/>&lt;<sp/>4<sp/>?<sp/>y<sp/>:<sp/>h<sp/>==<sp/>12<sp/>||<sp/>h<sp/>==<sp/>14<sp/>?<sp/>x</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>z;<sp/></highlight><highlight class="comment">//<sp/>Fix<sp/>repeats<sp/>at<sp/>h<sp/>=<sp/>12<sp/>to<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((h<sp/>&amp;<sp/>1)<sp/>?<sp/>-u<sp/>:<sp/>u)<sp/>+<sp/>((h<sp/>&amp;<sp/>2)<sp/>?<sp/>-v<sp/>:<sp/>v);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_simplex_noise_1ac7bd445e9b5e2d5aecb30c5f5840528c" kindref="member">SimplexNoise::noise</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n0,<sp/>n1;<sp/></highlight><highlight class="comment">//<sp/>Noise<sp/>contributions<sp/>from<sp/>the<sp/>two<sp/>&quot;corners&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>skew<sp/>the<sp/>input<sp/>space<sp/>in<sp/>1D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Corners<sp/>coordinates<sp/>(nearest<sp/>integer<sp/>values):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i0<sp/>=<sp/>fastfloor(x);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i1<sp/>=<sp/>i0<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Distances<sp/>to<sp/>corners<sp/>(between<sp/>0<sp/>and<sp/>1):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x0<sp/>=<sp/>x<sp/>-<sp/>i0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>x0<sp/>-<sp/>1.0f;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>contribution<sp/>from<sp/>the<sp/>first<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0<sp/>=<sp/>1.0f<sp/>-<sp/>x0<sp/>*<sp/>x0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(t0<sp/>&lt;<sp/>0.0f)<sp/>t0<sp/>=<sp/>0.0f;<sp/>//<sp/>not<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>*=<sp/>t0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>n0<sp/>=<sp/>t0<sp/>*<sp/>t0<sp/>*<sp/>grad(hash(i0),<sp/>x0);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>contribution<sp/>from<sp/>the<sp/>second<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>1.0f<sp/>-<sp/>x1<sp/>*<sp/>x1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>if(t1<sp/>&lt;<sp/>0.0f)<sp/>t1<sp/>=<sp/>0.0f;<sp/>//<sp/>not<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>*=<sp/>t1;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>t1<sp/>*<sp/>t1<sp/>*<sp/>grad(hash(i1),<sp/>x1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>value<sp/>of<sp/>this<sp/>noise<sp/>is<sp/>8*(3/4)^4<sp/>=<sp/>2.53125</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>factor<sp/>of<sp/>0.395<sp/>scales<sp/>to<sp/>fit<sp/>exactly<sp/>within<sp/>[-1,1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.395f<sp/>*<sp/>(n0<sp/>+<sp/>n1);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_simplex_noise_1ac7bd445e9b5e2d5aecb30c5f5840528c" kindref="member">SimplexNoise::noise</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n0,<sp/>n1,<sp/>n2;<sp/></highlight><highlight class="comment">//<sp/>Noise<sp/>contributions<sp/>from<sp/>the<sp/>three<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skewing/Unskewing<sp/>factors<sp/>for<sp/>2D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>F2<sp/>=<sp/>0.366025403f;<sp/></highlight><highlight class="comment">//<sp/>F2<sp/>=<sp/>(sqrt(3)<sp/>-<sp/>1)<sp/>/<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>G2<sp/>=<sp/>0.211324865f;<sp/></highlight><highlight class="comment">//<sp/>G2<sp/>=<sp/>(3<sp/>-<sp/>sqrt(3))<sp/>/<sp/>6<sp/><sp/><sp/>=<sp/>F2<sp/>/<sp/>(1<sp/>+<sp/>2<sp/>*<sp/>K)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skew<sp/>the<sp/>input<sp/>space<sp/>to<sp/>determine<sp/>which<sp/>simplex<sp/>cell<sp/>we&apos;re<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(x<sp/>+<sp/>y)<sp/>*<sp/>F2;<sp/></highlight><highlight class="comment">//<sp/>Hairy<sp/>factor<sp/>for<sp/>2D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xs<sp/>=<sp/>x<sp/>+<sp/>s;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ys<sp/>=<sp/>y<sp/>+<sp/>s;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>i<sp/>=<sp/>fastfloor(xs);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>j<sp/>=<sp/>fastfloor(ys);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unskew<sp/>the<sp/>cell<sp/>origin<sp/>back<sp/>to<sp/>(x,y)<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i<sp/>+<sp/>j)<sp/>*<sp/>G2;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X0<sp/>=<sp/>i<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Y0<sp/>=<sp/>j<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x0<sp/>=<sp/>x<sp/>-<sp/>X0;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>x,y<sp/>distances<sp/>from<sp/>the<sp/>cell<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y0<sp/>=<sp/>y<sp/>-<sp/>Y0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>2D<sp/>case,<sp/>the<sp/>simplex<sp/>shape<sp/>is<sp/>an<sp/>equilateral<sp/>triangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>simplex<sp/>we<sp/>are<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>i1,<sp/>j1;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>second<sp/>(middle)<sp/>corner<sp/>of<sp/>simplex<sp/>in<sp/>(i,j)<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&gt;<sp/>y0)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>lower<sp/>triangle,<sp/>XY<sp/>order:<sp/>(0,0)-&gt;(1,0)-&gt;(1,1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>upper<sp/>triangle,<sp/>YX<sp/>order:<sp/>(0,0)-&gt;(0,1)-&gt;(1,1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>step<sp/>of<sp/>(1,0)<sp/>in<sp/>(i,j)<sp/>means<sp/>a<sp/>step<sp/>of<sp/>(1-c,-c)<sp/>in<sp/>(x,y),<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>step<sp/>of<sp/>(0,1)<sp/>in<sp/>(i,j)<sp/>means<sp/>a<sp/>step<sp/>of<sp/>(-c,1-c)<sp/>in<sp/>(x,y),<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>=<sp/>(3-sqrt(3))/6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>x0<sp/>-<sp/>i1<sp/>+<sp/>G2;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>middle<sp/>corner<sp/>in<sp/>(x,y)<sp/>unskewed<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>y0<sp/>-<sp/>j1<sp/>+<sp/>G2;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>x0<sp/>-<sp/>1.0f<sp/>+<sp/>2.0f<sp/>*<sp/>G2;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>last<sp/>corner<sp/>in<sp/>(x,y)<sp/>unskewed<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>y0<sp/>-<sp/>1.0f<sp/>+<sp/>2.0f<sp/>*<sp/>G2;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>out<sp/>the<sp/>hashed<sp/>gradient<sp/>indices<sp/>of<sp/>the<sp/>three<sp/>simplex<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gi0<sp/>=<sp/>hash(i<sp/>+<sp/>hash(j));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gi1<sp/>=<sp/>hash(i<sp/>+<sp/>i1<sp/>+<sp/>hash(j<sp/>+<sp/>j1));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gi2<sp/>=<sp/>hash(i<sp/>+<sp/>1<sp/>+<sp/>hash(j<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>contribution<sp/>from<sp/>the<sp/>first<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0<sp/>=<sp/>0.5f<sp/>-<sp/>x0<sp/>*<sp/>x0<sp/>-<sp/>y0<sp/>*<sp/>y0;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n0<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>*=<sp/>t0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n0<sp/>=<sp/>t0<sp/>*<sp/>t0<sp/>*<sp/>grad(gi0,<sp/>x0,<sp/>y0);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>contribution<sp/>from<sp/>the<sp/>second<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>0.5f<sp/>-<sp/>x1<sp/>*<sp/>x1<sp/>-<sp/>y1<sp/>*<sp/>y1;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>&lt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>*=<sp/>t1;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>t1<sp/>*<sp/>t1<sp/>*<sp/>grad(gi1,<sp/>x1,<sp/>y1);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>contribution<sp/>from<sp/>the<sp/>third<sp/>corner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>0.5f<sp/>-<sp/>x2<sp/>*<sp/>x2<sp/>-<sp/>y2<sp/>*<sp/>y2;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t2<sp/>&lt;<sp/>0.0f)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>*=<sp/>t2;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>t2<sp/>*<sp/>t2<sp/>*<sp/>grad(gi2,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>contributions<sp/>from<sp/>each<sp/>corner<sp/>to<sp/>get<sp/>the<sp/>final<sp/>noise<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>is<sp/>scaled<sp/>to<sp/>return<sp/>values<sp/>in<sp/>the<sp/>interval<sp/>[-1,1].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>45.23065f<sp/>*<sp/>(n0<sp/>+<sp/>n1<sp/>+<sp/>n2);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_simplex_noise_1ac7bd445e9b5e2d5aecb30c5f5840528c" kindref="member">SimplexNoise::noise</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>n0,<sp/>n1,<sp/>n2,<sp/>n3;<sp/></highlight><highlight class="comment">//<sp/>Noise<sp/>contributions<sp/>from<sp/>the<sp/>four<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skewing/Unskewing<sp/>factors<sp/>for<sp/>3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>F3<sp/>=<sp/>1.0f<sp/>/<sp/>3.0f;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>G3<sp/>=<sp/>1.0f<sp/>/<sp/>6.0f;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skew<sp/>the<sp/>input<sp/>space<sp/>to<sp/>determine<sp/>which<sp/>simplex<sp/>cell<sp/>we&apos;re<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>(x<sp/>+<sp/>y<sp/>+<sp/>z)<sp/>*<sp/>F3;<sp/></highlight><highlight class="comment">//<sp/>Very<sp/>nice<sp/>and<sp/>simple<sp/>skew<sp/>factor<sp/>for<sp/>3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>fastfloor(x<sp/>+<sp/>s);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>fastfloor(y<sp/>+<sp/>s);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>fastfloor(z<sp/>+<sp/>s);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(i<sp/>+<sp/>j<sp/>+<sp/>k)<sp/>*<sp/>G3;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X0<sp/>=<sp/>i<sp/>-<sp/>t;<sp/></highlight><highlight class="comment">//<sp/>Unskew<sp/>the<sp/>cell<sp/>origin<sp/>back<sp/>to<sp/>(x,y,z)<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Y0<sp/>=<sp/>j<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Z0<sp/>=<sp/>k<sp/>-<sp/>t;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x0<sp/>=<sp/>x<sp/>-<sp/>X0;<sp/></highlight><highlight class="comment">//<sp/>The<sp/>x,y,z<sp/>distances<sp/>from<sp/>the<sp/>cell<sp/>origin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y0<sp/>=<sp/>y<sp/>-<sp/>Y0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z0<sp/>=<sp/>z<sp/>-<sp/>Z0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>3D<sp/>case,<sp/>the<sp/>simplex<sp/>shape<sp/>is<sp/>a<sp/>slightly<sp/>irregular<sp/>tetrahedron.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>simplex<sp/>we<sp/>are<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i1,<sp/>j1,<sp/>k1;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>second<sp/>corner<sp/>of<sp/>simplex<sp/>in<sp/>(i,j,k)<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2,<sp/>j2,<sp/>k2;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>third<sp/>corner<sp/>of<sp/>simplex<sp/>in<sp/>(i,j,k)<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&gt;=<sp/>y0)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&gt;=<sp/>z0)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>X<sp/>Y<sp/>Z<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&gt;=<sp/>z0)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>X<sp/>Z<sp/>Y<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Z<sp/>X<sp/>Y<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="comment">//<sp/>x0&lt;y0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y0<sp/>&lt;<sp/>z0)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Z<sp/>Y<sp/>X<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x0<sp/>&lt;<sp/>z0)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Y<sp/>Z<sp/>X<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j1<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k2<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Y<sp/>X<sp/>Z<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>step<sp/>of<sp/>(1,0,0)<sp/>in<sp/>(i,j,k)<sp/>means<sp/>a<sp/>step<sp/>of<sp/>(1-c,-c,-c)<sp/>in<sp/>(x,y,z),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>step<sp/>of<sp/>(0,1,0)<sp/>in<sp/>(i,j,k)<sp/>means<sp/>a<sp/>step<sp/>of<sp/>(-c,1-c,-c)<sp/>in<sp/>(x,y,z),<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>step<sp/>of<sp/>(0,0,1)<sp/>in<sp/>(i,j,k)<sp/>means<sp/>a<sp/>step<sp/>of<sp/>(-c,-c,1-c)<sp/>in<sp/>(x,y,z),<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>=<sp/>1/6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x1<sp/>=<sp/>x0<sp/>-<sp/>i1<sp/>+<sp/>G3;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>second<sp/>corner<sp/>in<sp/>(x,y,z)<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y1<sp/>=<sp/>y0<sp/>-<sp/>j1<sp/>+<sp/>G3;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>z0<sp/>-<sp/>k1<sp/>+<sp/>G3;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>x0<sp/>-<sp/>i2<sp/>+<sp/>2.0f<sp/>*<sp/>G3;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>third<sp/>corner<sp/>in<sp/>(x,y,z)<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y2<sp/>=<sp/>y0<sp/>-<sp/>j2<sp/>+<sp/>2.0f<sp/>*<sp/>G3;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z2<sp/>=<sp/>z0<sp/>-<sp/>k2<sp/>+<sp/>2.0f<sp/>*<sp/>G3;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x3<sp/>=<sp/>x0<sp/>-<sp/>1.0f<sp/>+<sp/>3.0f<sp/>*<sp/>G3;<sp/></highlight><highlight class="comment">//<sp/>Offsets<sp/>for<sp/>last<sp/>corner<sp/>in<sp/>(x,y,z)<sp/>coords</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y3<sp/>=<sp/>y0<sp/>-<sp/>1.0f<sp/>+<sp/>3.0f<sp/>*<sp/>G3;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z3<sp/>=<sp/>z0<sp/>-<sp/>1.0f<sp/>+<sp/>3.0f<sp/>*<sp/>G3;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>out<sp/>the<sp/>hashed<sp/>gradient<sp/>indices<sp/>of<sp/>the<sp/>four<sp/>simplex<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gi0<sp/>=<sp/>hash(i<sp/>+<sp/>hash(j<sp/>+<sp/>hash(k)));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gi1<sp/>=<sp/>hash(i<sp/>+<sp/>i1<sp/>+<sp/>hash(j<sp/>+<sp/>j1<sp/>+<sp/>hash(k<sp/>+<sp/>k1)));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gi2<sp/>=<sp/>hash(i<sp/>+<sp/>i2<sp/>+<sp/>hash(j<sp/>+<sp/>j2<sp/>+<sp/>hash(k<sp/>+<sp/>k2)));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gi3<sp/>=<sp/>hash(i<sp/>+<sp/>1<sp/>+<sp/>hash(j<sp/>+<sp/>1<sp/>+<sp/>hash(k<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>contribution<sp/>from<sp/>the<sp/>four<sp/>corners</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0<sp/>=<sp/>0.6f<sp/>-<sp/>x0<sp/>*<sp/>x0<sp/>-<sp/>y0<sp/>*<sp/>y0<sp/>-<sp/>z0<sp/>*<sp/>z0;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n0<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>*=<sp/>t0;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n0<sp/>=<sp/>t0<sp/>*<sp/>t0<sp/>*<sp/>grad(gi0,<sp/>x0,<sp/>y0,<sp/>z0);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>0.6f<sp/>-<sp/>x1<sp/>*<sp/>x1<sp/>-<sp/>y1<sp/>*<sp/>y1<sp/>-<sp/>z1<sp/>*<sp/>z1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>*=<sp/>t1;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n1<sp/>=<sp/>t1<sp/>*<sp/>t1<sp/>*<sp/>grad(gi1,<sp/>x1,<sp/>y1,<sp/>z1);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>0.6f<sp/>-<sp/>x2<sp/>*<sp/>x2<sp/>-<sp/>y2<sp/>*<sp/>y2<sp/>-<sp/>z2<sp/>*<sp/>z2;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t2<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>*=<sp/>t2;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n2<sp/>=<sp/>t2<sp/>*<sp/>t2<sp/>*<sp/>grad(gi2,<sp/>x2,<sp/>y2,<sp/>z2);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t3<sp/>=<sp/>0.6f<sp/>-<sp/>x3<sp/>*<sp/>x3<sp/>-<sp/>y3<sp/>*<sp/>y3<sp/>-<sp/>z3<sp/>*<sp/>z3;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t3<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3<sp/>*=<sp/>t3;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n3<sp/>=<sp/>t3<sp/>*<sp/>t3<sp/>*<sp/>grad(gi3,<sp/>x3,<sp/>y3,<sp/>z3);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>contributions<sp/>from<sp/>each<sp/>corner<sp/>to<sp/>get<sp/>the<sp/>final<sp/>noise<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>is<sp/>scaled<sp/>to<sp/>stay<sp/>just<sp/>inside<sp/>[-1,1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32.0f<sp/>*<sp/>(n0<sp/>+<sp/>n1<sp/>+<sp/>n2<sp/>+<sp/>n3);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_simplex_noise_1a868146cbed0ee0137b641b5b828a4c75" kindref="member">SimplexNoise::fractal</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>octaves,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="482"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frequency<sp/>=<sp/>mFrequency;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>mAmplitude;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>octaves;<sp/>i++)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>(amplitude<sp/>*<sp/><ref refid="class_simplex_noise_1ac7bd445e9b5e2d5aecb30c5f5840528c" kindref="member">noise</ref>(x<sp/>*<sp/>frequency));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>+=<sp/>amplitude;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequency<sp/>*=<sp/>mLacunarity;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplitude<sp/>*=<sp/>mPersistence;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(output<sp/>/<sp/>denom);</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_simplex_noise_1a868146cbed0ee0137b641b5b828a4c75" kindref="member">SimplexNoise::fractal</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>octaves,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="510"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frequency<sp/>=<sp/>mFrequency;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>mAmplitude;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>octaves;<sp/>i++)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>(amplitude<sp/>*<sp/><ref refid="class_simplex_noise_1ac7bd445e9b5e2d5aecb30c5f5840528c" kindref="member">noise</ref>(x<sp/>*<sp/>frequency,<sp/>y<sp/>*<sp/>frequency));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>+=<sp/>amplitude;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequency<sp/>*=<sp/>mLacunarity;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplitude<sp/>*=<sp/>mPersistence;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(output<sp/>/<sp/>denom);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_simplex_noise_1a868146cbed0ee0137b641b5b828a4c75" kindref="member">SimplexNoise::fractal</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>octaves,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="539"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>output<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>frequency<sp/>=<sp/>mFrequency;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>amplitude<sp/>=<sp/>mAmplitude;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>octaves;<sp/>i++)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>+=<sp/>(amplitude<sp/>*<sp/><ref refid="class_simplex_noise_1ac7bd445e9b5e2d5aecb30c5f5840528c" kindref="member">noise</ref>(x<sp/>*<sp/>frequency,<sp/>y<sp/>*<sp/>frequency,<sp/>z<sp/>*<sp/>frequency));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>+=<sp/>amplitude;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frequency<sp/>*=<sp/>mLacunarity;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>amplitude<sp/>*=<sp/>mPersistence;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(output<sp/>/<sp/>denom);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="external/SimplexNoise/SimplexNoise.cpp"/>
  </compounddef>
</doxygen>
