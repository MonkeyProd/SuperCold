<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="get_8hpp" kind="file" language="C++">
    <compoundname>get.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes refid="from_8hpp" local="yes">from.hpp</includes>
    <includes refid="result_8hpp" local="yes">result.hpp</includes>
    <includes refid="value_8hpp" local="yes">value.hpp</includes>
    <includedby refid="toml_8hpp" local="yes">external/toml.hpp</includedby>
    <incdepgraph>
      <node id="29">
        <label>color.hpp</label>
        <link refid="color_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>comments.hpp</label>
        <link refid="comments_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>datetime.hpp</label>
        <link refid="datetime_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>exception.hpp</label>
        <link refid="exception_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>from.hpp</label>
        <link refid="from_8hpp"/>
      </node>
      <node id="1">
        <label>external/toml/get.hpp</label>
        <link refid="get_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>into.hpp</label>
        <link refid="into_8hpp"/>
      </node>
      <node id="26">
        <label>region.hpp</label>
        <link refid="region_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>result.hpp</label>
        <link refid="result_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>source_location.hpp</label>
        <link refid="source__location_8hpp"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>storage.hpp</label>
        <link refid="storage_8hpp"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>traits.hpp</label>
        <link refid="traits_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>value.hpp</label>
        <link refid="value_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>version.hpp</label>
        <link refid="version_8hpp"/>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="38">
        <label>array</label>
      </node>
      <node id="17">
        <label>cassert</label>
      </node>
      <node id="8">
        <label>chrono</label>
      </node>
      <node id="25">
        <label>cstdint</label>
      </node>
      <node id="36">
        <label>cstdlib</label>
      </node>
      <node id="37">
        <label>ctime</label>
      </node>
      <node id="9">
        <label>forward_list</label>
      </node>
      <node id="20">
        <label>initializer_list</label>
      </node>
      <node id="28">
        <label>iomanip</label>
      </node>
      <node id="21">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>memory</label>
      </node>
      <node id="15">
        <label>new</label>
      </node>
      <node id="30">
        <label>ostream</label>
      </node>
      <node id="16">
        <label>sstream</label>
      </node>
      <node id="14">
        <label>stdexcept</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="11">
        <label>tuple</label>
      </node>
      <node id="12">
        <label>type_traits</label>
      </node>
      <node id="34">
        <label>unordered_map</label>
      </node>
      <node id="13">
        <label>utility</label>
      </node>
      <node id="22">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>Game/Game.cpp</label>
        <link refid="_game_8cpp"/>
      </node>
      <node id="4">
        <label>Game/Game.hpp</label>
        <link refid="_game_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Player/Player.cpp</label>
        <link refid="_player_8cpp"/>
      </node>
      <node id="9">
        <label>Player/Player.hpp</label>
        <link refid="_player_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>SettingsManager/SettingsManager.cpp</label>
        <link refid="_settings_manager_8cpp"/>
      </node>
      <node id="3">
        <label>SettingsManager/SettingsManager.hpp</label>
        <link refid="_settings_manager_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>SpriteContoller/SpriteController.cpp</label>
        <link refid="_sprite_controller_8cpp"/>
      </node>
      <node id="8">
        <label>SpriteContoller/SpriteController.hpp</label>
        <link refid="_sprite_controller_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>external/toml.hpp</label>
        <link refid="toml_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>external/toml/get.hpp</label>
        <link refid="get_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacetoml">toml</innernamespace>
    <innernamespace refid="namespacetoml_1_1detail">toml::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Toru<sp/>Niina<sp/>2017.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOML11_GET_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOML11_GET_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="from_8hpp" kindref="compound">from.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8hpp" kindref="compound">result.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="value_8hpp" kindref="compound">value.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetoml" kindref="compound">toml</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exact<sp/>toml::*<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">detail::enable_if_t&lt;detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;<sp/>&amp;</highlight></codeline>
<codeline lineno="20" refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.template<sp/>cast&lt;detail::type_to_enum&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>&gt;();</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">detail::enable_if_t&lt;detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="28" refid="namespacetoml_1ad4cf0aabc6151d86a55f9961c8af8401" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.template<sp/>cast&lt;detail::type_to_enum&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>&gt;();</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">detail::enable_if_t&lt;detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="36" refid="namespacetoml_1a989e56af2b30adcdd248621a4a9b1a47" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(std::move(v).</highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>cast&lt;<ref refid="structtoml_1_1detail_1_1type__to__enum" kindref="compound">detail::type_to_enum</ref>&lt;T,<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>&gt;());</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>==<sp/>toml::value;<sp/>identity<sp/>transformation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>detail::enable_if_t&lt;std::is_same&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;&amp;</highlight></codeline>
<codeline lineno="47" refid="namespacetoml_1a786250bd7babba1948976732c51c6b81" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>detail::enable_if_t&lt;std::is_same&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="55" refid="namespacetoml_1a3e185035e8f2ab69a5d440a4aaf2969c" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>detail::enable_if_t&lt;std::is_same&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="63" refid="namespacetoml_1a2507fecad69911d76353aa93246eb522" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>(std::move(v));</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>==<sp/>toml::basic_value&lt;C2,<sp/>M2,<sp/>V2&gt;;<sp/>basic_value<sp/>-&gt;<sp/>basic_value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>detail::enable_if_t&lt;detail::conjunction&lt;detail::is_basic_value&lt;T&gt;,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;std::is_same&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="76" refid="namespacetoml_1ac293b2bf8f667bc9067b331c69ddc873" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(v);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integer<sp/>convertible<sp/>from<sp/>toml::Integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_integral&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>integral</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;std::is_same&lt;T,<sp/>bool&gt;&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>toml::integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="92" refid="namespacetoml_1a3c8a49c51cac201ed7e4f48e8cb04959" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v.<ref refid="classtoml_1_1basic__value_1aca975951282724efbfdb52658a4de470" kindref="member">as_integer</ref>());</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>floating<sp/>point<sp/>convertible<sp/>from<sp/>toml::Float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_floating_point&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>floating_point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>toml::floating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="107" refid="namespacetoml_1a9bac8bbf4a0c5bc6bf7c99435615bdf6" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v.<ref refid="classtoml_1_1basic__value_1a2e3042121a3ecaaf09bbfc7b81c3bb04" kindref="member">as_floating</ref>());</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string;<sp/>toml<sp/>uses<sp/>its<sp/>own<sp/>toml::string,<sp/>but<sp/>it<sp/>should<sp/>be<sp/>convertible<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string<sp/>seamlessly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string&gt;::value</ref>,<sp/>std::string&gt;&amp;</highlight></codeline>
<codeline lineno="119" refid="namespacetoml_1afb591e6dea05e661f52f42f9becb8ca7" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.<ref refid="classtoml_1_1basic__value_1aec4c6cab5956662a54d2ff83db6e32b6" kindref="member">as_string</ref>().<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string&gt;::value</ref>,<sp/>std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="127" refid="namespacetoml_1a4ffa4465e68d373d9cf5674f6f3796e5" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.<ref refid="classtoml_1_1basic__value_1aec4c6cab5956662a54d2ff83db6e32b6" kindref="member">as_string</ref>().<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string&gt;::value</ref>,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="135" refid="namespacetoml_1a243231571ef463242860d778ece5df22" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(std::move(v.as_string().str));</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string_view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TOML11_USING_STRING_VIEW)<sp/>&amp;&amp;<sp/>TOML11_USING_STRING_VIEW&gt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string_view&gt;::value</ref>,<sp/>std::string_view&gt;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string_view(v.as_string().str);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::chrono::duration<sp/>from<sp/>toml::local_time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::is_chrono_duration&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="159" refid="namespacetoml_1a9eba384204ba88c885ba78f190e597ca" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;T&gt;(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::nanoseconds(v.<ref refid="classtoml_1_1basic__value_1af758543d5a6dfe377ecf96c761bcb4b3" kindref="member">as_local_time</ref>()));</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::chrono::system_clock::time_point<sp/>from<sp/>toml::datetime<sp/>variants</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::is_same&lt;std::chrono::system_clock::time_point, T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="172" refid="namespacetoml_1ae3fca75622011b715337332629c981ae" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(v.<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">type</ref>())</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaaa9647613bc34fa481cf7bfd71e46511f" kindref="member">value_t::local_date</ref>:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point(v.<ref refid="classtoml_1_1basic__value_1ab1d72b0d89ceb4ccd8fc6d2805ff7dff" kindref="member">as_local_date</ref>());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaa4786c634d28e7c1aa109efdd9e11ba32" kindref="member">value_t::local_datetime</ref>:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point(v.<ref refid="classtoml_1_1basic__value_1a13d6a5211e94af0f3af5c6a5fb69ea46" kindref="member">as_local_datetime</ref>());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaa3453afefc0169f713370ff6bea1dc9a5" kindref="member">value_t::offset_datetime</ref>:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::system_clock::time_point(v.<ref refid="classtoml_1_1basic__value_1ab31b634452333d71437751b91f4238a1" kindref="member">as_offset_datetime</ref>());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1type__error" kindref="compound">type_error</ref>(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(</highlight><highlight class="stringliteral">&quot;toml::value:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bad_cast<sp/>to<sp/>std::chrono::system_clock::time_point&quot;</highlight><highlight class="normal">,<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{v.<ref refid="classtoml_1_1basic__value_1a0d39990ac7a3394568165926aed4634a" kindref="member">location</ref>(),<sp/><ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight><highlight class="stringliteral">&quot;the<sp/>actual<sp/>type<sp/>is<sp/>&quot;</highlight><highlight class="normal">,<sp/>v.<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">type</ref>())}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}),<sp/>v.<ref refid="classtoml_1_1basic__value_1a0d39990ac7a3394568165926aed4634a" kindref="member">location</ref>());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declaration<sp/>to<sp/>use<sp/>this<sp/>recursively.<sp/>ignore<sp/>this<sp/>and<sp/>go<sp/>ahead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>array-like<sp/>type<sp/>with<sp/>push_back(value)<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_container&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>a<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::has_push_back_method&lt;T&gt;,<sp/></highlight><highlight class="comment">//<sp/>T::push_back(value)<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>toml::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>array-like<sp/>type<sp/>without<sp/>push_back(value)<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_container&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>a<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_push_back_method&lt;T&gt;&gt;,<sp/></highlight><highlight class="comment">//<sp/>w/o<sp/>push_back(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_specialized_from&lt;T&gt;&gt;,<sp/></highlight><highlight class="comment">//<sp/>T<sp/>does<sp/>not<sp/>have<sp/>special<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>toml::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::pair&lt;T1,<sp/>T2&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::is_std_pair&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::tuple&lt;T1,<sp/>T2,<sp/>...&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::is_std_tuple&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>map-like<sp/>classes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_map&lt;T&gt;,<sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>toml::table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T.from_toml(v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>toml::*<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::has_from_toml_method&lt;T,<sp/>C,<sp/>M,<sp/>V&gt;,<sp/></highlight><highlight class="comment">//<sp/>but<sp/>has<sp/>from_toml(toml::value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_default_constructible&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>default<sp/>constructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>toml::from&lt;T&gt;::from_toml(v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::has_specialized_from&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T(const<sp/>toml::value&amp;)<sp/>and<sp/>T<sp/>is<sp/>not<sp/>toml::basic_value,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>it<sp/>does<sp/>not<sp/>have<sp/>`from&lt;T&gt;`<sp/>nor<sp/>`from_toml`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::is_basic_value&lt;T&gt;&gt;,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>const<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&gt;,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_from_toml_method&lt;T,<sp/>C,<sp/>M,<sp/>V&gt;&gt;,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_specialized_from&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>array-like<sp/>types;<sp/>most<sp/>likely<sp/>STL<sp/>container,<sp/>like<sp/>std::vector,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_container&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>a<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::has_push_back_method&lt;T&gt;,<sp/></highlight><highlight class="comment">//<sp/>container.push_back(elem)<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>toml::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="286" refid="namespacetoml_1af0cc01c108aec88344680eb65b44e960" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="287"><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ary<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" kindref="member">as_array</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>container;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a43b2eee284e11d113543783cd1e44026" kindref="member">try_reserve</ref>(container,<sp/>ary.size());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>ary)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container.push_back(get&lt;value_type&gt;(elem));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::forward_list<sp/>does<sp/>not<sp/>have<sp/>push_back,<sp/>insert,<sp/>or<sp/>emplace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>insert_after,<sp/>emplace_after,<sp/>push_front.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::is_std_forward_list&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="308" refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>container;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>v.<ref refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" kindref="member">as_array</ref>())</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container.push_front(get&lt;value_type&gt;(elem));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>container.reverse();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>array-like<sp/>types,<sp/>without<sp/>push_back().<sp/>most<sp/>likely<sp/>[std|boost]::array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_container&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>a<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_push_back_method&lt;T&gt;&gt;,<sp/></highlight><highlight class="comment">//<sp/>w/o<sp/>push_back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_specialized_from&lt;T&gt;&gt;,<sp/></highlight><highlight class="comment">//<sp/>T<sp/>does<sp/>not<sp/>have<sp/>special<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>not<sp/>toml::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="332" refid="namespacetoml_1aee3e3b3d3eb31f0dc6245a8327653660" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">value_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ar<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" kindref="member">as_array</ref>();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>container;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ar.size()<sp/>!=<sp/>container.size())</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;toml::get:<sp/>specified<sp/>container<sp/>size<sp/>is<sp/>&quot;</highlight><highlight class="normal">,<sp/>container.size(),</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>but<sp/>there<sp/>are<sp/>&quot;</highlight><highlight class="normal">,<sp/>ar.size(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements<sp/>in<sp/>toml<sp/>array.&quot;</highlight><highlight class="normal">),<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{v.location(),<sp/></highlight><highlight class="stringliteral">&quot;here&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i=0;<sp/>i&lt;ar.size();<sp/>++i)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>container[i]<sp/>=<sp/>::toml::get&lt;value_type&gt;(ar[i]);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container;</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::is_std_pair&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="359" refid="namespacetoml_1aa0df34dae6aa7a4a11cfb1947d8ddb5b" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">first_type<sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::first_type;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">second_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::second_type;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ar<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" kindref="member">as_array</ref>();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ar.size()<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;toml::get:<sp/>specified<sp/>std::pair<sp/>but<sp/>there<sp/>are<sp/>&quot;</highlight><highlight class="normal">,<sp/>ar.size(),</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements<sp/>in<sp/>toml<sp/>array.&quot;</highlight><highlight class="normal">),<sp/>{{v.location(),<sp/></highlight><highlight class="stringliteral">&quot;here&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(::toml::get&lt;first_type<sp/>&gt;(ar.at(0)),</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::toml::get&lt;second_type&gt;(ar.at(1)));</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Array,<sp/>std::size_t<sp/>...<sp/>I&gt;</highlight></codeline>
<codeline lineno="381" refid="namespacetoml_1_1detail_1abff645e8280dd4d9dc6bc27368527b84" refkind="member"><highlight class="normal">T<sp/><ref refid="namespacetoml_1_1detail_1abff645e8280dd4d9dc6bc27368527b84" kindref="member">get_tuple_impl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>a,<sp/><ref refid="structtoml_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;I...&gt;</ref>)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" kindref="member">::toml::get</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;I,<sp/>T&gt;::type&gt;(a.at(I))...);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::is_std_tuple&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="391" refid="namespacetoml_1a29b9f4101e99205196c82f4e730834e0" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ar<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" kindref="member">as_array</ref>();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ar.size()<sp/>!=<sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::tuple_size&lt;T&gt;::value</ref>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;toml::get:<sp/>specified<sp/>std::tuple<sp/>with<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::tuple_size&lt;T&gt;::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements,<sp/>but<sp/>there<sp/>are<sp/>&quot;</highlight><highlight class="normal">,<sp/>ar.size(),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements<sp/>in<sp/>toml<sp/>array.&quot;</highlight><highlight class="normal">),<sp/>{{v.location(),<sp/></highlight><highlight class="stringliteral">&quot;here&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_tuple_impl&lt;T&gt;(ar,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1ae291022c5ae9ba855f2e9dfb79926729" kindref="member">detail::make_index_sequence</ref>&lt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::tuple_size&lt;T&gt;::value</ref>&gt;{});</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>map-like<sp/>types;<sp/>most<sp/>likely<sp/>STL<sp/>map,<sp/>like<sp/>std::map<sp/>or<sp/>std::unordered_map.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_map&lt;T&gt;,<sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>not<sp/>toml::array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="415" refid="namespacetoml_1abcbebb2ff72de8c58b583b166d7a95b3" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">key_type<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::key_type;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">mapped_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::mapped_type;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::is_convertible&lt;std::string, key_type&gt;::value</ref>,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;toml::get<sp/>only<sp/>supports<sp/>map<sp/>type<sp/>of<sp/>which<sp/>key_type<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;convertible<sp/>from<sp/>std::string.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>map;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>())</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map.emplace(key_type(kv.first),<sp/>get&lt;mapped_type&gt;(kv.second));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>user-defined,<sp/>but<sp/>compatible<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>toml::*<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::has_from_toml_method&lt;T,<sp/>C,<sp/>M,<sp/>V&gt;,<sp/></highlight><highlight class="comment">//<sp/>but<sp/>has<sp/>from_toml(toml::value)<sp/>memfn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_default_constructible&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>default<sp/>constructible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="441" refid="namespacetoml_1abef8b9991456ebfde59a8dede286381f" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>ud;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>ud.from_toml(v);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ud;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;detail::has_specialized_from&lt;T&gt;::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="450" refid="namespacetoml_1ab8a821e13ec13374c93121d4bcb7b905" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::from&lt;T&gt;::from_toml(v);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::is_basic_value&lt;T&gt;&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>not<sp/>a<sp/>toml::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_constructible&lt;T,<sp/>const<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&gt;,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>constructible<sp/>from<sp/>toml::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_from_toml_method&lt;T,<sp/>C,<sp/>M,<sp/>V&gt;&gt;,<sp/></highlight><highlight class="comment">//<sp/>and<sp/>T<sp/>does<sp/>not<sp/>have<sp/>T.from_toml(v);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::has_specialized_from&lt;T&gt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>T<sp/>does<sp/>not<sp/>have<sp/>toml::from&lt;T&gt;{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;</highlight></codeline>
<codeline lineno="463" refid="namespacetoml_1a9d037a90a8e081bed62df5ca627d02ed" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" kindref="member">get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(v);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>overloads<sp/>do<sp/>not<sp/>require<sp/>to<sp/>set<sp/>T.<sp/>and<sp/>returns<sp/>value<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="475" refid="namespacetoml_1a3c294619df763838622f55f8d0bab275" refkind="member"><highlight class="normal"><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky)</highlight></codeline>
<codeline lineno="476"><highlight class="normal">{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1aeeb2c5b93a35ab7ab068c8479e5dd54f" kindref="member">detail::throw_key_not_found_error</ref>(v,<sp/>ky);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tab.at(ky);</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="486" refid="namespacetoml_1a57daf4370cfd8c90e4354a67c4391abc" refkind="member"><highlight class="normal"><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1aeeb2c5b93a35ab7ab068c8479e5dd54f" kindref="member">detail::throw_key_not_found_error</ref>(v,<sp/>ky);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tab.at(ky);</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="497" refid="namespacetoml_1a30a1ca648afb042d6ba0831910d85e4e" refkind="member"><highlight class="normal"><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref><sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">basic_value&lt;C, M, V&gt;::table_type</ref><sp/>tab<sp/>=<sp/>std::move(v).as_table();</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.<ref refid="classtoml_1_1basic__value_1a6854d91dd03053b3838ee111897d282a" kindref="member">count</ref>(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1aeeb2c5b93a35ab7ab068c8479e5dd54f" kindref="member">detail::throw_key_not_found_error</ref>(v,<sp/>ky);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>(std::move(tab.<ref refid="classtoml_1_1basic__value_1ad497266e16a1aa285d224dcf51fa622a" kindref="member">at</ref>(ky)));</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find(value,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="512" refid="namespacetoml_1ab1954c060b780114811ab1da388c3e2b" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>idx)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ary<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" kindref="member">as_array</ref>();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ary.size()<sp/>&lt;=<sp/>idx)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>&quot;</highlight><highlight class="normal">,<sp/>idx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">),<sp/>{{v.<ref refid="classtoml_1_1basic__value_1a0d39990ac7a3394568165926aed4634a" kindref="member">location</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>this<sp/>array&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ary.at(idx);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="524" refid="namespacetoml_1a26f69885639420ef31ef10e486f3caaf" refkind="member"><highlight class="normal"><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>idx)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ary<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" kindref="member">as_array</ref>();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ary.size()<sp/>&lt;=<sp/>idx)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>&quot;</highlight><highlight class="normal">,<sp/>idx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">),<sp/>{{v.<ref refid="classtoml_1_1basic__value_1a0d39990ac7a3394568165926aed4634a" kindref="member">location</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>this<sp/>array&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ary.at(idx);</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="536" refid="namespacetoml_1a24f09b8264fee895e6a5feca2c8a4477" refkind="member"><highlight class="normal"><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref><sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>idx)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ary<sp/>=<sp/>v.as_array();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ary.size()<sp/>&lt;=<sp/>idx)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>&quot;</highlight><highlight class="normal">,<sp/>idx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">),<sp/>{{v.location(),<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>this<sp/>array&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>(std::move(ary.at(idx)));</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find&lt;T&gt;(value,<sp/>key);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&gt;()))</highlight></codeline>
<codeline lineno="553" refid="namespacetoml_1a31abd17e078e497fb224d79260910b8d" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1aeeb2c5b93a35ab7ab068c8479e5dd54f" kindref="member">detail::throw_key_not_found_error</ref>(v,<sp/>ky);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::get&lt;T&gt;(tab.at(ky));</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&gt;()))</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky)</highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.as_table();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1aeeb2c5b93a35ab7ab068c8479e5dd54f" kindref="member">detail::throw_key_not_found_error</ref>(v,<sp/>ky);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::get&lt;T&gt;(tab.at(ky));</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&amp;&gt;()))</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;::table_type<sp/>tab<sp/>=<sp/>std::move(v).as_table();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1aeeb2c5b93a35ab7ab068c8479e5dd54f" kindref="member">detail::throw_key_not_found_error</ref>(v,<sp/>ky);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::get&lt;T&gt;(std::move(tab.at(ky)));</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find&lt;T&gt;(value,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;&gt;()))</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>idx)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ary<sp/>=<sp/>v.as_array();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ary.size()<sp/>&lt;=<sp/>idx)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>&quot;</highlight><highlight class="normal">,<sp/>idx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">),<sp/>{{v.location(),<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>this<sp/>array&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::get&lt;T&gt;(ary.at(idx));</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&gt;()))</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>idx)</highlight></codeline>
<codeline lineno="608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ary<sp/>=<sp/>v.as_array();</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ary.size()<sp/>&lt;=<sp/>idx)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>&quot;</highlight><highlight class="normal">,<sp/>idx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">),<sp/>{{v.location(),<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>this<sp/>array&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::get&lt;T&gt;(ary.at(idx));</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&amp;&gt;()))</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>idx)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;::array_type<sp/>ary<sp/>=<sp/>std::move(v).as_array();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ary.size()<sp/>&lt;=<sp/>idx)</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(<ref refid="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" kindref="member">detail::format_underline</ref>(<ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>&quot;</highlight><highlight class="normal">,<sp/>idx,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">),<sp/>{{v.location(),<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>this<sp/>array&quot;</highlight><highlight class="normal">}}));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::get&lt;T&gt;(std::move(ary.at(idx)));</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>toml::find(toml::value,<sp/>toml::key,<sp/>Ts&amp;&amp;<sp/>...<sp/>keys)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>suppresses<sp/>warnings<sp/>by<sp/>-Wsign-conversion.<sp/>Let&apos;s<sp/>say<sp/>we<sp/>have<sp/>the<sp/>following</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>```cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>auto<sp/>x<sp/>=<sp/>toml::find&lt;std::string&gt;(data,<sp/>&quot;array&quot;,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>```</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here,<sp/>the<sp/>type<sp/>of<sp/>literal<sp/>number<sp/>`0`<sp/>is<sp/>`int`.<sp/>`int`<sp/>is<sp/>a<sp/>signed<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`toml::find`<sp/>takes<sp/>`std::size_t`<sp/>as<sp/>an<sp/>index.<sp/>So<sp/>it<sp/>causes<sp/>implicit<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conversion<sp/>and<sp/>`-Wsign-conversion`<sp/>warns<sp/>about<sp/>it.<sp/>Using<sp/>`0u`<sp/>instead<sp/>of<sp/>`0`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suppresses<sp/>the<sp/>warning,<sp/>but<sp/>it<sp/>makes<sp/>user<sp/>code<sp/>messy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>To<sp/>suppress<sp/>this<sp/>warning,<sp/>we<sp/>need<sp/>to<sp/>be<sp/>aware<sp/>of<sp/>type<sp/>conversion<sp/>caused</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>`toml::find(v,<sp/>key1,<sp/>key2,<sp/>...<sp/>keys)`.<sp/>But<sp/>the<sp/>thing<sp/>is<sp/>that<sp/>the<sp/>types<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>keys<sp/>can<sp/>be<sp/>any<sp/>combination<sp/>of<sp/>{string-like,<sp/>size_t-like}.<sp/>Of<sp/>course<sp/>we<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>write<sp/>down<sp/>all<sp/>the<sp/>combinations.<sp/>Thus<sp/>we<sp/>need<sp/>to<sp/>use<sp/>some<sp/>function<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recognize<sp/>the<sp/>type<sp/>of<sp/>argument<sp/>and<sp/>cast<sp/>it<sp/>into<sp/>`std::string`<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`std::size_t`<sp/>depending<sp/>on<sp/>the<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>`key_cast`<sp/>does<sp/>the<sp/>job.<sp/>It<sp/>has<sp/>2<sp/>overloads.<sp/>One<sp/>is<sp/>invoked<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>is<sp/>an<sp/>integer<sp/>and<sp/>cast<sp/>the<sp/>argument<sp/>into<sp/>`std::size_t`.<sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>is<sp/>invoked<sp/>when<sp/>the<sp/>argument<sp/>type<sp/>is<sp/>not<sp/>an<sp/>integer,<sp/>possibly<sp/>one<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string,<sp/>const<sp/>char[N]<sp/>or<sp/>const<sp/>char*,<sp/>and<sp/>construct<sp/>std::string<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>`toml::find(v,<sp/>k1,<sp/>k2,<sp/>...<sp/>ks)`<sp/>uses<sp/>`key_cast`<sp/>before<sp/>passing<sp/>`ks`<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>`toml::find(v,<sp/>k)`<sp/>to<sp/>suppress<sp/>-Wsign-conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">enable_if_t&lt;conjunction&lt;std::is_integral&lt;remove_cvref_t&lt;T&gt;&gt;,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>negation&lt;std::is_same&lt;remove_cvref_t&lt;T&gt;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>std::size_t&gt;</highlight></codeline>
<codeline lineno="662" refid="namespacetoml_1_1detail_1a2a5edd1d651144d5a8f504363b5b46ed" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">key_cast</ref>(T&amp;&amp;<sp/>v)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::size_t(v);</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="667"><highlight class="normal">enable_if_t&lt;negation&lt;conjunction&lt;std::is_integral&lt;remove_cvref_t&lt;T&gt;&gt;,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>negation&lt;std::is_same&lt;remove_cvref_t&lt;T&gt;,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;&gt;&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="669" refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">key_cast</ref>(T&amp;&amp;<sp/>v)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(std::forward&lt;T&gt;(v));</highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Keys&gt;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;</highlight></codeline>
<codeline lineno="679" refid="namespacetoml_1af3c0c34f5507c422247af7d089d41bbd" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/>Key1&amp;&amp;<sp/>k1,<sp/>Key2&amp;&amp;<sp/>k2,<sp/>Keys&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="680"><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">return ::toml::find</ref>(<ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">::toml::find</ref>(v,<sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k1)),</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k2),<sp/>std::forward&lt;Keys&gt;(keys)...);</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Keys&gt;</highlight></codeline>
<codeline lineno="687"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;</highlight></codeline>
<codeline lineno="688" refid="namespacetoml_1af20a927273ab3d6c4b270f0ea9067e1c" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/>Key1&amp;&amp;<sp/>k1,<sp/>Key2&amp;&amp;<sp/>k2,<sp/>Keys&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">return ::toml::find</ref>(<ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">::toml::find</ref>(v,<sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k1)),</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k2),<sp/>std::forward&lt;Keys&gt;(keys)...);</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Keys&gt;</highlight></codeline>
<codeline lineno="696"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;</highlight></codeline>
<codeline lineno="697" refid="namespacetoml_1acf855f0adf051797079a57130604f628" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/>Key1&amp;&amp;<sp/>k1,<sp/>Key2&amp;&amp;<sp/>k2,<sp/>Keys&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">return ::toml::find</ref>(<ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">::toml::find</ref>(std::move(v),<sp/>std::forward&lt;Key1&gt;(k1)),</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k2),<sp/>std::forward&lt;Keys&gt;(keys)...);</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Keys&gt;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&gt;()))</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;<sp/>v,<sp/>Key1&amp;&amp;<sp/>k1,<sp/>Key2&amp;&amp;<sp/>k2,<sp/>Keys&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::find&lt;T&gt;(<ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">::toml::find</ref>(v,<sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k1)),</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k2),<sp/>std::forward&lt;Keys&gt;(keys)...);</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Keys&gt;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&gt;()))</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;<sp/>v,<sp/>Key1&amp;&amp;<sp/>k1,<sp/>Key2&amp;&amp;<sp/>k2,<sp/>Keys&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::find&lt;T&gt;(<ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">::toml::find</ref>(v,<sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k1)),</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k2),<sp/>std::forward&lt;Keys&gt;(keys)...);</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Key2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Keys&gt;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(::toml::get&lt;T&gt;(std::declval&lt;basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&amp;&gt;()))</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">find</ref>(basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;&amp;<sp/>v,<sp/>Key1&amp;&amp;<sp/>k1,<sp/>Key2&amp;&amp;<sp/>k2,<sp/>Keys&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::toml::find&lt;T&gt;(<ref refid="namespacetoml_1acf855f0adf051797079a57130604f628" kindref="member">::toml::find</ref>(std::move(v),<sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k1)),</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" kindref="member">detail::key_cast</ref>(k2),<sp/>std::forward&lt;Keys&gt;(keys)...);</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get_or(value,<sp/>fallback)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="737" refid="namespacetoml_1aee831fac191301c5d2821d231881fb5c" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="743"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;</highlight></codeline>
<codeline lineno="744" refid="namespacetoml_1a1d885346ca0b949a7cf0b1db758df3b2" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="750"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;</highlight></codeline>
<codeline lineno="751" refid="namespacetoml_1ad2f02e282c74dbe85633195bcbeb12fd" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;)</highlight></codeline>
<codeline lineno="752"><highlight class="normal">{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialization<sp/>for<sp/>the<sp/>exact<sp/>toml<sp/>types<sp/>(return<sp/>type<sp/>becomes<sp/>lvalue<sp/>ref)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="763" refid="namespacetoml_1afacd7cc578e3096def891b08b528ba4f" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;detail::remove_cvref_t&lt;T&gt;&gt;(v);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;&amp;</highlight></codeline>
<codeline lineno="778" refid="namespacetoml_1ae36ea4e5ddfb2c21fbae483c9fbea6c2" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;detail::remove_cvref_t&lt;T&gt;&gt;(v);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="791"><highlight class="normal">detail::enable_if_t&lt;detail::is_exact_toml_type&lt;detail::remove_cvref_t&lt;T&gt;,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>detail::remove_cvref_t&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="793" refid="namespacetoml_1a50d35e799ef030f68fa55752e1529b65" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;detail::remove_cvref_t&lt;T&gt;&gt;(std::move(v));</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t&lt;T&gt;</ref>(std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal">}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialization<sp/>for<sp/>std::string<sp/>(return<sp/>type<sp/>becomes<sp/>lvalue<sp/>ref)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="810"><highlight class="normal">detail::enable_if_t&lt;std::is_same&lt;detail::remove_cvref_t&lt;T&gt;,<sp/>std::string&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="812" refid="namespacetoml_1a9fb4cd871c358e0e89054107a67c3a9d" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.<ref refid="classtoml_1_1basic__value_1aec4c6cab5956662a54d2ff83db6e32b6" kindref="member">as_string</ref>().<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string&gt;::value</ref>,<sp/>std::string&gt;&amp;</highlight></codeline>
<codeline lineno="826" refid="namespacetoml_1aac8e620fd3e66be36a2824c9b52dcc0e" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="827"><highlight class="normal">{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.<ref refid="classtoml_1_1basic__value_1aec4c6cab5956662a54d2ff83db6e32b6" kindref="member">as_string</ref>().<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;detail::remove_cvref_t&lt;T&gt;,<sp/>std::string&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="841" refid="namespacetoml_1ad9698c78ddd0589b54b897d8608cd21e" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v.as_string().str);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specialization<sp/>for<sp/>string<sp/>literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::is_string_literal&lt;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;T&gt;::type&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="860" refid="namespacetoml_1a7869ca35179f064c2195076544b3b96a" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(v.<ref refid="classtoml_1_1basic__value_1aec4c6cab5956662a54d2ff83db6e32b6" kindref="member">as_string</ref>().<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>others<sp/>(require<sp/>type<sp/>conversion<sp/>and<sp/>return<sp/>type<sp/>cannot<sp/>be<sp/>lvalue<sp/>reference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::is_exact_toml_type&lt;detail::remove_cvref_t&lt;T&gt;,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;std::is_same&lt;std::string,<sp/>detail::remove_cvref_t&lt;T&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::is_string_literal&lt;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;T&gt;::type&gt;&gt;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>detail::remove_cvref_t&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="884" refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="885"><highlight class="normal">{</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;detail::remove_cvref_t&lt;T&gt;&gt;(v);</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t&lt;T&gt;</ref>(std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>===========================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find_or(value,<sp/>key,<sp/>fallback)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="901"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="902" refid="namespacetoml_1a34fb7cea6c5ed3988dd2d3944bfd6b2a" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky,</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="904"><highlight class="normal">{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tab.<ref refid="classtoml_1_1basic__value_1ad497266e16a1aa285d224dcf51fa622a" kindref="member">at</ref>(ky);</highlight></codeline>
<codeline lineno="909"><highlight class="normal">}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="913"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;&amp;</highlight></codeline>
<codeline lineno="914" refid="namespacetoml_1a9f06b255c9a103b100d9cf14d3131257" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tab.<ref refid="classtoml_1_1basic__value_1ad497266e16a1aa285d224dcf51fa622a" kindref="member">at</ref>(ky);</highlight></codeline>
<codeline lineno="920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="924"><highlight class="normal">basic_value&lt;C,<sp/>M,<sp/>V&gt;</highlight></codeline>
<codeline lineno="925" refid="namespacetoml_1a4c93db3c4b16b3f2b42c2cd82b882083" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="926"><highlight class="normal">{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.is_table())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tab<sp/>=<sp/>std::move(v).as_table();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>(std::move(tab.at(ky)));</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>exact<sp/>types<sp/>(return<sp/>type<sp/>can<sp/>be<sp/>a<sp/>reference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="939" refid="namespacetoml_1ae34c8f79d2e88bcb39be9e90cf055357" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="940"><highlight class="normal">{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(tab.at(ky),<sp/>opt);</highlight></codeline>
<codeline lineno="945"><highlight class="normal">}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>T&gt;&amp;</highlight></codeline>
<codeline lineno="951" refid="namespacetoml_1ac5860e02c6a476e5c04a4b36ecd1b1f8" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="952"><highlight class="normal">{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(tab.at(ky),<sp/>opt);</highlight></codeline>
<codeline lineno="957"><highlight class="normal">}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_exact_toml_type&lt;T,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::remove_cvref_t&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="964" refid="namespacetoml_1aacd5809ef81c57540e113e43c0c2579b" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="965"><highlight class="normal">{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.is_table())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(opt);}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tab<sp/>=<sp/>std::move(v).as_table();</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(opt);}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(std::move(tab.at(ky)),<sp/>std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string<sp/>(return<sp/>type<sp/>can<sp/>be<sp/>a<sp/>reference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string&gt;::value</ref>,<sp/>std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="978" refid="namespacetoml_1abbb32281594436244c5651bec4530c8f" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>&amp;<sp/>ky,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="979"><highlight class="normal">{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(tab.at(ky),<sp/>opt);</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string&gt;::value</ref>,<sp/>std::string&gt;&amp;</highlight></codeline>
<codeline lineno="988" refid="namespacetoml_1a5e892647ff31ca9ef13960e1e231dd5f" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>T&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="989"><highlight class="normal">{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(tab.at(ky),<sp/>opt);</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">detail::enable_if_t&lt;std::is_same&lt;T, std::string&gt;::value</ref>,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="998" refid="namespacetoml_1a38b0517d3598ba4c326f3ce08c5d11c0" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(<ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="999"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.is_table())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(opt);}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tab<sp/>=<sp/>std::move(v).as_table();</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(opt);}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(std::move(tab.at(ky)),<sp/>std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string<sp/>literal<sp/>(deduced<sp/>as<sp/>std::string)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::is_string_literal&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string&gt;</highlight></codeline>
<codeline lineno="1013" refid="namespacetoml_1a9ff07b39606121da2f748ab9dd4f12d4" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(opt);}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(opt);}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(tab.at(ky),<sp/>std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>others<sp/>(require<sp/>type<sp/>conversion<sp/>and<sp/>return<sp/>type<sp/>cannot<sp/>be<sp/>lvalue<sp/>reference)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;detail::conjunction&lt;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>not<sp/>an<sp/>exact<sp/>toml<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::is_exact_toml_type&lt;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::remove_cvref_t&lt;T&gt;,<sp/>basic_value&lt;C,<sp/>M,<sp/>V&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>not<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;std::is_same&lt;std::string,<sp/>detail::remove_cvref_t&lt;T&gt;&gt;&gt;,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>not<sp/>a<sp/>string<sp/>literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::negation&lt;detail::is_string_literal&lt;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;T&gt;::type&gt;&gt;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>detail::remove_cvref_t&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="1035" refid="namespacetoml_1a98bb90cdc1f8d715b958e772c4f18700" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>T&amp;&amp;<sp/>opt)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.<ref refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" kindref="member">is_table</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(opt);}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tab<sp/>=<sp/>v.<ref refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" kindref="member">as_table</ref>();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(opt);}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a386281b6a2b481fde83769796beccd16" kindref="member">get_or</ref>(tab.at(ky),<sp/>std::forward&lt;T&gt;(opt));</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recursive<sp/>find-or<sp/>with<sp/>type<sp/>deduction<sp/>(find_or(value,<sp/>keys,<sp/>opt))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ks,</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ks)<sp/>&gt;<sp/>1),<sp/>std::nullptr_t&gt;<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>need<sp/>to<sp/>add<sp/>SFINAE<sp/>in<sp/>the<sp/>template<sp/>parameter<sp/>to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>infinite<sp/>recursion<sp/>in<sp/>type<sp/>deduction<sp/>on<sp/>gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050" refid="namespacetoml_1acf4a80d2e36cd2bfe2b78ead81c34c82" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(Value&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>Ks&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(std::forward&lt;Value&gt;(v),<sp/>ky,<sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">detail::last_one</ref>(std::forward&lt;Ks&gt;(keys)...)))</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.is_table())</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">detail::last_one</ref>(std::forward&lt;Ks&gt;(keys)...);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>tab<sp/>=<sp/>std::forward&lt;Value&gt;(v).as_table();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">detail::last_one</ref>(std::forward&lt;Ks&gt;(keys)...);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(std::forward&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(tab)&gt;(tab).at(ky),<sp/>std::forward&lt;Ks&gt;(keys)...);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recursive<sp/>find_or<sp/>with<sp/>explicit<sp/>type<sp/>specialization,<sp/>find_or&lt;int&gt;(value,<sp/>keys...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ks,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ks)<sp/>&gt;<sp/>1),<sp/>std::nullptr_t&gt;<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>we<sp/>need<sp/>to<sp/>add<sp/>SFINAE<sp/>in<sp/>the<sp/>template<sp/>parameter<sp/>to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>infinite<sp/>recursion<sp/>in<sp/>type<sp/>deduction<sp/>on<sp/>gcc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072" refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(Value&amp;&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>ky,<sp/>Ks&amp;&amp;<sp/>...<sp/>keys)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(find_or&lt;T&gt;(std::forward&lt;Value&gt;(v),<sp/>ky,<sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">detail::last_one</ref>(std::forward&lt;Ks&gt;(keys)...)))</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!v.is_table())</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">detail::last_one</ref>(std::forward&lt;Ks&gt;(keys)...);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>tab<sp/>=<sp/>std::forward&lt;Value&gt;(v).as_table();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tab.count(ky)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">detail::last_one</ref>(std::forward&lt;Ks&gt;(keys)...);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" kindref="member">find_or</ref>(std::forward&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(tab)&gt;(tab).at(ky),<sp/>std::forward&lt;Ks&gt;(keys)...);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="1092" refid="namespacetoml_1a303d95485a58e3396a677b8e852b6481" refkind="member"><highlight class="normal"><ref refid="structtoml_1_1result" kindref="compound">result&lt;T, std::string&gt;</ref><sp/><ref refid="namespacetoml_1a09489518c2b4f07d78dbee504f905e38" kindref="member">expect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(get&lt;T&gt;(v));</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(e.what());</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">result&lt;T,<sp/>std::string&gt;</highlight></codeline>
<codeline lineno="1106" refid="namespacetoml_1a09489518c2b4f07d78dbee504f905e38" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a09489518c2b4f07d78dbee504f905e38" kindref="member">expect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value&lt;C, M, V&gt;</ref>&amp;<sp/>v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref>&amp;<sp/>k)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(find&lt;T&gt;(v,<sp/>k));</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>e)</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(e.what());</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>toml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//<sp/>TOML11_GET</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="external/toml/get.hpp"/>
  </compounddef>
</doxygen>
