<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="utility_8hpp" kind="file" language="C++">
    <compoundname>utility.hpp</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <includes local="no">utility</includes>
    <includes refid="traits_8hpp" local="yes">traits.hpp</includes>
    <includes refid="version_8hpp" local="yes">version.hpp</includes>
    <includedby refid="combinator_8hpp" local="yes">external/toml/combinator.hpp</includedby>
    <includedby refid="storage_8hpp" local="yes">external/toml/storage.hpp</includedby>
    <includedby refid="value_8hpp" local="yes">external/toml/value.hpp</includedby>
    <incdepgraph>
      <node id="6">
        <label>from.hpp</label>
        <link refid="from_8hpp"/>
      </node>
      <node id="7">
        <label>into.hpp</label>
        <link refid="into_8hpp"/>
      </node>
      <node id="5">
        <label>traits.hpp</label>
        <link refid="traits_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>external/toml/utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>version.hpp</label>
        <link refid="version_8hpp"/>
      </node>
      <node id="9">
        <label>chrono</label>
      </node>
      <node id="10">
        <label>forward_list</label>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
      <node id="3">
        <label>sstream</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="12">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>Game/Game.cpp</label>
        <link refid="_game_8cpp"/>
      </node>
      <node id="7">
        <label>Game/Game.hpp</label>
        <link refid="_game_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Player/Player.cpp</label>
        <link refid="_player_8cpp"/>
      </node>
      <node id="12">
        <label>Player/Player.hpp</label>
        <link refid="_player_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SettingsManager/SettingsManager.cpp</label>
        <link refid="_settings_manager_8cpp"/>
      </node>
      <node id="6">
        <label>SettingsManager/SettingsManager.hpp</label>
        <link refid="_settings_manager_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>SpriteContoller/SpriteController.cpp</label>
        <link refid="_sprite_controller_8cpp"/>
      </node>
      <node id="11">
        <label>SpriteContoller/SpriteController.hpp</label>
        <link refid="_sprite_controller_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>external/toml.hpp</label>
        <link refid="toml_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>external/toml/combinator.hpp</label>
        <link refid="combinator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>external/toml/get.hpp</label>
        <link refid="get_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>external/toml/lexer.hpp</label>
        <link refid="lexer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>external/toml/literal.hpp</label>
        <link refid="literal_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>external/toml/parser.hpp</label>
        <link refid="parser_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>external/toml/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>external/toml/storage.hpp</label>
        <link refid="storage_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>external/toml/utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>external/toml/value.hpp</label>
        <link refid="value_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtoml_1_1detail_1_1last__one__in__pack" prot="public">toml::detail::last_one_in_pack</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1last__one__in__pack_3_01_t_01_4" prot="public">toml::detail::last_one_in_pack&lt; T &gt;</innerclass>
    <innernamespace refid="namespacetoml">toml</innernamespace>
    <innernamespace refid="namespacetoml_1_1detail">toml::detail</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="utility_8hpp_1a28c00536f5754c5b80444b4465845f2f" prot="public" static="no">
        <name>TOML11_MARK_AS_DEPRECATED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="19" column="12" bodyfile="external/toml/utility.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Toru<sp/>Niina<sp/>2017.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOML11_UTILITY_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOML11_UTILITY_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="traits_8hpp" kindref="compound">traits.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="version_8hpp" kindref="compound">version.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>TOML11_MARK_AS_DEPRECATED(msg)<sp/>[[deprecated(msg)]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>TOML11_MARK_AS_DEPRECATED(msg)<sp/>__attribute__((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>TOML11_MARK_AS_DEPRECATED(msg)<sp/>__declspec(deprecated(msg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="utility_8hpp_1a28c00536f5754c5b80444b4465845f2f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>TOML11_MARK_AS_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetoml" kindref="compound">toml</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1ab85090fe18497486c537b90fbe0215b2" kindref="member">std::make_unique</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="32" refid="namespacetoml_1ab85090fe18497486c537b90fbe0215b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;<sp/><ref refid="namespacetoml_1ab85090fe18497486c537b90fbe0215b2" kindref="member">make_unique</ref>(Ts&amp;&amp;<sp/>...<sp/>args)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(std::forward&lt;Ts&gt;(args)...));</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>2014</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="42" refid="namespacetoml_1_1detail_1a5d61bd97884ec716d0ef899fdbfb58df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a5d61bd97884ec716d0ef899fdbfb58df" kindref="member">try_reserve_impl</ref>(Container&amp;<sp/>container,<sp/>std::size_t<sp/>N,<sp/>std::true_type)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>container.reserve(N);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="48" refid="namespacetoml_1_1detail_1a0ac875aa0263cdf9143cffca6bcfdf94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a5d61bd97884ec716d0ef899fdbfb58df" kindref="member">try_reserve_impl</ref>(Container&amp;,<sp/>std::size_t,<sp/>std::false_type)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="55" refid="namespacetoml_1a43b2eee284e11d113543783cd1e44026" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a43b2eee284e11d113543783cd1e44026" kindref="member">try_reserve</ref>(Container&amp;<sp/>container,<sp/>std::size_t<sp/>N)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(N<sp/>&lt;=<sp/>container.size())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a5d61bd97884ec716d0ef899fdbfb58df" kindref="member">detail::try_reserve_impl</ref>(container,<sp/>N,<sp/><ref refid="structtoml_1_1detail_1_1has__reserve__method" kindref="compound">detail::has_reserve_method&lt;Container&gt;</ref>{});</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64" refid="namespacetoml_1_1detail_1ac1897d7064049a64fe8cba37fa11650f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacetoml_1_1detail_1ac1897d7064049a64fe8cba37fa11650f" kindref="member">concat_to_string_impl</ref>(std::ostringstream&amp;<sp/>oss)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="69" refid="namespacetoml_1_1detail_1a0d8d8d8589fcb2ecb697682ebc7b409b" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespacetoml_1_1detail_1ac1897d7064049a64fe8cba37fa11650f" kindref="member">concat_to_string_impl</ref>(std::ostringstream&amp;<sp/>oss,<sp/>T&amp;&amp;<sp/>head,<sp/>Ts&amp;&amp;<sp/>...<sp/>tail)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>std::forward&lt;T&gt;(head);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1ac1897d7064049a64fe8cba37fa11650f" kindref="member">concat_to_string_impl</ref>(oss,<sp/>std::forward&lt;Ts&gt;(tail)<sp/>...<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="77" refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" kindref="member">concat_to_string</ref>(Ts&amp;&amp;<sp/>...<sp/>args)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>std::boolalpha<sp/>&lt;&lt;<sp/>std::fixed;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1ac1897d7064049a64fe8cba37fa11650f" kindref="member">detail::concat_to_string_impl</ref>(oss,<sp/>std::forward&lt;Ts&gt;(args)<sp/>...);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85" refid="namespacetoml_1a144e8677775017ad83a192909e812a7e" refkind="member"><highlight class="normal">T<sp/><ref refid="namespacetoml_1a144e8677775017ad83a192909e812a7e" kindref="member">from_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/>T<sp/>opt)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>v(opt);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>iss(str);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>iss<sp/>&gt;&gt;<sp/>v;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">last_one</ref>(T&amp;&amp;<sp/>tail)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(tail);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">last_one</ref>(T&amp;&amp;<sp/></highlight><highlight class="comment">/*head*/</highlight><highlight class="normal">,<sp/>Ts&amp;&amp;<sp/>...<sp/>tail)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">last_one</ref>(std::forward&lt;Ts&gt;(tail)...);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>```cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>1<sp/>|<sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>...<sp/>Ts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2<sp/>|<sp/>auto<sp/>last_one(T&amp;&amp;<sp/>/*head*/,<sp/>Ts&amp;&amp;<sp/>...<sp/>tail)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>3<sp/>|<sp/><sp/>-&gt;<sp/>decltype(last_one(std::forward&lt;Ts&gt;(tail)...))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>4<sp/>|<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>5<sp/>|<sp/><sp/><sp/><sp/><sp/>return<sp/>last_one(std::forward&lt;Ts&gt;(tail)...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>6<sp/>|<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>```</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>work<sp/>because<sp/>the<sp/>function<sp/>`last_one(...)`<sp/>is<sp/>not<sp/>yet<sp/>defined<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>line<sp/>#3,<sp/>so<sp/>`decltype()`<sp/>cannot<sp/>deduce<sp/>the<sp/>type<sp/>returned<sp/>from<sp/>`last_one`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>need<sp/>to<sp/>determine<sp/>return<sp/>type<sp/>in<sp/>a<sp/>different<sp/>way,<sp/>like<sp/>a<sp/>meta<sp/>func.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="122" refid="structtoml_1_1detail_1_1last__one__in__pack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1last__one__in__pack" kindref="compound">last_one_in_pack</ref></highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124" refid="structtoml_1_1detail_1_1last__one__in__pack_1ac2bcda5a619e4f192519a63660f5cbdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1last__one__in__pack_1ac2bcda5a619e4f192519a63660f5cbdc" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1last__one__in__pack" kindref="compound">last_one_in_pack</ref>&lt;Ts...&gt;<ref refid="structtoml_1_1detail_1_1last__one__in__pack_1ac2bcda5a619e4f192519a63660f5cbdc" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="127" refid="structtoml_1_1detail_1_1last__one__in__pack_3_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1last__one__in__pack" kindref="compound">last_one_in_pack</ref>&lt;T&gt;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129" refid="structtoml_1_1detail_1_1last__one__in__pack_3_01_t_01_4_1a0906c20176e206d199fc7f82f7fda682" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1last__one__in__pack_3_01_t_01_4_1a0906c20176e206d199fc7f82f7fda682" kindref="member">type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="132" refid="namespacetoml_1_1detail_1ad27577d7780fe6c12bcfbd24aac4505e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1ad27577d7780fe6c12bcfbd24aac4505e" kindref="member">last_one_in_pack_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1last__one__in__pack" kindref="compound">last_one_in_pack</ref>&lt;Ts...&gt;::type;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="135" refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" refkind="member"><highlight class="normal">T&amp;&amp;<sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">last_one</ref>(T&amp;&amp;<sp/>tail)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;T&gt;(tail);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">enable_if_t</ref>&lt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Ts)<sp/>&gt;<sp/>0),<sp/><ref refid="namespacetoml_1_1detail_1ad27577d7780fe6c12bcfbd24aac4505e" kindref="member">last_one_in_pack_t</ref>&lt;Ts&amp;&amp;<sp/>...&gt;&gt;</highlight></codeline>
<codeline lineno="141" refid="namespacetoml_1_1detail_1ad1be9dc4ceeafd0a75d86489e7288a8a" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">last_one</ref>(T&amp;&amp;<sp/></highlight><highlight class="comment">/*head*/</highlight><highlight class="normal">,<sp/>Ts&amp;&amp;<sp/>...<sp/>tail)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" kindref="member">last_one</ref>(std::forward&lt;Ts&gt;(tail)...);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>toml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TOML11_UTILITY</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="external/toml/utility.hpp"/>
  </compounddef>
</doxygen>
