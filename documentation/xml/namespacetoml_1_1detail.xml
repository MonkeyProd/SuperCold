<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespacetoml_1_1detail" kind="namespace" language="C++">
    <compoundname>toml::detail</compoundname>
    <innerclass refid="structtoml_1_1detail_1_1at__least" prot="public">toml::detail::at_least</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1character" prot="public">toml::detail::character</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1conjunction" prot="public">toml::detail::conjunction</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1conjunction_3_01_t_01_4" prot="public">toml::detail::conjunction&lt; T &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1conjunction_3_01_t_00_01_ts_8_8_8_01_4" prot="public">toml::detail::conjunction&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1disjunction" prot="public">toml::detail::disjunction</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1disjunction_3_01_t_01_4" prot="public">toml::detail::disjunction&lt; T &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1disjunction_3_01_t_00_01_ts_8_8_8_01_4" prot="public">toml::detail::disjunction&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1either" prot="public">toml::detail::either</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1either_3_01_head_01_4" prot="public">toml::detail::either&lt; Head &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1either_3_01_head_00_01_tail_8_8_8_01_4" prot="public">toml::detail::either&lt; Head, Tail... &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1empty__iterator" prot="public">toml::detail::empty_iterator</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type" prot="public">toml::detail::enum_to_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1array_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::array, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1boolean_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::boolean, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1empty_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::empty, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1floating_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::floating, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1integer_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::integer, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1local__date_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::local_date, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1local__datetime_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::local_datetime, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1local__time_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::local_time, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1offset__datetime_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::offset_datetime, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1string_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::string, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1enum__to__type_3_01value__t_1_1table_00_01_value_01_4" prot="public">toml::detail::enum_to_type&lt; value_t::table, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1exactly" prot="public">toml::detail::exactly</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1exclude" prot="public">toml::detail::exclude</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__from__toml__method" prot="public">toml::detail::has_from_toml_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__from__toml__method__impl" prot="public">toml::detail::has_from_toml_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__into__toml__method" prot="public">toml::detail::has_into_toml_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__into__toml__method__impl" prot="public">toml::detail::has_into_toml_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__iterator" prot="public">toml::detail::has_iterator</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__iterator__impl" prot="public">toml::detail::has_iterator_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__key__type" prot="public">toml::detail::has_key_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__key__type__impl" prot="public">toml::detail::has_key_type_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__mapped__type" prot="public">toml::detail::has_mapped_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__mapped__type__impl" prot="public">toml::detail::has_mapped_type_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__push__back__method" prot="public">toml::detail::has_push_back_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__push__back__method__impl" prot="public">toml::detail::has_push_back_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__reserve__method" prot="public">toml::detail::has_reserve_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__reserve__method__impl" prot="public">toml::detail::has_reserve_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__from" prot="public">toml::detail::has_specialized_from</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__from__impl" prot="public">toml::detail::has_specialized_from_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__into" prot="public">toml::detail::has_specialized_into</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__into__impl" prot="public">toml::detail::has_specialized_into_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__value__type" prot="public">toml::detail::has_value_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__value__type__impl" prot="public">toml::detail::has_value_type_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1in__range" prot="public">toml::detail::in_range</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1index__sequence" prot="public">toml::detail::index_sequence</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1index__sequence__maker" prot="public">toml::detail::index_sequence_maker</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1index__sequence__maker_3_010_01_4" prot="public">toml::detail::index_sequence_maker&lt; 0 &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value" prot="public">toml::detail::is_basic_value</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01const_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T const &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01const_01volatile_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T const volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01volatile_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_1_1toml_1_1basic__value_3_01_c_00_01_m_00_01_v_01_4_01_4" prot="public">toml::detail::is_basic_value&lt;::toml::basic_value&lt; C, M, V &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__chrono__duration" prot="public">toml::detail::is_chrono_duration</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__chrono__duration_3_01std_1_1chrono_1_1duration_3_01_rep_00_01_period_01_4_01_4" prot="public">toml::detail::is_chrono_duration&lt; std::chrono::duration&lt; Rep, Period &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__comparable" prot="public">toml::detail::is_comparable</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__comparable__impl" prot="public">toml::detail::is_comparable_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container" prot="public">toml::detail::is_container</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01_6_01_4" prot="public">toml::detail::is_container&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01const_01_6_01_4" prot="public">toml::detail::is_container&lt; T const &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01const_01volatile_01_6_01_4" prot="public">toml::detail::is_container&lt; T const volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01volatile_01_6_01_4" prot="public">toml::detail::is_container&lt; T volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__exact__toml__type" prot="public">toml::detail::is_exact_toml_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__exact__toml__type_3_01_t_01_6_00_01_v_01_4" prot="public">toml::detail::is_exact_toml_type&lt; T &amp;, V &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__exact__toml__type_3_01_t_01const_01_6_00_01_v_01_4" prot="public">toml::detail::is_exact_toml_type&lt; T const &amp;, V &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__exact__toml__type_3_01_t_01const_01volatile_01_6_00_01_v_01_4" prot="public">toml::detail::is_exact_toml_type&lt; T const volatile &amp;, V &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__exact__toml__type_3_01_t_01volatile_01_6_00_01_v_01_4" prot="public">toml::detail::is_exact_toml_type&lt; T volatile &amp;, V &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map" prot="public">toml::detail::is_map</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01_6_01_4" prot="public">toml::detail::is_map&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01const_01_6_01_4" prot="public">toml::detail::is_map&lt; T const &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01const_01volatile_01_6_01_4" prot="public">toml::detail::is_map&lt; T const volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01volatile_01_6_01_4" prot="public">toml::detail::is_map&lt; T volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__forward__list" prot="public">toml::detail::is_std_forward_list</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__forward__list_3_01std_1_1forward__list_3_01_t_01_4_01_4" prot="public">toml::detail::is_std_forward_list&lt; std::forward_list&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__pair" prot="public">toml::detail::is_std_pair</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__pair_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">toml::detail::is_std_pair&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__tuple" prot="public">toml::detail::is_std_tuple</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__tuple_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">toml::detail::is_std_tuple&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__string__literal" prot="public">toml::detail::is_string_literal</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1last__one__in__pack" prot="public">toml::detail::last_one_in_pack</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1last__one__in__pack_3_01_t_01_4" prot="public">toml::detail::last_one_in_pack&lt; T &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1location" prot="public">toml::detail::location</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1maybe" prot="public">toml::detail::maybe</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1negation" prot="public">toml::detail::negation</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1none__t" prot="public">toml::detail::none_t</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1push__back__index__sequence" prot="public">toml::detail::push_back_index_sequence</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1push__back__index__sequence_3_01index__sequence_3_01_ns_8_8_8_01_4_00_01_n_01_4" prot="public">toml::detail::push_back_index_sequence&lt; index_sequence&lt; Ns... &gt;, N &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1region" prot="public">toml::detail::region</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1region__base" prot="public">toml::detail::region_base</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1remove__cvref" prot="public">toml::detail::remove_cvref</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1repeat" prot="public">toml::detail::repeat</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1repeat_3_01_t_00_01at__least_3_01_n_01_4_01_4" prot="public">toml::detail::repeat&lt; T, at_least&lt; N &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1repeat_3_01_t_00_01exactly_3_01_n_01_4_01_4" prot="public">toml::detail::repeat&lt; T, exactly&lt; N &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1repeat_3_01_t_00_01unlimited_01_4" prot="public">toml::detail::repeat&lt; T, unlimited &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1sequence" prot="public">toml::detail::sequence</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1sequence_3_01_head_01_4" prot="public">toml::detail::sequence&lt; Head &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1sequence_3_01_head_00_01_tail_8_8_8_01_4" prot="public">toml::detail::sequence&lt; Head, Tail... &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1storage" prot="public">toml::detail::storage</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1switch__cast" prot="public">toml::detail::switch_cast</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum" prot="public">toml::detail::type_to_enum</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01boolean_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; boolean, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01floating_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; floating, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01integer_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; integer, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01local__date_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; local_date, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01local__datetime_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; local_datetime, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01local__time_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; local_time, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01offset__datetime_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; offset_datetime, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1type__to__enum_3_01string_00_01_value_01_4" prot="public">toml::detail::type_to_enum&lt; string, Value &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1unlimited" prot="public">toml::detail::unlimited</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ac7bf17f8d4dc3c5659ffc3b1d658c85d" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos; &apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;\t&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_wschar = typedef either&lt;character&lt;&apos; &apos;&gt;, character&lt;&apos;\t&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_wschar</name>
        <qualifiedname>toml::detail::lex_wschar</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="21" column="1" bodyfile="external/toml/lexer.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1ac7bf17f8d4dc3c5659ffc3b1d658c85d" kindref="member">lex_wschar</ref>, <ref refid="structtoml_1_1detail_1_1at__least" kindref="compound">at_least</ref>&lt; 1 &gt; &gt;</type>
        <definition>using toml::detail::lex_ws = typedef repeat&lt;lex_wschar, at_least&lt;1&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ws</name>
        <qualifiedname>toml::detail::lex_ws</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="22" column="1" bodyfile="external/toml/lexer.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aa3980f427dea6e7f32dbb27ebb0f6938" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;\n&apos;&gt;, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;\r&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;\n&apos;&gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_newline = typedef either&lt;character&lt;&apos;\n&apos;&gt;, sequence&lt;character&lt;&apos;\r&apos;&gt;, character&lt;&apos;\n&apos;&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_newline</name>
        <qualifiedname>toml::detail::lex_newline</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="23" column="1" bodyfile="external/toml/lexer.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a05023831e0f603bb1989173cc47eebfb" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;a&apos;, &apos;z&apos;&gt;</type>
        <definition>using toml::detail::lex_lower = typedef in_range&lt;&apos;a&apos;, &apos;z&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_lower</name>
        <qualifiedname>toml::detail::lex_lower</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="25" column="1" bodyfile="external/toml/lexer.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1af9d7fe29a21faae157bbc0abcda53d71" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;A&apos;, &apos;Z&apos;&gt;</type>
        <definition>using toml::detail::lex_upper = typedef in_range&lt;&apos;A&apos;, &apos;Z&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_upper</name>
        <qualifiedname>toml::detail::lex_upper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="26" column="1" bodyfile="external/toml/lexer.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae3b5c20d0cbf39902d96aed0f277ad29" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a05023831e0f603bb1989173cc47eebfb" kindref="member">lex_lower</ref>, <ref refid="namespacetoml_1_1detail_1af9d7fe29a21faae157bbc0abcda53d71" kindref="member">lex_upper</ref> &gt;</type>
        <definition>using toml::detail::lex_alpha = typedef either&lt;lex_lower, lex_upper&gt;</definition>
        <argsstring></argsstring>
        <name>lex_alpha</name>
        <qualifiedname>toml::detail::lex_alpha</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="27" column="1" bodyfile="external/toml/lexer.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;0&apos;, &apos;9&apos;&gt;</type>
        <definition>using toml::detail::lex_digit = typedef in_range&lt;&apos;0&apos;, &apos;9&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_digit</name>
        <qualifiedname>toml::detail::lex_digit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="28" column="1" bodyfile="external/toml/lexer.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ad001fcd65e7b382be5e6663c3e67a5f5" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;1&apos;, &apos;9&apos;&gt;</type>
        <definition>using toml::detail::lex_nonzero = typedef in_range&lt;&apos;1&apos;, &apos;9&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_nonzero</name>
        <qualifiedname>toml::detail::lex_nonzero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="29" column="1" bodyfile="external/toml/lexer.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1af15582df216f73c6dd408250079d3dd2" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;0&apos;, &apos;7&apos;&gt;</type>
        <definition>using toml::detail::lex_oct_dig = typedef in_range&lt;&apos;0&apos;, &apos;7&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_oct_dig</name>
        <qualifiedname>toml::detail::lex_oct_dig</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="30" column="1" bodyfile="external/toml/lexer.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a0635206174bdcd7655b68381085eb069" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;0&apos;, &apos;1&apos;&gt;</type>
        <definition>using toml::detail::lex_bin_dig = typedef in_range&lt;&apos;0&apos;, &apos;1&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_bin_dig</name>
        <qualifiedname>toml::detail::lex_bin_dig</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="31" column="1" bodyfile="external/toml/lexer.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a025148279b3ac493b7d4580c46234c6b" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;A&apos;, &apos;F&apos;&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; &apos;a&apos;, &apos;f&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_hex_dig = typedef either&lt;lex_digit, in_range&lt;&apos;A&apos;, &apos;F&apos;&gt;, in_range&lt;&apos;a&apos;, &apos;f&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_hex_dig</name>
        <qualifiedname>toml::detail::lex_hex_dig</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="32" column="1" bodyfile="external/toml/lexer.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1afd5521d961afa561b2afb6e548a039fa" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;0&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;x&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_hex_prefix = typedef sequence&lt;character&lt;&apos;0&apos;&gt;, character&lt;&apos;x&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_hex_prefix</name>
        <qualifiedname>toml::detail::lex_hex_prefix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="34" column="1" bodyfile="external/toml/lexer.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a499f9a36f3343d3f17e5a7153e3bf59e" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;0&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;o&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_oct_prefix = typedef sequence&lt;character&lt;&apos;0&apos;&gt;, character&lt;&apos;o&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_oct_prefix</name>
        <qualifiedname>toml::detail::lex_oct_prefix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="35" column="1" bodyfile="external/toml/lexer.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a3f18b89dab3284a619f05d13f85a2768" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;0&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;b&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_bin_prefix = typedef sequence&lt;character&lt;&apos;0&apos;&gt;, character&lt;&apos;b&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_bin_prefix</name>
        <qualifiedname>toml::detail::lex_bin_prefix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="36" column="1" bodyfile="external/toml/lexer.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae6ea8729a358b4358013a26f2c5ad7f6" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;_&apos;&gt;</type>
        <definition>using toml::detail::lex_underscore = typedef character&lt;&apos;_&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_underscore</name>
        <qualifiedname>toml::detail::lex_underscore</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="37" column="1" bodyfile="external/toml/lexer.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a71761487f89b65f7d6b8651c2502c862" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;+&apos;&gt;</type>
        <definition>using toml::detail::lex_plus = typedef character&lt;&apos;+&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_plus</name>
        <qualifiedname>toml::detail::lex_plus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="38" column="1" bodyfile="external/toml/lexer.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a4d77ce0fb97c15898c8147f6e00e09c1" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;-&apos;&gt;</type>
        <definition>using toml::detail::lex_minus = typedef character&lt;&apos;-&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_minus</name>
        <qualifiedname>toml::detail::lex_minus</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="39" column="1" bodyfile="external/toml/lexer.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aa460f848608f0e2e574793cddc0573bf" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a71761487f89b65f7d6b8651c2502c862" kindref="member">lex_plus</ref>, <ref refid="namespacetoml_1_1detail_1a4d77ce0fb97c15898c8147f6e00e09c1" kindref="member">lex_minus</ref> &gt;</type>
        <definition>using toml::detail::lex_sign = typedef either&lt;lex_plus, lex_minus&gt;</definition>
        <argsstring></argsstring>
        <name>lex_sign</name>
        <qualifiedname>toml::detail::lex_sign</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="40" column="1" bodyfile="external/toml/lexer.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a428ef9ab81fcee23dcaee8d26b60519b" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ad001fcd65e7b382be5e6663c3e67a5f5" kindref="member">lex_nonzero</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae6ea8729a358b4358013a26f2c5ad7f6" kindref="member">lex_underscore</ref>, <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1at__least" kindref="compound">at_least</ref>&lt; 1 &gt; &gt; &gt;, <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref> &gt;</type>
        <definition>using toml::detail::lex_unsigned_dec_int = typedef either&lt;sequence&lt;lex_nonzero, repeat&lt; either&lt;lex_digit, sequence&lt;lex_underscore, lex_digit&gt; &gt;, at_least&lt;1&gt; &gt;&gt;, lex_digit&gt;</definition>
        <argsstring></argsstring>
        <name>lex_unsigned_dec_int</name>
        <qualifiedname>toml::detail::lex_unsigned_dec_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="43" column="1" bodyfile="external/toml/lexer.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aae64ab0b317cac4c0d292cb7f3bbb148" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa460f848608f0e2e574793cddc0573bf" kindref="member">lex_sign</ref> &gt;, <ref refid="namespacetoml_1_1detail_1a428ef9ab81fcee23dcaee8d26b60519b" kindref="member">lex_unsigned_dec_int</ref> &gt;</type>
        <definition>using toml::detail::lex_dec_int = typedef sequence&lt;maybe&lt;lex_sign&gt;, lex_unsigned_dec_int&gt;</definition>
        <argsstring></argsstring>
        <name>lex_dec_int</name>
        <qualifiedname>toml::detail::lex_dec_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="47" column="1" bodyfile="external/toml/lexer.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a984b36f711b1f2ce0efb7727780711b2" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1afd5521d961afa561b2afb6e548a039fa" kindref="member">lex_hex_prefix</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a025148279b3ac493b7d4580c46234c6b" kindref="member">lex_hex_dig</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a025148279b3ac493b7d4580c46234c6b" kindref="member">lex_hex_dig</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae6ea8729a358b4358013a26f2c5ad7f6" kindref="member">lex_underscore</ref>, <ref refid="namespacetoml_1_1detail_1a025148279b3ac493b7d4580c46234c6b" kindref="member">lex_hex_dig</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_hex_int = typedef sequence&lt;lex_hex_prefix, sequence&lt;lex_hex_dig, repeat&lt; either&lt;lex_hex_dig, sequence&lt;lex_underscore, lex_hex_dig&gt; &gt;, unlimited&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_hex_int</name>
        <qualifiedname>toml::detail::lex_hex_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="50" column="1" bodyfile="external/toml/lexer.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a2dbbc06428b2f620dff747c8ad025296" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a499f9a36f3343d3f17e5a7153e3bf59e" kindref="member">lex_oct_prefix</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1af15582df216f73c6dd408250079d3dd2" kindref="member">lex_oct_dig</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1af15582df216f73c6dd408250079d3dd2" kindref="member">lex_oct_dig</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae6ea8729a358b4358013a26f2c5ad7f6" kindref="member">lex_underscore</ref>, <ref refid="namespacetoml_1_1detail_1af15582df216f73c6dd408250079d3dd2" kindref="member">lex_oct_dig</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_oct_int = typedef sequence&lt;lex_oct_prefix, sequence&lt;lex_oct_dig, repeat&lt; either&lt;lex_oct_dig, sequence&lt;lex_underscore, lex_oct_dig&gt; &gt;, unlimited&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_oct_int</name>
        <qualifiedname>toml::detail::lex_oct_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="53" column="1" bodyfile="external/toml/lexer.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1af013ea8ff098f4f4673379e03cc6b3c8" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a3f18b89dab3284a619f05d13f85a2768" kindref="member">lex_bin_prefix</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a0635206174bdcd7655b68381085eb069" kindref="member">lex_bin_dig</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a0635206174bdcd7655b68381085eb069" kindref="member">lex_bin_dig</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae6ea8729a358b4358013a26f2c5ad7f6" kindref="member">lex_underscore</ref>, <ref refid="namespacetoml_1_1detail_1a0635206174bdcd7655b68381085eb069" kindref="member">lex_bin_dig</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_bin_int = typedef sequence&lt;lex_bin_prefix, sequence&lt;lex_bin_dig, repeat&lt; either&lt;lex_bin_dig, sequence&lt;lex_underscore, lex_bin_dig&gt; &gt;, unlimited&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_bin_int</name>
        <qualifiedname>toml::detail::lex_bin_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="56" column="1" bodyfile="external/toml/lexer.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a6561b4b85190a1372db3b5ebf8d907ca" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1af013ea8ff098f4f4673379e03cc6b3c8" kindref="member">lex_bin_int</ref>, <ref refid="namespacetoml_1_1detail_1a2dbbc06428b2f620dff747c8ad025296" kindref="member">lex_oct_int</ref>, <ref refid="namespacetoml_1_1detail_1a984b36f711b1f2ce0efb7727780711b2" kindref="member">lex_hex_int</ref>, <ref refid="namespacetoml_1_1detail_1aae64ab0b317cac4c0d292cb7f3bbb148" kindref="member">lex_dec_int</ref> &gt;</type>
        <definition>using toml::detail::lex_integer = typedef either&lt;lex_bin_int, lex_oct_int, lex_hex_int, lex_dec_int&gt;</definition>
        <argsstring></argsstring>
        <name>lex_integer</name>
        <qualifiedname>toml::detail::lex_integer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="60" column="1" bodyfile="external/toml/lexer.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a8e0525edc60ce7d086afba1156c253a5" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;i&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;n&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;f&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_inf = typedef sequence&lt;character&lt;&apos;i&apos;&gt;, character&lt;&apos;n&apos;&gt;, character&lt;&apos;f&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_inf</name>
        <qualifiedname>toml::detail::lex_inf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="64" column="1" bodyfile="external/toml/lexer.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a71a34c099e0e9f0ab093d0ea1b12f40b" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;n&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;a&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;n&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_nan = typedef sequence&lt;character&lt;&apos;n&apos;&gt;, character&lt;&apos;a&apos;&gt;, character&lt;&apos;n&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_nan</name>
        <qualifiedname>toml::detail::lex_nan</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="65" column="1" bodyfile="external/toml/lexer.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a36dd3c356538a06bf772dff1f68f4395" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa460f848608f0e2e574793cddc0573bf" kindref="member">lex_sign</ref> &gt;, <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a8e0525edc60ce7d086afba1156c253a5" kindref="member">lex_inf</ref>, <ref refid="namespacetoml_1_1detail_1a71a34c099e0e9f0ab093d0ea1b12f40b" kindref="member">lex_nan</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_special_float = typedef sequence&lt;maybe&lt;lex_sign&gt;, either&lt;lex_inf, lex_nan&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_special_float</name>
        <qualifiedname>toml::detail::lex_special_float</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="66" column="1" bodyfile="external/toml/lexer.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aa25d4ba275ae1f40af543f5022a92e03" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae6ea8729a358b4358013a26f2c5ad7f6" kindref="member">lex_underscore</ref>, <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_zero_prefixable_int = typedef sequence&lt;lex_digit, repeat&lt;either&lt;lex_digit, sequence&lt;lex_underscore, lex_digit&gt; &gt;, unlimited&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_zero_prefixable_int</name>
        <qualifiedname>toml::detail::lex_zero_prefixable_int</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="68" column="1" bodyfile="external/toml/lexer.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a85db68fd0ff4f3e8ef5e2f724c69b2ae" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;.&apos;&gt;, <ref refid="namespacetoml_1_1detail_1aa25d4ba275ae1f40af543f5022a92e03" kindref="member">lex_zero_prefixable_int</ref> &gt;</type>
        <definition>using toml::detail::lex_fractional_part = typedef sequence&lt;character&lt;&apos;.&apos;&gt;, lex_zero_prefixable_int&gt;</definition>
        <argsstring></argsstring>
        <name>lex_fractional_part</name>
        <qualifiedname>toml::detail::lex_fractional_part</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="71" column="1" bodyfile="external/toml/lexer.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a31a412a6d30f145052736c2146caa537" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;e&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;E&apos;&gt; &gt;, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa460f848608f0e2e574793cddc0573bf" kindref="member">lex_sign</ref> &gt;, <ref refid="namespacetoml_1_1detail_1aa25d4ba275ae1f40af543f5022a92e03" kindref="member">lex_zero_prefixable_int</ref> &gt;</type>
        <definition>using toml::detail::lex_exponent_part = typedef sequence&lt;either&lt;character&lt;&apos;e&apos;&gt;, character&lt;&apos;E&apos;&gt; &gt;, maybe&lt;lex_sign&gt;, lex_zero_prefixable_int&gt;</definition>
        <argsstring></argsstring>
        <name>lex_exponent_part</name>
        <qualifiedname>toml::detail::lex_exponent_part</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="73" column="1" bodyfile="external/toml/lexer.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a8daef6997b8b736e5ab84cc87a098faa" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a36dd3c356538a06bf772dff1f68f4395" kindref="member">lex_special_float</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1aae64ab0b317cac4c0d292cb7f3bbb148" kindref="member">lex_dec_int</ref>, <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a31a412a6d30f145052736c2146caa537" kindref="member">lex_exponent_part</ref>, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a85db68fd0ff4f3e8ef5e2f724c69b2ae" kindref="member">lex_fractional_part</ref>, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1a31a412a6d30f145052736c2146caa537" kindref="member">lex_exponent_part</ref> &gt; &gt; &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_float = typedef either&lt;lex_special_float, sequence&lt;lex_dec_int, either&lt;lex_exponent_part, sequence&lt;lex_fractional_part, maybe&lt;lex_exponent_part&gt; &gt;&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_float</name>
        <qualifiedname>toml::detail::lex_float</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="76" column="1" bodyfile="external/toml/lexer.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a919c004ab6fcf386a48dc1d9f8c14810" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;t&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;r&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;u&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;e&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_true = typedef sequence&lt;character&lt;&apos;t&apos;&gt;, character&lt;&apos;r&apos;&gt;, character&lt;&apos;u&apos;&gt;, character&lt;&apos;e&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_true</name>
        <qualifiedname>toml::detail::lex_true</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="82" column="1" bodyfile="external/toml/lexer.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a0ecb9049d53f96fdcb8a4197cee1f1cd" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;f&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;a&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;l&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;s&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;e&apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_false = typedef sequence&lt;character&lt;&apos;f&apos;&gt;, character&lt;&apos;a&apos;&gt;, character&lt;&apos;l&apos;&gt;, character&lt;&apos;s&apos;&gt;, character&lt;&apos;e&apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_false</name>
        <qualifiedname>toml::detail::lex_false</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="84" column="1" bodyfile="external/toml/lexer.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a7671328f8aa5111c17690007785740a8" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a919c004ab6fcf386a48dc1d9f8c14810" kindref="member">lex_true</ref>, <ref refid="namespacetoml_1_1detail_1a0ecb9049d53f96fdcb8a4197cee1f1cd" kindref="member">lex_false</ref> &gt;</type>
        <definition>using toml::detail::lex_boolean = typedef either&lt;lex_true, lex_false&gt;</definition>
        <argsstring></argsstring>
        <name>lex_boolean</name>
        <qualifiedname>toml::detail::lex_boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="86" column="1" bodyfile="external/toml/lexer.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae9ba25a0cf44d45f938633d9f98497f7" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 4 &gt; &gt;</type>
        <definition>using toml::detail::lex_date_fullyear = typedef repeat&lt;lex_digit, exactly&lt;4&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_date_fullyear</name>
        <qualifiedname>toml::detail::lex_date_fullyear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="90" column="1" bodyfile="external/toml/lexer.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a927136439b70b42ecd3ba8a0ab3f7974" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 2 &gt; &gt;</type>
        <definition>using toml::detail::lex_date_month = typedef repeat&lt;lex_digit, exactly&lt;2&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_date_month</name>
        <qualifiedname>toml::detail::lex_date_month</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="91" column="1" bodyfile="external/toml/lexer.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ab2c0719100fa8a864ddb2c96498f9d70" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 2 &gt; &gt;</type>
        <definition>using toml::detail::lex_date_mday = typedef repeat&lt;lex_digit, exactly&lt;2&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_date_mday</name>
        <qualifiedname>toml::detail::lex_date_mday</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="92" column="1" bodyfile="external/toml/lexer.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1afee91a1bbf934a673353a6c0b8f7399b" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;T&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;t&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos; &apos;&gt; &gt;</type>
        <definition>using toml::detail::lex_time_delim = typedef either&lt;character&lt;&apos;T&apos;&gt;, character&lt;&apos;t&apos;&gt;, character&lt;&apos; &apos;&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_time_delim</name>
        <qualifiedname>toml::detail::lex_time_delim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="93" column="1" bodyfile="external/toml/lexer.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1acb4f25d375836faf1f80d8d3e0e38048" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 2 &gt; &gt;</type>
        <definition>using toml::detail::lex_time_hour = typedef repeat&lt;lex_digit, exactly&lt;2&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_time_hour</name>
        <qualifiedname>toml::detail::lex_time_hour</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="94" column="1" bodyfile="external/toml/lexer.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a2a1352d8b03359d2fb4a3ee4d8ec2257" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 2 &gt; &gt;</type>
        <definition>using toml::detail::lex_time_minute = typedef repeat&lt;lex_digit, exactly&lt;2&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_time_minute</name>
        <qualifiedname>toml::detail::lex_time_minute</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="95" column="1" bodyfile="external/toml/lexer.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ad8e7380ce04876377c1bfbaea7a3e6f2" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 2 &gt; &gt;</type>
        <definition>using toml::detail::lex_time_second = typedef repeat&lt;lex_digit, exactly&lt;2&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_time_second</name>
        <qualifiedname>toml::detail::lex_time_second</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="96" column="1" bodyfile="external/toml/lexer.hpp" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a1a93d2909adf93573ffd035aa3f10049" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;.&apos;&gt;, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1at__least" kindref="compound">at_least</ref>&lt; 1 &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_time_secfrac = typedef sequence&lt;character&lt;&apos;.&apos;&gt;, repeat&lt;lex_digit, at_least&lt;1&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_time_secfrac</name>
        <qualifiedname>toml::detail::lex_time_secfrac</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="97" column="1" bodyfile="external/toml/lexer.hpp" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a1181e3129c03e74c99f3c472717feeb6" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;+&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;-&apos;&gt; &gt;, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1acb4f25d375836faf1f80d8d3e0e38048" kindref="member">lex_time_hour</ref>, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;:&apos;&gt;, <ref refid="namespacetoml_1_1detail_1a2a1352d8b03359d2fb4a3ee4d8ec2257" kindref="member">lex_time_minute</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_time_numoffset = typedef sequence&lt;either&lt;character&lt;&apos;+&apos;&gt;, character&lt;&apos;-&apos;&gt; &gt;, sequence&lt;lex_time_hour, character&lt;&apos;:&apos;&gt;, lex_time_minute&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_time_numoffset</name>
        <qualifiedname>toml::detail::lex_time_numoffset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="100" column="1" bodyfile="external/toml/lexer.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae504e6a2cc016902020170f268a49684" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;Z&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;z&apos;&gt;, <ref refid="namespacetoml_1_1detail_1a1181e3129c03e74c99f3c472717feeb6" kindref="member">lex_time_numoffset</ref> &gt;</type>
        <definition>using toml::detail::lex_time_offset = typedef either&lt;character&lt;&apos;Z&apos;&gt;, character&lt;&apos;z&apos;&gt;, lex_time_numoffset&gt;</definition>
        <argsstring></argsstring>
        <name>lex_time_offset</name>
        <qualifiedname>toml::detail::lex_time_offset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="103" column="1" bodyfile="external/toml/lexer.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aecd31d8cb2a83b8531651eb372e7fb9e" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1acb4f25d375836faf1f80d8d3e0e38048" kindref="member">lex_time_hour</ref>, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;:&apos;&gt;, <ref refid="namespacetoml_1_1detail_1a2a1352d8b03359d2fb4a3ee4d8ec2257" kindref="member">lex_time_minute</ref>, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;:&apos;&gt;, <ref refid="namespacetoml_1_1detail_1ad8e7380ce04876377c1bfbaea7a3e6f2" kindref="member">lex_time_second</ref>, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1a1a93d2909adf93573ffd035aa3f10049" kindref="member">lex_time_secfrac</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_partial_time = typedef sequence&lt;lex_time_hour, character&lt;&apos;:&apos;&gt;, lex_time_minute, character&lt;&apos;:&apos;&gt;, lex_time_second, maybe&lt;lex_time_secfrac&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_partial_time</name>
        <qualifiedname>toml::detail::lex_partial_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="106" column="1" bodyfile="external/toml/lexer.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1acdbe275e956596491a7484a80412d304" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae9ba25a0cf44d45f938633d9f98497f7" kindref="member">lex_date_fullyear</ref>, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;-&apos;&gt;, <ref refid="namespacetoml_1_1detail_1a927136439b70b42ecd3ba8a0ab3f7974" kindref="member">lex_date_month</ref>, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;-&apos;&gt;, <ref refid="namespacetoml_1_1detail_1ab2c0719100fa8a864ddb2c96498f9d70" kindref="member">lex_date_mday</ref> &gt;</type>
        <definition>using toml::detail::lex_full_date = typedef sequence&lt;lex_date_fullyear, character&lt;&apos;-&apos;&gt;, lex_date_month, character&lt;&apos;-&apos;&gt;, lex_date_mday&gt;</definition>
        <argsstring></argsstring>
        <name>lex_full_date</name>
        <qualifiedname>toml::detail::lex_full_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="109" column="1" bodyfile="external/toml/lexer.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a9202d92a5fb9cca4c3104822a77aca5a" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1aecd31d8cb2a83b8531651eb372e7fb9e" kindref="member">lex_partial_time</ref>, <ref refid="namespacetoml_1_1detail_1ae504e6a2cc016902020170f268a49684" kindref="member">lex_time_offset</ref> &gt;</type>
        <definition>using toml::detail::lex_full_time = typedef sequence&lt;lex_partial_time, lex_time_offset&gt;</definition>
        <argsstring></argsstring>
        <name>lex_full_time</name>
        <qualifiedname>toml::detail::lex_full_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="112" column="1" bodyfile="external/toml/lexer.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a62943f99ac9f409472e9c96a66caf974" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1acdbe275e956596491a7484a80412d304" kindref="member">lex_full_date</ref>, <ref refid="namespacetoml_1_1detail_1afee91a1bbf934a673353a6c0b8f7399b" kindref="member">lex_time_delim</ref>, <ref refid="namespacetoml_1_1detail_1a9202d92a5fb9cca4c3104822a77aca5a" kindref="member">lex_full_time</ref> &gt;</type>
        <definition>using toml::detail::lex_offset_date_time = typedef sequence&lt;lex_full_date, lex_time_delim, lex_full_time&gt;</definition>
        <argsstring></argsstring>
        <name>lex_offset_date_time</name>
        <qualifiedname>toml::detail::lex_offset_date_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="114" column="1" bodyfile="external/toml/lexer.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a297d9b07170f58b25a5117ac392ad6c6" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1acdbe275e956596491a7484a80412d304" kindref="member">lex_full_date</ref>, <ref refid="namespacetoml_1_1detail_1afee91a1bbf934a673353a6c0b8f7399b" kindref="member">lex_time_delim</ref>, <ref refid="namespacetoml_1_1detail_1aecd31d8cb2a83b8531651eb372e7fb9e" kindref="member">lex_partial_time</ref> &gt;</type>
        <definition>using toml::detail::lex_local_date_time = typedef sequence&lt;lex_full_date, lex_time_delim, lex_partial_time&gt;</definition>
        <argsstring></argsstring>
        <name>lex_local_date_time</name>
        <qualifiedname>toml::detail::lex_local_date_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="115" column="1" bodyfile="external/toml/lexer.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ad11561967410e3c654ad739a2f587a7d" prot="public" static="no">
        <type><ref refid="namespacetoml_1_1detail_1acdbe275e956596491a7484a80412d304" kindref="member">lex_full_date</ref></type>
        <definition>using toml::detail::lex_local_date = typedef lex_full_date</definition>
        <argsstring></argsstring>
        <name>lex_local_date</name>
        <qualifiedname>toml::detail::lex_local_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="116" column="1" bodyfile="external/toml/lexer.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1af6ea0012fec43b41013072d3d53549cd" prot="public" static="no">
        <type><ref refid="namespacetoml_1_1detail_1aecd31d8cb2a83b8531651eb372e7fb9e" kindref="member">lex_partial_time</ref></type>
        <definition>using toml::detail::lex_local_time = typedef lex_partial_time</definition>
        <argsstring></argsstring>
        <name>lex_local_time</name>
        <qualifiedname>toml::detail::lex_local_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="117" column="1" bodyfile="external/toml/lexer.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a3155594677bd8c4e38274fe77355010c" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;&quot;&apos;&gt;</type>
        <definition>using toml::detail::lex_quotation_mark = typedef character&lt;&apos;&quot;&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_quotation_mark</name>
        <qualifiedname>toml::detail::lex_quotation_mark</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="121" column="1" bodyfile="external/toml/lexer.hpp" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aec1294963c6ef5431b4cfc6c86d002c5" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1exclude" kindref="compound">exclude</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x00, 0x08 &gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x0A, 0x1F &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x22 &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x5C &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x7F &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_basic_unescaped = typedef exclude&lt;either&lt;in_range&lt;0x00, 0x08&gt;, in_range&lt;0x0A, 0x1F&gt;, character&lt;0x22&gt;, character&lt;0x5C&gt;, character&lt;0x7F&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_basic_unescaped</name>
        <qualifiedname>toml::detail::lex_basic_unescaped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="122" column="1" bodyfile="external/toml/lexer.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a2eb5cf3923397dc92772022fef312184" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;\\&apos;&gt;</type>
        <definition>using toml::detail::lex_escape = typedef character&lt;&apos;\\&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_escape</name>
        <qualifiedname>toml::detail::lex_escape</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="127" column="1" bodyfile="external/toml/lexer.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ac358f0ec9f2cca0f88f3474fe90eb24e" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;u&apos;&gt;, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a025148279b3ac493b7d4580c46234c6b" kindref="member">lex_hex_dig</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 4 &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_escape_unicode_short = typedef sequence&lt;character&lt;&apos;u&apos;&gt;, repeat&lt;lex_hex_dig, exactly&lt;4&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_escape_unicode_short</name>
        <qualifiedname>toml::detail::lex_escape_unicode_short</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="128" column="1" bodyfile="external/toml/lexer.hpp" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a8ab53c0a704f3bbb59ba1e2a32df69d5" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;U&apos;&gt;, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a025148279b3ac493b7d4580c46234c6b" kindref="member">lex_hex_dig</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 8 &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_escape_unicode_long = typedef sequence&lt;character&lt;&apos;U&apos;&gt;, repeat&lt;lex_hex_dig, exactly&lt;8&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_escape_unicode_long</name>
        <qualifiedname>toml::detail::lex_escape_unicode_long</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="130" column="1" bodyfile="external/toml/lexer.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a81932b240b8a893c27d09e8edad50793" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;&quot;&apos;&gt;, character&lt;&apos;\\&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;b&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;f&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;n&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;r&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;t&apos;&gt;, <ref refid="namespacetoml_1_1detail_1ac358f0ec9f2cca0f88f3474fe90eb24e" kindref="member">lex_escape_unicode_short</ref>, <ref refid="namespacetoml_1_1detail_1a8ab53c0a704f3bbb59ba1e2a32df69d5" kindref="member">lex_escape_unicode_long</ref> &gt;</type>
        <definition>using toml::detail::lex_escape_seq_char = typedef either&lt;character&lt;&apos;&quot;&apos;&gt;, character&lt;&apos;\\&apos;&gt;, character&lt;&apos;b&apos;&gt;, character&lt;&apos;f&apos;&gt;, character&lt;&apos;n&apos;&gt;, character&lt;&apos;r&apos;&gt;, character&lt;&apos;t&apos;&gt;, lex_escape_unicode_short, lex_escape_unicode_long &gt;</definition>
        <argsstring></argsstring>
        <name>lex_escape_seq_char</name>
        <qualifiedname>toml::detail::lex_escape_seq_char</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="132" column="1" bodyfile="external/toml/lexer.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a29d9dc51d2881df91b5b6acd76b6162a" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2eb5cf3923397dc92772022fef312184" kindref="member">lex_escape</ref>, <ref refid="namespacetoml_1_1detail_1a81932b240b8a893c27d09e8edad50793" kindref="member">lex_escape_seq_char</ref> &gt;</type>
        <definition>using toml::detail::lex_escaped = typedef sequence&lt;lex_escape, lex_escape_seq_char&gt;</definition>
        <argsstring></argsstring>
        <name>lex_escaped</name>
        <qualifiedname>toml::detail::lex_escaped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="139" column="1" bodyfile="external/toml/lexer.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aebadf1c44accc5bcbc937d7deb8926b2" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1aec1294963c6ef5431b4cfc6c86d002c5" kindref="member">lex_basic_unescaped</ref>, <ref refid="namespacetoml_1_1detail_1a29d9dc51d2881df91b5b6acd76b6162a" kindref="member">lex_escaped</ref> &gt;</type>
        <definition>using toml::detail::lex_basic_char = typedef either&lt;lex_basic_unescaped, lex_escaped&gt;</definition>
        <argsstring></argsstring>
        <name>lex_basic_char</name>
        <qualifiedname>toml::detail::lex_basic_char</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="140" column="1" bodyfile="external/toml/lexer.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae49b0e275794a4261393ae7690ad97c0" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a3155594677bd8c4e38274fe77355010c" kindref="member">lex_quotation_mark</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1aebadf1c44accc5bcbc937d7deb8926b2" kindref="member">lex_basic_char</ref>, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt;, <ref refid="namespacetoml_1_1detail_1a3155594677bd8c4e38274fe77355010c" kindref="member">lex_quotation_mark</ref> &gt;</type>
        <definition>using toml::detail::lex_basic_string = typedef sequence&lt;lex_quotation_mark, repeat&lt;lex_basic_char, unlimited&gt;, lex_quotation_mark&gt;</definition>
        <argsstring></argsstring>
        <name>lex_basic_string</name>
        <qualifiedname>toml::detail::lex_basic_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="141" column="1" bodyfile="external/toml/lexer.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ad7dd527e55b4f43d1ffd185706ddd563" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a3155594677bd8c4e38274fe77355010c" kindref="member">lex_quotation_mark</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 3 &gt; &gt;</type>
        <definition>using toml::detail::lex_ml_basic_string_delim = typedef repeat&lt;lex_quotation_mark, exactly&lt;3&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_string_delim</name>
        <qualifiedname>toml::detail::lex_ml_basic_string_delim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="174" column="1" bodyfile="external/toml/lexer.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a4710bfd179a92890b7dc420ad906398c" prot="public" static="no">
        <type><ref refid="namespacetoml_1_1detail_1ad7dd527e55b4f43d1ffd185706ddd563" kindref="member">lex_ml_basic_string_delim</ref></type>
        <definition>using toml::detail::lex_ml_basic_string_open = typedef lex_ml_basic_string_delim</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_string_open</name>
        <qualifiedname>toml::detail::lex_ml_basic_string_open</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="175" column="1" bodyfile="external/toml/lexer.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1af10a68ab50933e48e42cb07e199b8026" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a3155594677bd8c4e38274fe77355010c" kindref="member">lex_quotation_mark</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 3 &gt; &gt;, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1a3155594677bd8c4e38274fe77355010c" kindref="member">lex_quotation_mark</ref> &gt;, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1a3155594677bd8c4e38274fe77355010c" kindref="member">lex_quotation_mark</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_ml_basic_string_close = typedef sequence&lt; repeat&lt;lex_quotation_mark, exactly&lt;3&gt; &gt;, maybe&lt;lex_quotation_mark&gt;, maybe&lt;lex_quotation_mark&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_string_close</name>
        <qualifiedname>toml::detail::lex_ml_basic_string_close</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="176" column="1" bodyfile="external/toml/lexer.hpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a0f30233a80f10f9476f05b3521c399e4" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1exclude" kindref="compound">exclude</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x00, 0x08 &gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x0A, 0x1F &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x5C &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x7F &gt;, <ref refid="namespacetoml_1_1detail_1ad7dd527e55b4f43d1ffd185706ddd563" kindref="member">lex_ml_basic_string_delim</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_ml_basic_unescaped = typedef exclude&lt;either&lt;in_range&lt;0x00, 0x08&gt;, in_range&lt;0x0A, 0x1F&gt;, character&lt;0x5C&gt;, character&lt;0x7F&gt;, lex_ml_basic_string_delim&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_unescaped</name>
        <qualifiedname>toml::detail::lex_ml_basic_unescaped</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="181" column="1" bodyfile="external/toml/lexer.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ad93723b727428250409beb0def53e052" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2eb5cf3923397dc92772022fef312184" kindref="member">lex_escape</ref>, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt;, <ref refid="namespacetoml_1_1detail_1aa3980f427dea6e7f32dbb27ebb0f6938" kindref="member">lex_newline</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref>, <ref refid="namespacetoml_1_1detail_1aa3980f427dea6e7f32dbb27ebb0f6938" kindref="member">lex_newline</ref> &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_ml_basic_escaped_newline = typedef sequence&lt; lex_escape, maybe&lt;lex_ws&gt;, lex_newline, repeat&lt;either&lt;lex_ws, lex_newline&gt;, unlimited&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_escaped_newline</name>
        <qualifiedname>toml::detail::lex_ml_basic_escaped_newline</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="187" column="1" bodyfile="external/toml/lexer.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a5f3752922415e8ffccef5b94da334277" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a0f30233a80f10f9476f05b3521c399e4" kindref="member">lex_ml_basic_unescaped</ref>, <ref refid="namespacetoml_1_1detail_1a29d9dc51d2881df91b5b6acd76b6162a" kindref="member">lex_escaped</ref> &gt;</type>
        <definition>using toml::detail::lex_ml_basic_char = typedef either&lt;lex_ml_basic_unescaped, lex_escaped&gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_char</name>
        <qualifiedname>toml::detail::lex_ml_basic_char</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="191" column="1" bodyfile="external/toml/lexer.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a699b6ace625229fd4a59ddfc20540afb" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a5f3752922415e8ffccef5b94da334277" kindref="member">lex_ml_basic_char</ref>, <ref refid="namespacetoml_1_1detail_1aa3980f427dea6e7f32dbb27ebb0f6938" kindref="member">lex_newline</ref>, <ref refid="namespacetoml_1_1detail_1ad93723b727428250409beb0def53e052" kindref="member">lex_ml_basic_escaped_newline</ref> &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt;</type>
        <definition>using toml::detail::lex_ml_basic_body = typedef repeat&lt;either&lt;lex_ml_basic_char, lex_newline, lex_ml_basic_escaped_newline&gt;, unlimited&gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_body</name>
        <qualifiedname>toml::detail::lex_ml_basic_body</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="192" column="1" bodyfile="external/toml/lexer.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ad3e7c1125bde7cd94c488fec04709840" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a4710bfd179a92890b7dc420ad906398c" kindref="member">lex_ml_basic_string_open</ref>, <ref refid="namespacetoml_1_1detail_1a699b6ace625229fd4a59ddfc20540afb" kindref="member">lex_ml_basic_body</ref>, <ref refid="namespacetoml_1_1detail_1af10a68ab50933e48e42cb07e199b8026" kindref="member">lex_ml_basic_string_close</ref> &gt;</type>
        <definition>using toml::detail::lex_ml_basic_string = typedef sequence&lt;lex_ml_basic_string_open, lex_ml_basic_body, lex_ml_basic_string_close&gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_basic_string</name>
        <qualifiedname>toml::detail::lex_ml_basic_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="195" column="1" bodyfile="external/toml/lexer.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a2196adf6c5a859a0e7c116e95e74a228" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1exclude" kindref="compound">exclude</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x00, 0x08 &gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x0A, 0x1F &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x7F &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x27 &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_literal_char = typedef exclude&lt;either&lt;in_range&lt;0x00, 0x08&gt;, in_range&lt;0x0A, 0x1F&gt;, character&lt;0x7F&gt;, character&lt;0x27&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_literal_char</name>
        <qualifiedname>toml::detail::lex_literal_char</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="199" column="1" bodyfile="external/toml/lexer.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae5158b05e0137f8955716b4ec9817721" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;\&apos;&apos;&gt;</type>
        <definition>using toml::detail::lex_apostrophe = typedef character&lt;&apos;\&apos;&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_apostrophe</name>
        <qualifiedname>toml::detail::lex_apostrophe</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="201" column="1" bodyfile="external/toml/lexer.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a855add8c630c2f39425aa6cdef64ff81" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae5158b05e0137f8955716b4ec9817721" kindref="member">lex_apostrophe</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2196adf6c5a859a0e7c116e95e74a228" kindref="member">lex_literal_char</ref>, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt;, <ref refid="namespacetoml_1_1detail_1ae5158b05e0137f8955716b4ec9817721" kindref="member">lex_apostrophe</ref> &gt;</type>
        <definition>using toml::detail::lex_literal_string = typedef sequence&lt;lex_apostrophe, repeat&lt;lex_literal_char, unlimited&gt;, lex_apostrophe&gt;</definition>
        <argsstring></argsstring>
        <name>lex_literal_string</name>
        <qualifiedname>toml::detail::lex_literal_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="202" column="1" bodyfile="external/toml/lexer.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ab7e7de5eb5ff6f317fdbb2905fa65596" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae5158b05e0137f8955716b4ec9817721" kindref="member">lex_apostrophe</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 3 &gt; &gt;</type>
        <definition>using toml::detail::lex_ml_literal_string_delim = typedef repeat&lt;lex_apostrophe, exactly&lt;3&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_literal_string_delim</name>
        <qualifiedname>toml::detail::lex_ml_literal_string_delim</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="207" column="1" bodyfile="external/toml/lexer.hpp" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a9398cd7ca0c3d28d1e0713875342e45d" prot="public" static="no">
        <type><ref refid="namespacetoml_1_1detail_1ab7e7de5eb5ff6f317fdbb2905fa65596" kindref="member">lex_ml_literal_string_delim</ref></type>
        <definition>using toml::detail::lex_ml_literal_string_open = typedef lex_ml_literal_string_delim</definition>
        <argsstring></argsstring>
        <name>lex_ml_literal_string_open</name>
        <qualifiedname>toml::detail::lex_ml_literal_string_open</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="208" column="1" bodyfile="external/toml/lexer.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a370721aed5cba52722117a2392488315" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae5158b05e0137f8955716b4ec9817721" kindref="member">lex_apostrophe</ref>, <ref refid="structtoml_1_1detail_1_1exactly" kindref="compound">exactly</ref>&lt; 3 &gt; &gt;, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae5158b05e0137f8955716b4ec9817721" kindref="member">lex_apostrophe</ref> &gt;, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae5158b05e0137f8955716b4ec9817721" kindref="member">lex_apostrophe</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_ml_literal_string_close = typedef sequence&lt; repeat&lt;lex_apostrophe, exactly&lt;3&gt; &gt;, maybe&lt;lex_apostrophe&gt;, maybe&lt;lex_apostrophe&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_literal_string_close</name>
        <qualifiedname>toml::detail::lex_ml_literal_string_close</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="209" column="1" bodyfile="external/toml/lexer.hpp" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a56eeb7e4da5b0e753b007b1d589979c4" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1exclude" kindref="compound">exclude</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x00, 0x08 &gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x0A, 0x1F &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x7F &gt;, <ref refid="namespacetoml_1_1detail_1ab7e7de5eb5ff6f317fdbb2905fa65596" kindref="member">lex_ml_literal_string_delim</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_ml_literal_char = typedef exclude&lt;either&lt;in_range&lt;0x00, 0x08&gt;, in_range&lt;0x0A, 0x1F&gt;, character&lt;0x7F&gt;, lex_ml_literal_string_delim&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_literal_char</name>
        <qualifiedname>toml::detail::lex_ml_literal_char</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="214" column="1" bodyfile="external/toml/lexer.hpp" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a165d3115d9b0d12e9504905f1b60a98e" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a56eeb7e4da5b0e753b007b1d589979c4" kindref="member">lex_ml_literal_char</ref>, <ref refid="namespacetoml_1_1detail_1aa3980f427dea6e7f32dbb27ebb0f6938" kindref="member">lex_newline</ref> &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt;</type>
        <definition>using toml::detail::lex_ml_literal_body = typedef repeat&lt;either&lt;lex_ml_literal_char, lex_newline&gt;, unlimited&gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_literal_body</name>
        <qualifiedname>toml::detail::lex_ml_literal_body</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="218" column="1" bodyfile="external/toml/lexer.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1af9cd6a5bf2796cd269fea48ceff84e5a" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a9398cd7ca0c3d28d1e0713875342e45d" kindref="member">lex_ml_literal_string_open</ref>, <ref refid="namespacetoml_1_1detail_1a165d3115d9b0d12e9504905f1b60a98e" kindref="member">lex_ml_literal_body</ref>, <ref refid="namespacetoml_1_1detail_1a370721aed5cba52722117a2392488315" kindref="member">lex_ml_literal_string_close</ref> &gt;</type>
        <definition>using toml::detail::lex_ml_literal_string = typedef sequence&lt;lex_ml_literal_string_open, lex_ml_literal_body, lex_ml_literal_string_close&gt;</definition>
        <argsstring></argsstring>
        <name>lex_ml_literal_string</name>
        <qualifiedname>toml::detail::lex_ml_literal_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="220" column="1" bodyfile="external/toml/lexer.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a3d9ae3795483e46cecfdfb59dd7f7100" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1ad3e7c1125bde7cd94c488fec04709840" kindref="member">lex_ml_basic_string</ref>, <ref refid="namespacetoml_1_1detail_1ae49b0e275794a4261393ae7690ad97c0" kindref="member">lex_basic_string</ref>, <ref refid="namespacetoml_1_1detail_1af9cd6a5bf2796cd269fea48ceff84e5a" kindref="member">lex_ml_literal_string</ref>, <ref refid="namespacetoml_1_1detail_1a855add8c630c2f39425aa6cdef64ff81" kindref="member">lex_literal_string</ref> &gt;</type>
        <definition>using toml::detail::lex_string = typedef either&lt;lex_ml_basic_string, lex_basic_string, lex_ml_literal_string, lex_literal_string&gt;</definition>
        <argsstring></argsstring>
        <name>lex_string</name>
        <qualifiedname>toml::detail::lex_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="224" column="1" bodyfile="external/toml/lexer.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a64aaca38f4bfe70571cbc5617d819882" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;.&apos;&gt;, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_dot_sep = typedef sequence&lt;maybe&lt;lex_ws&gt;, character&lt;&apos;.&apos;&gt;, maybe&lt;lex_ws&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_dot_sep</name>
        <qualifiedname>toml::detail::lex_dot_sep</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="228" column="1" bodyfile="external/toml/lexer.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a2f702d4313fe2ac67fd0c2f1742dcce5" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae3b5c20d0cbf39902d96aed0f277ad29" kindref="member">lex_alpha</ref>, <ref refid="namespacetoml_1_1detail_1a2b4ff1a83c2fd653a41fee9c2f99ef85" kindref="member">lex_digit</ref>, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;-&apos;&gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; &apos;_&apos;&gt; &gt;, <ref refid="structtoml_1_1detail_1_1at__least" kindref="compound">at_least</ref>&lt; 1 &gt; &gt;</type>
        <definition>using toml::detail::lex_unquoted_key = typedef repeat&lt;either&lt;lex_alpha, lex_digit, character&lt;&apos;-&apos;&gt;, character&lt;&apos;_&apos;&gt; &gt;, at_least&lt;1&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_unquoted_key</name>
        <qualifiedname>toml::detail::lex_unquoted_key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="230" column="1" bodyfile="external/toml/lexer.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a3a4513e58ef451b84323b8b0c3a258de" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae49b0e275794a4261393ae7690ad97c0" kindref="member">lex_basic_string</ref>, <ref refid="namespacetoml_1_1detail_1a855add8c630c2f39425aa6cdef64ff81" kindref="member">lex_literal_string</ref> &gt;</type>
        <definition>using toml::detail::lex_quoted_key = typedef either&lt;lex_basic_string, lex_literal_string&gt;</definition>
        <argsstring></argsstring>
        <name>lex_quoted_key</name>
        <qualifiedname>toml::detail::lex_quoted_key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="233" column="1" bodyfile="external/toml/lexer.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae93b1903493d646ec1a140235464f1d4" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a2f702d4313fe2ac67fd0c2f1742dcce5" kindref="member">lex_unquoted_key</ref>, <ref refid="namespacetoml_1_1detail_1a3a4513e58ef451b84323b8b0c3a258de" kindref="member">lex_quoted_key</ref> &gt;</type>
        <definition>using toml::detail::lex_simple_key = typedef either&lt;lex_unquoted_key, lex_quoted_key&gt;</definition>
        <argsstring></argsstring>
        <name>lex_simple_key</name>
        <qualifiedname>toml::detail::lex_simple_key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="234" column="1" bodyfile="external/toml/lexer.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a4ee49b15200140685dfa0af9d047bfac" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ae93b1903493d646ec1a140235464f1d4" kindref="member">lex_simple_key</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a64aaca38f4bfe70571cbc5617d819882" kindref="member">lex_dot_sep</ref>, <ref refid="namespacetoml_1_1detail_1ae93b1903493d646ec1a140235464f1d4" kindref="member">lex_simple_key</ref> &gt;, <ref refid="structtoml_1_1detail_1_1at__least" kindref="compound">at_least</ref>&lt; 1 &gt; &gt; &gt;</type>
        <definition>using toml::detail::lex_dotted_key = typedef sequence&lt;lex_simple_key, repeat&lt;sequence&lt;lex_dot_sep, lex_simple_key&gt;, at_least&lt;1&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_dotted_key</name>
        <qualifiedname>toml::detail::lex_dotted_key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="235" column="1" bodyfile="external/toml/lexer.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ac618265e125df43229e410c901e2040b" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a4ee49b15200140685dfa0af9d047bfac" kindref="member">lex_dotted_key</ref>, <ref refid="namespacetoml_1_1detail_1ae93b1903493d646ec1a140235464f1d4" kindref="member">lex_simple_key</ref> &gt;</type>
        <definition>using toml::detail::lex_key = typedef either&lt;lex_dotted_key, lex_simple_key&gt;</definition>
        <argsstring></argsstring>
        <name>lex_key</name>
        <qualifiedname>toml::detail::lex_key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="240" column="1" bodyfile="external/toml/lexer.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ab50a41870ad72a264ceacdadb1a7b2eb" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt;, <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;=&apos;&gt;, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_keyval_sep = typedef sequence&lt;maybe&lt;lex_ws&gt;, character&lt;&apos;=&apos;&gt;, maybe&lt;lex_ws&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_keyval_sep</name>
        <qualifiedname>toml::detail::lex_keyval_sep</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="242" column="1" bodyfile="external/toml/lexer.hpp" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ac09b022c3f7396f40a68c22e4a3994f4" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;[&apos;&gt;</type>
        <definition>using toml::detail::lex_std_table_open = typedef character&lt;&apos;[&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_std_table_open</name>
        <qualifiedname>toml::detail::lex_std_table_open</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="246" column="1" bodyfile="external/toml/lexer.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a7247c6d4cced8521dc414f7298b4b3cc" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;]&apos;&gt;</type>
        <definition>using toml::detail::lex_std_table_close = typedef character&lt;&apos;]&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_std_table_close</name>
        <qualifiedname>toml::detail::lex_std_table_close</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="247" column="1" bodyfile="external/toml/lexer.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a08384b38e2ca12c2cba506823b8cca99" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ac09b022c3f7396f40a68c22e4a3994f4" kindref="member">lex_std_table_open</ref>, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt;, <ref refid="namespacetoml_1_1detail_1ac618265e125df43229e410c901e2040b" kindref="member">lex_key</ref>, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt;, <ref refid="namespacetoml_1_1detail_1a7247c6d4cced8521dc414f7298b4b3cc" kindref="member">lex_std_table_close</ref> &gt;</type>
        <definition>using toml::detail::lex_std_table = typedef sequence&lt;lex_std_table_open, maybe&lt;lex_ws&gt;, lex_key, maybe&lt;lex_ws&gt;, lex_std_table_close&gt;</definition>
        <argsstring></argsstring>
        <name>lex_std_table</name>
        <qualifiedname>toml::detail::lex_std_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="248" column="1" bodyfile="external/toml/lexer.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a3adf2405694d9ad9c6bc96ac09bc9480" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1ac09b022c3f7396f40a68c22e4a3994f4" kindref="member">lex_std_table_open</ref>, <ref refid="namespacetoml_1_1detail_1ac09b022c3f7396f40a68c22e4a3994f4" kindref="member">lex_std_table_open</ref> &gt;</type>
        <definition>using toml::detail::lex_array_table_open = typedef sequence&lt;lex_std_table_open, lex_std_table_open&gt;</definition>
        <argsstring></argsstring>
        <name>lex_array_table_open</name>
        <qualifiedname>toml::detail::lex_array_table_open</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="254" column="1" bodyfile="external/toml/lexer.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1af880914dd476983a64559a8d0b5f37ce" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a7247c6d4cced8521dc414f7298b4b3cc" kindref="member">lex_std_table_close</ref>, <ref refid="namespacetoml_1_1detail_1a7247c6d4cced8521dc414f7298b4b3cc" kindref="member">lex_std_table_close</ref> &gt;</type>
        <definition>using toml::detail::lex_array_table_close = typedef sequence&lt;lex_std_table_close, lex_std_table_close&gt;</definition>
        <argsstring></argsstring>
        <name>lex_array_table_close</name>
        <qualifiedname>toml::detail::lex_array_table_close</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="255" column="1" bodyfile="external/toml/lexer.hpp" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a4a390c5b8558d9567b4b7a2200f9b687" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a3adf2405694d9ad9c6bc96ac09bc9480" kindref="member">lex_array_table_open</ref>, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt;, <ref refid="namespacetoml_1_1detail_1ac618265e125df43229e410c901e2040b" kindref="member">lex_key</ref>, <ref refid="structtoml_1_1detail_1_1maybe" kindref="compound">maybe</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa4764c4543fe43f20ebe118900be3b4e" kindref="member">lex_ws</ref> &gt;, <ref refid="namespacetoml_1_1detail_1af880914dd476983a64559a8d0b5f37ce" kindref="member">lex_array_table_close</ref> &gt;</type>
        <definition>using toml::detail::lex_array_table = typedef sequence&lt;lex_array_table_open, maybe&lt;lex_ws&gt;, lex_key, maybe&lt;lex_ws&gt;, lex_array_table_close&gt;</definition>
        <argsstring></argsstring>
        <name>lex_array_table</name>
        <qualifiedname>toml::detail::lex_array_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="256" column="1" bodyfile="external/toml/lexer.hpp" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a261b193aa8c2b7d6a4a1a6b3979fdf8b" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x00, 0x7F &gt;</type>
        <definition>using toml::detail::lex_utf8_1byte = typedef in_range&lt;0x00, 0x7F&gt;</definition>
        <argsstring></argsstring>
        <name>lex_utf8_1byte</name>
        <qualifiedname>toml::detail::lex_utf8_1byte</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="262" column="1" bodyfile="external/toml/lexer.hpp" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a4eca73034e806b3ab59e82084a7c2712" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0xC2), static_cast&lt; char &gt;(0xDF)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0xBF)&gt; &gt;</type>
        <definition>using toml::detail::lex_utf8_2byte = typedef sequence&lt; in_range&lt;static_cast&lt;char&gt;(0xC2), static_cast&lt;char&gt;(0xDF)&gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0xBF)&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_utf8_2byte</name>
        <qualifiedname>toml::detail::lex_utf8_2byte</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="263" column="1" bodyfile="external/toml/lexer.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a38aa1626200c3489422eb632252c7885" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; static_cast&lt; char &gt;(0xE0)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0xA0), static_cast&lt; char &gt;(0xBF)&gt; &gt;, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0xE1), static_cast&lt; char &gt;(0xEC)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0xBF)&gt; &gt;, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; static_cast&lt; char &gt;(0xED)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0x9F)&gt; &gt;, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0xEE), static_cast&lt; char &gt;(0xEF)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0xBF)&gt; &gt; &gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0xBF)&gt; &gt;</type>
        <definition>using toml::detail::lex_utf8_3byte = typedef sequence&lt;either&lt; sequence&lt;character&lt;static_cast&lt;char&gt;(0xE0)&gt;, in_range&lt;static_cast&lt;char&gt;(0xA0), static_cast&lt;char&gt;(0xBF)&gt; &gt;, sequence&lt;in_range &lt;static_cast&lt;char&gt;(0xE1), static_cast&lt;char&gt;(0xEC)&gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0xBF)&gt; &gt;, sequence&lt;character&lt;static_cast&lt;char&gt;(0xED)&gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0x9F)&gt; &gt;, sequence&lt;in_range &lt;static_cast&lt;char&gt;(0xEE), static_cast&lt;char&gt;(0xEF)&gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0xBF)&gt; &gt; &gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0xBF)&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_utf8_3byte</name>
        <qualifiedname>toml::detail::lex_utf8_3byte</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="267" column="1" bodyfile="external/toml/lexer.hpp" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1afb49d12e7def5e88f9e18b38b9f8c84e" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; static_cast&lt; char &gt;(0xF0)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x90), static_cast&lt; char &gt;(0xBF)&gt; &gt;, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0xF1), static_cast&lt; char &gt;(0xF3)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0xBF)&gt; &gt;, <ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; static_cast&lt; char &gt;(0xF4)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0x8F)&gt; &gt; &gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0xBF)&gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; static_cast&lt; char &gt;(0x80), static_cast&lt; char &gt;(0xBF)&gt; &gt;</type>
        <definition>using toml::detail::lex_utf8_4byte = typedef sequence&lt;either&lt; sequence&lt;character&lt;static_cast&lt;char&gt;(0xF0)&gt;, in_range&lt;static_cast&lt;char&gt;(0x90), static_cast&lt;char&gt;(0xBF)&gt; &gt;, sequence&lt;in_range &lt;static_cast&lt;char&gt;(0xF1), static_cast&lt;char&gt;(0xF3)&gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0xBF)&gt; &gt;, sequence&lt;character&lt;static_cast&lt;char&gt;(0xF4)&gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0x8F)&gt; &gt; &gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0xBF)&gt;, in_range&lt;static_cast&lt;char&gt;(0x80), static_cast&lt;char&gt;(0xBF)&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_utf8_4byte</name>
        <qualifiedname>toml::detail::lex_utf8_4byte</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="273" column="1" bodyfile="external/toml/lexer.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1abf47de50b232d85be96528a76e4e0dd0" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1a261b193aa8c2b7d6a4a1a6b3979fdf8b" kindref="member">lex_utf8_1byte</ref>, <ref refid="namespacetoml_1_1detail_1a4eca73034e806b3ab59e82084a7c2712" kindref="member">lex_utf8_2byte</ref>, <ref refid="namespacetoml_1_1detail_1a38aa1626200c3489422eb632252c7885" kindref="member">lex_utf8_3byte</ref>, <ref refid="namespacetoml_1_1detail_1afb49d12e7def5e88f9e18b38b9f8c84e" kindref="member">lex_utf8_4byte</ref> &gt;</type>
        <definition>using toml::detail::lex_utf8_code = typedef either&lt; lex_utf8_1byte, lex_utf8_2byte, lex_utf8_3byte, lex_utf8_4byte &gt;</definition>
        <argsstring></argsstring>
        <name>lex_utf8_code</name>
        <qualifiedname>toml::detail::lex_utf8_code</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="279" column="1" bodyfile="external/toml/lexer.hpp" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a1bb9446a7558b22fe5b51436a7a0d771" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt;&apos;#&apos;&gt;</type>
        <definition>using toml::detail::lex_comment_start_symbol = typedef character&lt;&apos;#&apos;&gt;</definition>
        <argsstring></argsstring>
        <name>lex_comment_start_symbol</name>
        <qualifiedname>toml::detail::lex_comment_start_symbol</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="286" column="1" bodyfile="external/toml/lexer.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1acfdbc55f5cd14fc8a973248e9cede270" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="structtoml_1_1detail_1_1character" kindref="compound">character</ref>&lt; 0x09 &gt;, <ref refid="structtoml_1_1detail_1_1in__range" kindref="compound">in_range</ref>&lt; 0x20, 0x7E &gt; &gt;</type>
        <definition>using toml::detail::lex_non_eol_ascii = typedef either&lt;character&lt;0x09&gt;, in_range&lt;0x20, 0x7E&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_non_eol_ascii</name>
        <qualifiedname>toml::detail::lex_non_eol_ascii</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="287" column="1" bodyfile="external/toml/lexer.hpp" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a912468f3d502bd2135ca6b61b947347a" prot="public" static="no">
        <type><ref refid="structtoml_1_1detail_1_1sequence" kindref="compound">sequence</ref>&lt; <ref refid="namespacetoml_1_1detail_1a1bb9446a7558b22fe5b51436a7a0d771" kindref="member">lex_comment_start_symbol</ref>, <ref refid="structtoml_1_1detail_1_1repeat" kindref="compound">repeat</ref>&lt; <ref refid="structtoml_1_1detail_1_1either" kindref="compound">either</ref>&lt; <ref refid="namespacetoml_1_1detail_1acfdbc55f5cd14fc8a973248e9cede270" kindref="member">lex_non_eol_ascii</ref>, <ref refid="namespacetoml_1_1detail_1a4eca73034e806b3ab59e82084a7c2712" kindref="member">lex_utf8_2byte</ref>, <ref refid="namespacetoml_1_1detail_1a38aa1626200c3489422eb632252c7885" kindref="member">lex_utf8_3byte</ref>, <ref refid="namespacetoml_1_1detail_1afb49d12e7def5e88f9e18b38b9f8c84e" kindref="member">lex_utf8_4byte</ref> &gt;, <ref refid="structtoml_1_1detail_1_1unlimited" kindref="compound">unlimited</ref> &gt; &gt;</type>
        <definition>using toml::detail::lex_comment = typedef sequence&lt;lex_comment_start_symbol, repeat&lt;either&lt; lex_non_eol_ascii, lex_utf8_2byte, lex_utf8_3byte, lex_utf8_4byte&gt;, unlimited&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>lex_comment</name>
        <qualifiedname>toml::detail::lex_comment</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/lexer.hpp" line="288" column="1" bodyfile="external/toml/lexer.hpp" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ae291022c5ae9ba855f2e9dfb79926729" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structtoml_1_1detail_1_1index__sequence__maker" kindref="compound">index_sequence_maker</ref>&lt; N-1 &gt;::type</type>
        <definition>using toml::detail::make_index_sequence = typedef typename index_sequence_maker&lt;N-1&gt;::type</definition>
        <argsstring></argsstring>
        <name>make_index_sequence</name>
        <qualifiedname>toml::detail::make_index_sequence</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/traits.hpp" line="265" column="1" bodyfile="external/toml/traits.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using toml::detail::enable_if_t = typedef typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <qualifiedname>toml::detail::enable_if_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/traits.hpp" line="279" column="1" bodyfile="external/toml/traits.hpp" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename std::result_of&lt; F(Args...)&gt;::type</type>
        <definition>using toml::detail::return_type_of_t = typedef typename std::result_of&lt;F(Args...)&gt;::type</definition>
        <argsstring></argsstring>
        <name>return_type_of_t</name>
        <qualifiedname>toml::detail::return_type_of_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/traits.hpp" line="294" column="1" bodyfile="external/toml/traits.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structtoml_1_1detail_1_1remove__cvref" kindref="compound">remove_cvref</ref>&lt; T &gt;::type</type>
        <definition>using toml::detail::remove_cvref_t = typedef typename remove_cvref&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_cvref_t</name>
        <qualifiedname>toml::detail::remove_cvref_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/traits.hpp" line="324" column="1" bodyfile="external/toml/traits.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1a0aae3b0a945ae7e58004d1b7b42a50d2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>value_t</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; <ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref>, V &gt;</type>
        <definition>using toml::detail::value_t_constant = typedef std::integral_constant&lt;value_t, V&gt;</definition>
        <argsstring></argsstring>
        <name>value_t_constant</name>
        <qualifiedname>toml::detail::value_t_constant</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="114" column="1" bodyfile="external/toml/types.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1_1detail_1ad27577d7780fe6c12bcfbd24aac4505e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structtoml_1_1detail_1_1last__one__in__pack" kindref="compound">last_one_in_pack</ref>&lt; Ts... &gt;::type</type>
        <definition>using toml::detail::last_one_in_pack_t = typedef typename last_one_in_pack&lt;Ts...&gt;::type</definition>
        <argsstring></argsstring>
        <name>last_one_in_pack_t</name>
        <qualifiedname>toml::detail::last_one_in_pack_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="132" column="1" bodyfile="external/toml/utility.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetoml_1_1detail_1a158ef9d09c21d75f226fd3cf8f2e8b1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string toml::detail::show_char</definition>
        <argsstring>(const char c)</argsstring>
        <name>show_char</name>
        <qualifiedname>toml::detail::show_char</qualifiedname>
        <param>
          <type>const char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/combinator.hpp" line="30" column="20" bodyfile="external/toml/combinator.hpp" bodystart="30" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af32e4e42a39aa2b9fc2bd8e9d3f97cd8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::detail::operator==</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;, const empty_iterator&lt; T, C &gt; &amp;) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::detail::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="314" column="6" bodyfile="external/toml/comments.hpp" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aa4437dc0ba9e506dec5d6922504fccb5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::detail::operator!=</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;, const empty_iterator&lt; T, C &gt; &amp;) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::detail::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="316" column="6" bodyfile="external/toml/comments.hpp" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a020cb01199da9b349b09e05f732e4694" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::detail::operator&lt;</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;, const empty_iterator&lt; T, C &gt; &amp;) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::detail::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="318" column="1" bodyfile="external/toml/comments.hpp" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1adb0f553fbf0b2ddb642de75f9a2f1b84" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::detail::operator&lt;=</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;, const empty_iterator&lt; T, C &gt; &amp;) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::detail::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="320" column="1" bodyfile="external/toml/comments.hpp" bodystart="320" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ab0aa1507d1ed1b957274d535fe27c42b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::detail::operator&gt;</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;, const empty_iterator&lt; T, C &gt; &amp;) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::detail::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="322" column="6" bodyfile="external/toml/comments.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af42e8bbe713ac03abc32455bde9bcd03" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::detail::operator&gt;=</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;, const empty_iterator&lt; T, C &gt; &amp;) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::detail::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="324" column="6" bodyfile="external/toml/comments.hpp" bodystart="324" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a04271fbec74a060a51131962bd435cf3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt;::difference_type</type>
        <definition>empty_iterator&lt; T, C &gt;::difference_type toml::detail::operator-</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;, const empty_iterator&lt; T, C &gt; &amp;) noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>toml::detail::operator-</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="328" column="1" bodyfile="external/toml/comments.hpp" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a5b66ed4b1104ca9dadeebd46820a535b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt;</type>
        <definition>empty_iterator&lt; T, C &gt; toml::detail::operator+</definition>
        <argsstring>(typename empty_iterator&lt; T, C &gt;::difference_type, const empty_iterator&lt; T, C &gt; &amp;rhs) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>toml::detail::operator+</qualifiedname>
        <param>
          <type>typename <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt;::difference_type</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="332" column="1" bodyfile="external/toml/comments.hpp" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a53775bd9a0cc806fe715db7953f72caa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>bool</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt;</type>
        <definition>empty_iterator&lt; T, C &gt; toml::detail::operator+</definition>
        <argsstring>(const empty_iterator&lt; T, C &gt; &amp;lhs, typename empty_iterator&lt; T, C &gt;::difference_type) noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>toml::detail::operator+</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>typename <ref refid="structtoml_1_1detail_1_1empty__iterator" kindref="compound">empty_iterator</ref>&lt; T, C &gt;::difference_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="335" column="1" bodyfile="external/toml/comments.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ac375736027ae3facd603380d3e9e54c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tm</type>
        <definition>std::tm toml::detail::localtime_s</definition>
        <argsstring>(const std::time_t *src)</argsstring>
        <name>localtime_s</name>
        <qualifiedname>toml::detail::localtime_s</qualifiedname>
        <param>
          <type>const std::time_t *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="55" column="16" bodyfile="external/toml/datetime.hpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a37112110ee75451aa3793f8b3b9be957" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::tm</type>
        <definition>std::tm toml::detail::gmtime_s</definition>
        <argsstring>(const std::time_t *src)</argsstring>
        <name>gmtime_s</name>
        <qualifiedname>toml::detail::gmtime_s</qualifiedname>
        <param>
          <type>const std::time_t *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="61" column="16" bodyfile="external/toml/datetime.hpp" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1abff645e8280dd4d9dc6bc27368527b84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Array</type>
          </param>
          <param>
            <type>std::size_t ...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T toml::detail::get_tuple_impl</definition>
        <argsstring>(const Array &amp;a, index_sequence&lt; I... &gt;)</argsstring>
        <name>get_tuple_impl</name>
        <qualifiedname>toml::detail::get_tuple_impl</qualifiedname>
        <param>
          <type>const Array &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt; I... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="381" column="3" bodyfile="external/toml/get.hpp" bodystart="381" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a2a5edd1d651144d5a8f504363b5b46ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_integral&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">remove_cvref_t</ref>&lt; T &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; std::is_same&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">remove_cvref_t</ref>&lt; T &gt;, bool &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::size_t &gt;</type>
        <definition>enable_if_t&lt; conjunction&lt; std::is_integral&lt; remove_cvref_t&lt; T &gt; &gt;, negation&lt; std::is_same&lt; remove_cvref_t&lt; T &gt;, bool &gt; &gt; &gt;::value, std::size_t &gt; toml::detail::key_cast</definition>
        <argsstring>(T &amp;&amp;v) noexcept</argsstring>
        <name>key_cast</name>
        <qualifiedname>toml::detail::key_cast</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="662" column="1" bodyfile="external/toml/get.hpp" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ad4438aabaa3c4a6dbd0c4d051e41b858" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">conjunction</ref>&lt; std::is_integral&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">remove_cvref_t</ref>&lt; T &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">negation</ref>&lt; std::is_same&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">remove_cvref_t</ref>&lt; T &gt;, bool &gt; &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt;</type>
        <definition>enable_if_t&lt; negation&lt; conjunction&lt; std::is_integral&lt; remove_cvref_t&lt; T &gt; &gt;, negation&lt; std::is_same&lt; remove_cvref_t&lt; T &gt;, bool &gt; &gt; &gt; &gt;::value, std::string &gt; toml::detail::key_cast</definition>
        <argsstring>(T &amp;&amp;v) noexcept</argsstring>
        <name>key_cast</name>
        <qualifiedname>toml::detail::key_cast</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="669" column="1" bodyfile="external/toml/get.hpp" bodystart="669" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a79439bcaa95b2d9f009b131f4fe0503d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; boolean, region &gt;, std::string &gt; toml::detail::parse_boolean</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_boolean</name>
        <qualifiedname>toml::detail::parse_boolean</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="31" column="1" bodyfile="external/toml/parser.hpp" bodystart="31" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a28e381c53888f17cfb8fc98ee21bc968" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; integer, region &gt;, std::string &gt; toml::detail::parse_binary_integer</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_binary_integer</name>
        <qualifiedname>toml::detail::parse_binary_integer</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="53" column="1" bodyfile="external/toml/parser.hpp" bodystart="53" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aaf03d2dd08ab0ee4741933f97cb776aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; integer, region &gt;, std::string &gt; toml::detail::parse_octal_integer</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_octal_integer</name>
        <qualifiedname>toml::detail::parse_octal_integer</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="82" column="1" bodyfile="external/toml/parser.hpp" bodystart="82" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a8b05aa4b8682386670bfe2e4536aaf31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; integer, region &gt;, std::string &gt; toml::detail::parse_hexadecimal_integer</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_hexadecimal_integer</name>
        <qualifiedname>toml::detail::parse_hexadecimal_integer</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="102" column="1" bodyfile="external/toml/parser.hpp" bodystart="102" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af3ce8ca50647de2d35f9e7fedf4e3c84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; integer, region &gt;, std::string &gt; toml::detail::parse_integer</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_integer</name>
        <qualifiedname>toml::detail::parse_integer</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="122" column="1" bodyfile="external/toml/parser.hpp" bodystart="122" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a570077e5697415b2bc98a3a3c1d083a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; floating, region &gt;, std::string &gt; toml::detail::parse_floating</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_floating</name>
        <qualifiedname>toml::detail::parse_floating</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="168" column="1" bodyfile="external/toml/parser.hpp" bodystart="168" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af51fa4863a69805aee614744ec7830de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string toml::detail::read_utf8_codepoint</definition>
        <argsstring>(const region &amp;reg, const location &amp;loc)</argsstring>
        <name>read_utf8_codepoint</name>
        <qualifiedname>toml::detail::read_utf8_codepoint</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &amp;</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="255" column="20" bodyfile="external/toml/parser.hpp" bodystart="255" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a9e2d963ae5654a0f0f3bca2ffcbb15c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::string, std::string &gt;</type>
        <definition>result&lt; std::string, std::string &gt; toml::detail::parse_escape_sequence</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_escape_sequence</name>
        <qualifiedname>toml::detail::parse_escape_sequence</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="312" column="15" bodyfile="external/toml/parser.hpp" bodystart="312" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aceb66a1f4d3206c2f0217c276dc7aff8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ptrdiff_t</type>
        <definition>std::ptrdiff_t toml::detail::check_utf8_validity</definition>
        <argsstring>(const std::string &amp;reg)</argsstring>
        <name>check_utf8_validity</name>
        <qualifiedname>toml::detail::check_utf8_validity</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="367" column="23" bodyfile="external/toml/parser.hpp" bodystart="367" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a448070e1dfbe69f2967d9b9e7f84d7ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1string" kindref="compound">toml::string</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; toml::string, region &gt;, std::string &gt; toml::detail::parse_ml_basic_string</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_ml_basic_string</name>
        <qualifiedname>toml::detail::parse_ml_basic_string</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="381" column="1" bodyfile="external/toml/parser.hpp" bodystart="381" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a75c63a1eba5062b48bca39c3169b9246" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1string" kindref="compound">toml::string</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; toml::string, region &gt;, std::string &gt; toml::detail::parse_basic_string</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_basic_string</name>
        <qualifiedname>toml::detail::parse_basic_string</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="474" column="1" bodyfile="external/toml/parser.hpp" bodystart="474" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1abb616874d86ad2e81f740a5661773003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1string" kindref="compound">toml::string</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; toml::string, region &gt;, std::string &gt; toml::detail::parse_ml_literal_string</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_ml_literal_string</name>
        <qualifiedname>toml::detail::parse_ml_literal_string</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="540" column="1" bodyfile="external/toml/parser.hpp" bodystart="540" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ae5a8856bc82b3291e074fe4a6ace1ac9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1string" kindref="compound">toml::string</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; toml::string, region &gt;, std::string &gt; toml::detail::parse_literal_string</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_literal_string</name>
        <qualifiedname>toml::detail::parse_literal_string</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="616" column="1" bodyfile="external/toml/parser.hpp" bodystart="616" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1acc4dcb02c7028634b40e03687ba238de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1string" kindref="compound">toml::string</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; toml::string, region &gt;, std::string &gt; toml::detail::parse_string</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_string</name>
        <qualifiedname>toml::detail::parse_string</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="670" column="1" bodyfile="external/toml/parser.hpp" bodystart="670" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a086e87691ec78a9985f043905237335e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; local_date, region &gt;, std::string &gt; toml::detail::parse_local_date</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_local_date</name>
        <qualifiedname>toml::detail::parse_local_date</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="701" column="1" bodyfile="external/toml/parser.hpp" bodystart="701" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aaf5f64afd505a0c69b3e28b6afbffb97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; local_time, region &gt;, std::string &gt; toml::detail::parse_local_time</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_local_time</name>
        <qualifiedname>toml::detail::parse_local_time</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="774" column="1" bodyfile="external/toml/parser.hpp" bodystart="774" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a5d307bd1493d2e305dc247f244da69b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; local_datetime, region &gt;, std::string &gt; toml::detail::parse_local_datetime</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_local_datetime</name>
        <qualifiedname>toml::detail::parse_local_datetime</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="874" column="1" bodyfile="external/toml/parser.hpp" bodystart="874" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ac710d6135936a580d7b3949744e488ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; offset_datetime, region &gt;, std::string &gt; toml::detail::parse_offset_datetime</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_offset_datetime</name>
        <qualifiedname>toml::detail::parse_offset_datetime</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="918" column="1" bodyfile="external/toml/parser.hpp" bodystart="918" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a868c59ae781e1aea376d827c8d7a841a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; key, region &gt;, std::string &gt; toml::detail::parse_simple_key</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_simple_key</name>
        <qualifiedname>toml::detail::parse_simple_key</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="977" column="1" bodyfile="external/toml/parser.hpp" bodystart="977" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ac3ca2e746db114f0747188013a7b9b62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; std::vector&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &gt;, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; std::vector&lt; key &gt;, region &gt;, std::string &gt; toml::detail::parse_key</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_key</name>
        <qualifiedname>toml::detail::parse_key</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="998" column="1" bodyfile="external/toml/parser.hpp" bodystart="998" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a1b4b4caf7f95ad4490c056a4b9394a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; Value, std::string &gt;</type>
        <definition>result&lt; Value, std::string &gt; toml::detail::parse_value</definition>
        <argsstring>(location &amp;)</argsstring>
        <name>parse_value</name>
        <qualifiedname>toml::detail::parse_value</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <defname>loc</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1962" column="8" bodyfile="external/toml/parser.hpp" bodystart="1962" bodyend="1997" declfile="external/toml/parser.hpp" declline="1061" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af0db04876cc6292a9897aecc2ca0ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; typename Value::array_type, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; typename Value::array_type, region &gt;, std::string &gt; toml::detail::parse_array</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_array</name>
        <qualifiedname>toml::detail::parse_array</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1065" column="1" bodyfile="external/toml/parser.hpp" bodystart="1065" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a56a849a04dc1414af6e04adb67411bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; std::pair&lt; std::vector&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &gt;, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, Value &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; std::pair&lt; std::vector&lt; key &gt;, region &gt;, Value &gt;, std::string &gt; toml::detail::parse_key_value_pair</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_key_value_pair</name>
        <qualifiedname>toml::detail::parse_key_value_pair</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1170" column="1" bodyfile="external/toml/parser.hpp" bodystart="1170" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a99e1ae9c891bbb8e62b0d729cf54ff68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::detail::format_dotted_keys</definition>
        <argsstring>(InputIterator first, const InputIterator last)</argsstring>
        <name>format_dotted_keys</name>
        <qualifiedname>toml::detail::format_dotted_keys</qualifiedname>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const InputIterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1243" column="13" bodyfile="external/toml/parser.hpp" bodystart="1243" bodyend="1255"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aa2937fd996bb69876ef981959c05ef0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; std::vector&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &gt;, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; std::vector&lt; key &gt;, region &gt;, std::string &gt; toml::detail::parse_table_key</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_table_key</name>
        <qualifiedname>toml::detail::parse_table_key</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="2000" column="1" bodyfile="external/toml/parser.hpp" bodystart="2000" bodyend="2058" declfile="external/toml/parser.hpp" declline="1259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a05d8b73335c77794f3a67b36cb9d67eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; typename Value::table_type, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; typename Value::table_type, region &gt;, std::string &gt; toml::detail::parse_inline_table</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_inline_table</name>
        <qualifiedname>toml::detail::parse_inline_table</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1693" column="1" bodyfile="external/toml/parser.hpp" bodystart="1693" bodyend="1791" declfile="external/toml/parser.hpp" declline="1262" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a76b45d2fab6622b5fcbdd3b9aebd5a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::detail::is_valid_forward_table_definition</definition>
        <argsstring>(const Value &amp;fwd, const Value &amp;inserting, Iterator key_first, Iterator key_curr, Iterator key_last)</argsstring>
        <name>is_valid_forward_table_definition</name>
        <qualifiedname>toml::detail::is_valid_forward_table_definition</qualifiedname>
        <param>
          <type>const Value &amp;</type>
          <declname>fwd</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>inserting</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>key_first</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>key_curr</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>key_last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1288" column="6" bodyfile="external/toml/parser.hpp" bodystart="1288" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a0e42efd941fdedb92c70124d95b42dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename InputIterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; bool, std::string &gt;</type>
        <definition>result&lt; bool, std::string &gt; toml::detail::insert_nested_key</definition>
        <argsstring>(typename Value::table_type &amp;root, const Value &amp;v, InputIterator iter, const InputIterator last, region key_reg, const bool is_array_of_table=false)</argsstring>
        <name>insert_nested_key</name>
        <qualifiedname>toml::detail::insert_nested_key</qualifiedname>
        <param>
          <type>typename Value::table_type &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>iter</declname>
        </param>
        <param>
          <type>const InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref></type>
          <declname>key_reg</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>is_array_of_table</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1413" column="1" bodyfile="external/toml/parser.hpp" bodystart="1413" bodyend="1689"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af4c6d5f0914d83402a2909b35f56faa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; <ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref>, std::string &gt;</type>
        <definition>result&lt; value_t, std::string &gt; toml::detail::guess_number_type</definition>
        <argsstring>(const location &amp;l)</argsstring>
        <name>guess_number_type</name>
        <qualifiedname>toml::detail::guess_number_type</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1793" column="15" bodyfile="external/toml/parser.hpp" bodystart="1793" bodyend="1928"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aa539305e166ebaaf247d3b552b6ad1b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; <ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref>, std::string &gt;</type>
        <definition>result&lt; value_t, std::string &gt; toml::detail::guess_value_type</definition>
        <argsstring>(const location &amp;loc)</argsstring>
        <name>guess_value_type</name>
        <qualifiedname>toml::detail::guess_value_type</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1930" column="15" bodyfile="external/toml/parser.hpp" bodystart="1930" bodyend="1944"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a1f20947f2ca256727e9319b02acf18fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; Value, std::string &gt;</type>
        <definition>result&lt; Value, std::string &gt; toml::detail::parse_value_helper</definition>
        <argsstring>(result&lt; std::pair&lt; T, region &gt;, std::string &gt; rslt)</argsstring>
        <name>parse_value_helper</name>
        <qualifiedname>toml::detail::parse_value_helper</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; T, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
          <declname>rslt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="1948" column="1" bodyfile="external/toml/parser.hpp" bodystart="1948" bodyend="1959"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ac9c9a3d0c3d445410c904992154deb26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; std::pair&lt; std::vector&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &gt;, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref> &gt;, std::string &gt;</type>
        <definition>result&lt; std::pair&lt; std::vector&lt; key &gt;, region &gt;, std::string &gt; toml::detail::parse_array_table_key</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_array_table_key</name>
        <qualifiedname>toml::detail::parse_array_table_key</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="2061" column="1" bodyfile="external/toml/parser.hpp" bodystart="2061" bodyend="2115"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a5f72df760411eb26f689fc2ee33d97ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; typename Value::table_type, std::string &gt;</type>
        <definition>result&lt; typename Value::table_type, std::string &gt; toml::detail::parse_ml_table</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_ml_table</name>
        <qualifiedname>toml::detail::parse_ml_table</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="2120" column="1" bodyfile="external/toml/parser.hpp" bodystart="2120" bodyend="2201"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a9e234b43031b5e23cb8ecb38c2c0484a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; Value, std::string &gt;</type>
        <definition>result&lt; Value, std::string &gt; toml::detail::parse_toml_file</definition>
        <argsstring>(location &amp;loc)</argsstring>
        <name>parse_toml_file</name>
        <qualifiedname>toml::detail::parse_toml_file</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">location</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="2204" column="8" bodyfile="external/toml/parser.hpp" bodystart="2204" bodyend="2309"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af3e0c1dfeb7087f3a96b5a52cfc1d21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::detail::make_string</definition>
        <argsstring>(Iterator first, Iterator last)</argsstring>
        <name>make_string</name>
        <qualifiedname>toml::detail::make_string</qualifiedname>
        <param>
          <type>Iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/region.hpp" line="21" column="13" bodyfile="external/toml/region.hpp" bodystart="21" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1adc1f4df240400f0e694268d0a090122e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string toml::detail::make_string</definition>
        <argsstring>(std::size_t len, char c)</argsstring>
        <name>make_string</name>
        <qualifiedname>toml::detail::make_string</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/region.hpp" line="26" column="20" bodyfile="external/toml/region.hpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1acca1a6e00fc61468632be91a176b05aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::detail::operator==</definition>
        <argsstring>(const none_t &amp;, const none_t &amp;) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::detail::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="701" column="13" bodyfile="external/toml/result.hpp" bodystart="701" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a3537431c41937e784f86fb9eaad76ca0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::detail::operator!=</definition>
        <argsstring>(const none_t &amp;, const none_t &amp;) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::detail::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="702" column="13" bodyfile="external/toml/result.hpp" bodystart="702" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a7485f7981881219eb777858cdf664987" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::detail::operator&lt;</definition>
        <argsstring>(const none_t &amp;, const none_t &amp;) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::detail::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="703" column="8" bodyfile="external/toml/result.hpp" bodystart="703" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aa34f918cd10f91bcd2e97816cf65cf9e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::detail::operator&lt;=</definition>
        <argsstring>(const none_t &amp;, const none_t &amp;) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::detail::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="704" column="8" bodyfile="external/toml/result.hpp" bodystart="704" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a40c65a35c7312e7659f9eef2792ebf82" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::detail::operator&gt;</definition>
        <argsstring>(const none_t &amp;, const none_t &amp;) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::detail::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="705" column="13" bodyfile="external/toml/result.hpp" bodystart="705" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a963a4432d8f9d1ca8e46c0584146bec1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::detail::operator&gt;=</definition>
        <argsstring>(const none_t &amp;, const none_t &amp;) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::detail::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="706" column="13" bodyfile="external/toml/result.hpp" bodystart="706" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a498c1f69bf8f9885641b4db79720e8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traitsT</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traitsT &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traitsT &gt; &amp; toml::detail::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traitsT &gt; &amp;os, const none_t &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::detail::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traitsT &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="706" column="13" bodyfile="external/toml/result.hpp" bodystart="709" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1af16c59120242cf5708a3d4763ef84fda" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&lt; <ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref> &gt;</type>
        <definition>failure&lt; none_t &gt; toml::detail::none</definition>
        <argsstring>() noexcept</argsstring>
        <name>none</name>
        <qualifiedname>toml::detail::none</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="714" column="16" bodyfile="external/toml/result.hpp" bodystart="714" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a5324a986a4a9e40953dd971a0079a461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int toml::detail::comment_index</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;)</argsstring>
        <name>comment_index</name>
        <qualifiedname>toml::detail::comment_index</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/serializer.hpp" line="846" column="5" bodyfile="external/toml/serializer.hpp" bodystart="846" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ada573c450f0429aedaae47101e581ac8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string toml::detail::format_underline</definition>
        <argsstring>(const std::string &amp;message, const std::vector&lt; std::pair&lt; source_location, std::string &gt; &gt; &amp;loc_com, const std::vector&lt; std::string &gt; &amp;helps={}, const bool colorize=TOML11_ERROR_MESSAGE_COLORIZED)</argsstring>
        <name>format_underline</name>
        <qualifiedname>toml::detail::format_underline</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; <ref refid="structtoml_1_1source__location" kindref="compound">source_location</ref>, std::string &gt; &gt; &amp;</type>
          <declname>loc_com</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>helps</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>colorize</declname>
          <defval><ref refid="color_8hpp_1a63d2da22da25b1656684d1514d81f4dc" kindref="member">TOML11_ERROR_MESSAGE_COLORIZED</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/source_location.hpp" line="106" column="20" bodyfile="external/toml/source_location.hpp" bodystart="106" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a5d61bd97884ec716d0ef899fdbfb58df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toml::detail::try_reserve_impl</definition>
        <argsstring>(Container &amp;container, std::size_t N, std::true_type)</argsstring>
        <name>try_reserve_impl</name>
        <qualifiedname>toml::detail::try_reserve_impl</qualifiedname>
        <param>
          <type>Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>N</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="42" column="6" bodyfile="external/toml/utility.hpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a0ac875aa0263cdf9143cffca6bcfdf94" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toml::detail::try_reserve_impl</definition>
        <argsstring>(Container &amp;, std::size_t, std::false_type) noexcept</argsstring>
        <name>try_reserve_impl</name>
        <qualifiedname>toml::detail::try_reserve_impl</qualifiedname>
        <param>
          <type>Container &amp;</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="48" column="6" bodyfile="external/toml/utility.hpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ac1897d7064049a64fe8cba37fa11650f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string toml::detail::concat_to_string_impl</definition>
        <argsstring>(std::ostringstream &amp;oss)</argsstring>
        <name>concat_to_string_impl</name>
        <qualifiedname>toml::detail::concat_to_string_impl</qualifiedname>
        <param>
          <type>std::ostringstream &amp;</type>
          <declname>oss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="64" column="20" bodyfile="external/toml/utility.hpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a0d8d8d8589fcb2ecb697682ebc7b409b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::detail::concat_to_string_impl</definition>
        <argsstring>(std::ostringstream &amp;oss, T &amp;&amp;head, Ts &amp;&amp;... tail)</argsstring>
        <name>concat_to_string_impl</name>
        <qualifiedname>toml::detail::concat_to_string_impl</qualifiedname>
        <param>
          <type>std::ostringstream &amp;</type>
          <declname>oss</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>head</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="69" column="13" bodyfile="external/toml/utility.hpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a9381dda5d5adbfc55bdb38355ac9969f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;&amp;</type>
        <definition>T &amp;&amp; toml::detail::last_one</definition>
        <argsstring>(T &amp;&amp;tail) noexcept</argsstring>
        <name>last_one</name>
        <qualifiedname>toml::detail::last_one</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="135" column="3" bodyfile="external/toml/utility.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1ad1be9dc4ceeafd0a75d86489e7288a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">enable_if_t</ref>&lt;(sizeof...(Ts) &gt; 0), <ref refid="namespacetoml_1_1detail_1ad27577d7780fe6c12bcfbd24aac4505e" kindref="member">last_one_in_pack_t</ref>&lt; Ts &amp;&amp;... &gt; &gt;</type>
        <definition>enable_if_t&lt;(sizeof...(Ts) &gt; 0), last_one_in_pack_t&lt; Ts &amp;&amp;... &gt; &gt; toml::detail::last_one</definition>
        <argsstring>(T &amp;&amp;, Ts &amp;&amp;... tail)</argsstring>
        <name>last_one</name>
        <qualifiedname>toml::detail::last_one</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="141" column="1" bodyfile="external/toml/utility.hpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a18e4af33fa907452909c17e6cca24c09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1region__base" kindref="compound">region_base</ref> const *</type>
        <definition>region_base const  * toml::detail::get_region</definition>
        <argsstring>(const Value &amp;v)</argsstring>
        <name>get_region</name>
        <qualifiedname>toml::detail::get_region</qualifiedname>
        <param>
          <type>const Value &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="25" column="26" bodyfile="external/toml/value.hpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1adf0efc8a5f4d13eadb0dd29cbebecc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toml::detail::change_region</definition>
        <argsstring>(Value &amp;v, region reg)</argsstring>
        <name>change_region</name>
        <qualifiedname>toml::detail::change_region</qualifiedname>
        <param>
          <type>Value &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">region</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="31" column="6" bodyfile="external/toml/value.hpp" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1a30e75a0d1f0d08d1b978c4260c8d36fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>value_t</type>
            <declname>Expected</declname>
            <defname>Expected</defname>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toml::detail::throw_bad_cast</definition>
        <argsstring>(const std::string &amp;funcname, value_t actual, const Value &amp;v)</argsstring>
        <name>throw_bad_cast</name>
        <qualifiedname>toml::detail::throw_bad_cast</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>funcname</declname>
        </param>
        <param>
          <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
          <declname>actual</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="39" column="1" bodyfile="external/toml/value.hpp" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1detail_1aeeb2c5b93a35ab7ab068c8479e5dd54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toml::detail::throw_key_not_found_error</definition>
        <argsstring>(const Value &amp;v, const key &amp;ky)</argsstring>
        <name>throw_key_not_found_error</name>
        <qualifiedname>toml::detail::throw_key_not_found_error</qualifiedname>
        <param>
          <type>const Value &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="54" column="1" bodyfile="external/toml/value.hpp" bodystart="54" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="external/toml/combinator.hpp" line="26" column="1"/>
  </compounddef>
</doxygen>
