<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="namespacetoml" kind="namespace" language="C++">
    <compoundname>toml</compoundname>
    <innerclass refid="classtoml_1_1basic__value" prot="public">toml::basic_value</innerclass>
    <innerclass refid="structtoml_1_1discard__comments" prot="public">toml::discard_comments</innerclass>
    <innerclass refid="structtoml_1_1exception" prot="public">toml::exception</innerclass>
    <innerclass refid="structtoml_1_1failure" prot="public">toml::failure</innerclass>
    <innerclass refid="structtoml_1_1from" prot="public">toml::from</innerclass>
    <innerclass refid="structtoml_1_1internal__error" prot="public">toml::internal_error</innerclass>
    <innerclass refid="structtoml_1_1into" prot="public">toml::into</innerclass>
    <innerclass refid="structtoml_1_1local__date" prot="public">toml::local_date</innerclass>
    <innerclass refid="structtoml_1_1local__datetime" prot="public">toml::local_datetime</innerclass>
    <innerclass refid="structtoml_1_1local__time" prot="public">toml::local_time</innerclass>
    <innerclass refid="structtoml_1_1offset__datetime" prot="public">toml::offset_datetime</innerclass>
    <innerclass refid="structtoml_1_1preserve__comments" prot="public">toml::preserve_comments</innerclass>
    <innerclass refid="structtoml_1_1result" prot="public">toml::result</innerclass>
    <innerclass refid="structtoml_1_1serializer" prot="public">toml::serializer</innerclass>
    <innerclass refid="structtoml_1_1source__location" prot="public">toml::source_location</innerclass>
    <innerclass refid="structtoml_1_1string" prot="public">toml::string</innerclass>
    <innerclass refid="structtoml_1_1success" prot="public">toml::success</innerclass>
    <innerclass refid="structtoml_1_1syntax__error" prot="public">toml::syntax_error</innerclass>
    <innerclass refid="structtoml_1_1time__offset" prot="public">toml::time_offset</innerclass>
    <innerclass refid="structtoml_1_1type__error" prot="public">toml::type_error</innerclass>
    <innernamespace refid="namespacetoml_1_1color__ansi">toml::color_ansi</innernamespace>
    <innernamespace refid="namespacetoml_1_1detail">toml::detail</innernamespace>
    <innernamespace refid="namespacetoml_1_1literals" inline="yes">toml::literals</innernamespace>
    <innernamespace refid="namespacetoml_1_1literals_1_1toml__literals" inline="yes">toml::toml_literals</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>month_t</name>
        <qualifiedname>toml::month_t</qualifiedname>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5ae68564f23e0e939acea76dc3d2bc01bf" prot="public">
          <name>Jan</name>
          <initializer>=  0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5aea171d540ccd5f0669171ef06d3cd848" prot="public">
          <name>Feb</name>
          <initializer>=  1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a7ce6b2286a5396e614b8484105d277e0" prot="public">
          <name>Mar</name>
          <initializer>=  2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a6d7215c4b3bc4716d026ac46c6d9ae64" prot="public">
          <name>Apr</name>
          <initializer>=  3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a195fbb57ffe7449796d23466085ce6d8" prot="public">
          <name>May</name>
          <initializer>=  4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5aeb4b40c1221dad5b23fe7ef84d292be1" prot="public">
          <name>Jun</name>
          <initializer>=  5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5aa2866cd6efaa65c92278d4771a9eaec7" prot="public">
          <name>Jul</name>
          <initializer>=  6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a22f1a4667604b8557c9b209c201b4bc6" prot="public">
          <name>Aug</name>
          <initializer>=  7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5af04aa7019c490474fa3ce16e93501b57" prot="public">
          <name>Sep</name>
          <initializer>=  8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a594be08882c8e9d5efb9eeb62f303744" prot="public">
          <name>Oct</name>
          <initializer>=  9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5a343e6957be77c6247aa2b8d0deb68bd6" prot="public">
          <name>Nov</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a89509f5839cddbb6cc3205611e198ca5ad207b4e0bce42a8f1555ce3a05e287f6" prot="public">
          <name>Dec</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="70" column="1" bodyfile="external/toml/datetime.hpp" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>string_t</name>
        <qualifiedname>toml::string_t</qualifiedname>
        <enumvalue id="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" prot="public">
          <name>basic</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf0d674f1e0ed4292267f149c5983db02" prot="public">
          <name>literal</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="23" column="1" bodyfile="external/toml/string.hpp" bodystart="24" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" prot="public" static="no" strong="yes">
        <type>std::uint8_t</type>
        <name>value_t</name>
        <qualifiedname>toml::value_t</qualifiedname>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaaa2e4822a98337283e39f7b60acf85ec9" prot="public">
          <name>empty</name>
          <initializer>=  0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaa84e2c64f38f78ba3ea5c905ab5a2da27" prot="public">
          <name>boolean</name>
          <initializer>=  1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaa157db7df530023575515d366c9b672e8" prot="public">
          <name>integer</name>
          <initializer>=  2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaa374515b23d6f106696387776a6077d17" prot="public">
          <name>floating</name>
          <initializer>=  3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaab45cffe084dd3d20d928bee85e7b0f21" prot="public">
          <name>string</name>
          <initializer>=  4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaa3453afefc0169f713370ff6bea1dc9a5" prot="public">
          <name>offset_datetime</name>
          <initializer>=  5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaa4786c634d28e7c1aa109efdd9e11ba32" prot="public">
          <name>local_datetime</name>
          <initializer>=  6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaaa9647613bc34fa481cf7bfd71e46511f" prot="public">
          <name>local_date</name>
          <initializer>=  7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaad118bc9b5fdddd0a0c91b99a41bb9501" prot="public">
          <name>local_time</name>
          <initializer>=  8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaaf1f713c9e000f5d3f280adbd124df4f5" prot="public">
          <name>array</name>
          <initializer>=  9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaaaaab9e1de16f38176f86d7a92ba337a8d" prot="public">
          <name>table</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="60" column="1" bodyfile="external/toml/types.hpp" bodystart="61" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacetoml_1a8f6621cf10ba95c9069e3b248eb9c01d" prot="public" static="no">
        <type>char</type>
        <definition>using toml::character = typedef char</definition>
        <argsstring></argsstring>
        <name>character</name>
        <qualifiedname>toml::character</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="21" column="1" bodyfile="external/toml/types.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" prot="public" static="no">
        <type>std::string</type>
        <definition>using toml::key = typedef std::string</definition>
        <argsstring></argsstring>
        <name>key</name>
        <qualifiedname>toml::key</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="22" column="1" bodyfile="external/toml/types.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1a536c45fdc142655af40475187d5a6702" prot="public" static="no">
        <type>bool</type>
        <definition>using toml::boolean = typedef bool</definition>
        <argsstring></argsstring>
        <name>boolean</name>
        <qualifiedname>toml::boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="29" column="1" bodyfile="external/toml/types.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" prot="public" static="no">
        <type>std::int64_t</type>
        <definition>using toml::integer = typedef std::int64_t</definition>
        <argsstring></argsstring>
        <name>integer</name>
        <qualifiedname>toml::integer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="30" column="1" bodyfile="external/toml/types.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" prot="public" static="no">
        <type>double</type>
        <definition>using toml::floating = typedef double</definition>
        <argsstring></argsstring>
        <name>floating</name>
        <qualifiedname>toml::floating</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="31" column="1" bodyfile="external/toml/types.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1a34e466167cc683c477838accdebb2578" prot="public" static="no">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; <ref refid="comments_8hpp_1ac5952aa66c2a24cfdbb3d82f70f22618" kindref="member">TOML11_DEFAULT_COMMENT_STRATEGY</ref>, std::unordered_map, std::vector &gt;</type>
        <definition>using toml::value = typedef basic_value&lt;TOML11_DEFAULT_COMMENT_STRATEGY, std::unordered_map, std::vector&gt;</definition>
        <argsstring></argsstring>
        <name>value</name>
        <qualifiedname>toml::value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1754" column="1" bodyfile="external/toml/value.hpp" bodystart="1754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1a4db748c68f34deac79e0b45535cfb3b6" prot="public" static="no">
        <type>typename <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">value::array_type</ref></type>
        <definition>using toml::array = typedef typename value::array_type</definition>
        <argsstring></argsstring>
        <name>array</name>
        <qualifiedname>toml::array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1755" column="1" bodyfile="external/toml/value.hpp" bodystart="1755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacetoml_1af7d788a576baa570efd4793cd5df8ac7" prot="public" static="no">
        <type>typename <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">value::table_type</ref></type>
        <definition>using toml::table = typedef typename value::table_type</definition>
        <argsstring></argsstring>
        <name>table</name>
        <qualifiedname>toml::table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1756" column="1" bodyfile="external/toml/value.hpp" bodystart="1756" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacetoml_1a31abd17e078e497fb224d79260910b8d" prot="public" static="no" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>decltype(::toml::get&lt; T &gt;(std::declval&lt; <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; const &amp; &gt;()))</type>
        <definition>decltype(::toml::get&lt; T &gt;(std::declval&lt; basic_value&lt; C, M, V &gt; const &amp; &gt;())) toml::find</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const key &amp;ky)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="553" column="1" bodyfile="external/toml/get.hpp" bodystart="553" bodyend="561"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const preserve_comments &amp;lhs, const preserve_comments &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="236" column="13" bodyfile="external/toml/comments.hpp" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const preserve_comments &amp;lhs, const preserve_comments &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="237" column="13" bodyfile="external/toml/comments.hpp" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const preserve_comments &amp;lhs, const preserve_comments &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="238" column="8" bodyfile="external/toml/comments.hpp" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const preserve_comments &amp;lhs, const preserve_comments &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="239" column="8" bodyfile="external/toml/comments.hpp" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const preserve_comments &amp;lhs, const preserve_comments &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="240" column="13" bodyfile="external/toml/comments.hpp" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const preserve_comments &amp;lhs, const preserve_comments &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="241" column="13" bodyfile="external/toml/comments.hpp" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9a68dfa1ac6b1762835738786dbb3cf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void toml::swap</definition>
        <argsstring>(preserve_comments &amp;lhs, preserve_comments &amp;rhs)</argsstring>
        <name>swap</name>
        <qualifiedname>toml::swap</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="243" column="13" bodyfile="external/toml/comments.hpp" bodystart="243" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a75f1fb7e4dc9820a681191b35a20be70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void toml::swap</definition>
        <argsstring>(preserve_comments &amp;lhs, std::vector&lt; std::string &gt; &amp;rhs)</argsstring>
        <name>swap</name>
        <qualifiedname>toml::swap</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="248" column="13" bodyfile="external/toml/comments.hpp" bodystart="248" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab2a823f99de157cdbe0e0c9f2066d698" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void toml::swap</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;lhs, preserve_comments &amp;rhs)</argsstring>
        <name>swap</name>
        <qualifiedname>toml::swap</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="253" column="13" bodyfile="external/toml/comments.hpp" bodystart="253" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a11b17eff44b8e4b0b49c85cc34e241c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const preserve_comments &amp;com)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1preserve__comments" kindref="compound">preserve_comments</ref> &amp;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="253" column="13" bodyfile="external/toml/comments.hpp" bodystart="261" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1adb529196c2e96a3fb9e7e3312e8c3bd6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const discard_comments &amp;, const discard_comments &amp;) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="455" column="13" bodyfile="external/toml/comments.hpp" bodystart="455" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a8e072d28431579b3e29c5ea7540b1739" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const discard_comments &amp;, const discard_comments &amp;) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="456" column="13" bodyfile="external/toml/comments.hpp" bodystart="456" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1acff0600d173e48338f29640944373ec7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const discard_comments &amp;, const discard_comments &amp;) noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="457" column="8" bodyfile="external/toml/comments.hpp" bodystart="457" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aa055e6672bbd43f0c55490ea790aee05" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const discard_comments &amp;, const discard_comments &amp;) noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="458" column="8" bodyfile="external/toml/comments.hpp" bodystart="458" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abaa21c973a2dc580e1206ffe5df5ed3f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const discard_comments &amp;, const discard_comments &amp;) noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="459" column="13" bodyfile="external/toml/comments.hpp" bodystart="459" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a3b93e814b03bda1169fe6654e4ba392f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const discard_comments &amp;, const discard_comments &amp;) noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="460" column="13" bodyfile="external/toml/comments.hpp" bodystart="460" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ad86e656769a111b71dfcd2ce05e1a918" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void toml::swap</definition>
        <argsstring>(const discard_comments &amp;, const discard_comments &amp;) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>toml::swap</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="462" column="13" bodyfile="external/toml/comments.hpp" bodystart="462" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a440be2d49eb0d5d2cf3bd87b65e19e5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const discard_comments &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1discard__comments" kindref="compound">discard_comments</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/comments.hpp" line="462" column="13" bodyfile="external/toml/comments.hpp" bodystart="466" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af35aae2bad0915a002d755034d26ab3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const local_date &amp;lhs, const local_date &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="145" column="13" bodyfile="external/toml/datetime.hpp" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aab37e29caecefebb2ac530538dbc4bb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const local_date &amp;lhs, const local_date &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="150" column="13" bodyfile="external/toml/datetime.hpp" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac367edbc5bd982fe5c635d88da0a3647" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const local_date &amp;lhs, const local_date &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="154" column="8" bodyfile="external/toml/datetime.hpp" bodystart="154" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a90f46905b91f75df91574bc674c51213" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const local_date &amp;lhs, const local_date &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="159" column="8" bodyfile="external/toml/datetime.hpp" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af1136c79cfbb2f44cf90798c33a8bf83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const local_date &amp;lhs, const local_date &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="163" column="13" bodyfile="external/toml/datetime.hpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a13821d9523fdb85bf3647fbd1e0f41c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const local_date &amp;lhs, const local_date &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="167" column="13" bodyfile="external/toml/datetime.hpp" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abac12305b9b16c45e5ca53f15247f76d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const local_date &amp;date)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="167" column="13" bodyfile="external/toml/datetime.hpp" bodystart="174" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1adae6a0bfa82af7af9c68ee486a504147" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const local_time &amp;lhs, const local_time &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="248" column="13" bodyfile="external/toml/datetime.hpp" bodystart="248" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab3f5d6ed91a0a09fd3f7f90c2e5ce517" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const local_time &amp;lhs, const local_time &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="253" column="13" bodyfile="external/toml/datetime.hpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a8ac4788635f0adc24fd6673ff7a8789d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const local_time &amp;lhs, const local_time &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="257" column="8" bodyfile="external/toml/datetime.hpp" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab9b601bc4aafc95aaaa6438245709f14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const local_time &amp;lhs, const local_time &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="262" column="8" bodyfile="external/toml/datetime.hpp" bodystart="262" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ae6f2283748b662e7bb9a988cc9aeb7cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const local_time &amp;lhs, const local_time &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="266" column="13" bodyfile="external/toml/datetime.hpp" bodystart="266" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a7e2a4487347ebc69c2c3322b40543f33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const local_time &amp;lhs, const local_time &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="270" column="13" bodyfile="external/toml/datetime.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a787a45161dd461b59e72243c8c1ef0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const local_time &amp;time)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="270" column="13" bodyfile="external/toml/datetime.hpp" bodystart="277" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a13c8f4bf5481e5c33c4e60fc9d92976a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const time_offset &amp;lhs, const time_offset &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="322" column="13" bodyfile="external/toml/datetime.hpp" bodystart="322" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a8fe05e18b90d71d6cb891403c211ea46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const time_offset &amp;lhs, const time_offset &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="327" column="13" bodyfile="external/toml/datetime.hpp" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a535023506bd5bd80e79e222958d94b8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const time_offset &amp;lhs, const time_offset &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="331" column="8" bodyfile="external/toml/datetime.hpp" bodystart="331" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1acf9d108f54a091e71ac1439d76741eb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const time_offset &amp;lhs, const time_offset &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="336" column="8" bodyfile="external/toml/datetime.hpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac6cedd38d7f06988d0e842452da992ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const time_offset &amp;lhs, const time_offset &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="340" column="13" bodyfile="external/toml/datetime.hpp" bodystart="340" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abb69d418f33987de7e9d656c361418b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const time_offset &amp;lhs, const time_offset &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="344" column="13" bodyfile="external/toml/datetime.hpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a63d2db02e66e87fe0ae89f0680eba6bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const time_offset &amp;offset)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1time__offset" kindref="compound">time_offset</ref> &amp;</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="344" column="13" bodyfile="external/toml/datetime.hpp" bodystart="351" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a571d28a85f4c58a55a5b2476c4b40f02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const local_datetime &amp;lhs, const local_datetime &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="444" column="13" bodyfile="external/toml/datetime.hpp" bodystart="444" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a2d132d819828088bbf8ffd0be058abf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const local_datetime &amp;lhs, const local_datetime &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="449" column="13" bodyfile="external/toml/datetime.hpp" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9a9873847f70650c75b8377d904d9a6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const local_datetime &amp;lhs, const local_datetime &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="453" column="8" bodyfile="external/toml/datetime.hpp" bodystart="453" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abec28df936eb43c4d486fd64ebae25e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const local_datetime &amp;lhs, const local_datetime &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="458" column="8" bodyfile="external/toml/datetime.hpp" bodystart="458" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1add5891928f2a7d03cb0df52c6c2431fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const local_datetime &amp;lhs, const local_datetime &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="462" column="13" bodyfile="external/toml/datetime.hpp" bodystart="462" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af0314c5d45d871dce612f6e48ab66167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const local_datetime &amp;lhs, const local_datetime &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="466" column="13" bodyfile="external/toml/datetime.hpp" bodystart="466" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1afc60c5ee53512fca9140f06e407d9af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const local_datetime &amp;dt)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="466" column="13" bodyfile="external/toml/datetime.hpp" bodystart="473" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a80acff1c40bfb3b925e67572ff08836c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const offset_datetime &amp;lhs, const offset_datetime &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="595" column="13" bodyfile="external/toml/datetime.hpp" bodystart="595" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a07ccf5c55fcebe7a98dfa832d22eebd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const offset_datetime &amp;lhs, const offset_datetime &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="600" column="13" bodyfile="external/toml/datetime.hpp" bodystart="600" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9b122489594d7f6293f1cd205658756d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const offset_datetime &amp;lhs, const offset_datetime &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="604" column="8" bodyfile="external/toml/datetime.hpp" bodystart="604" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac2df538a92d25d6a049ca3a86e7c7561" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const offset_datetime &amp;lhs, const offset_datetime &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="609" column="8" bodyfile="external/toml/datetime.hpp" bodystart="609" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a0f1036b4702599b81fb073090c84defd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const offset_datetime &amp;lhs, const offset_datetime &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="613" column="13" bodyfile="external/toml/datetime.hpp" bodystart="613" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1affcae1b8954912d87736508bcef9bcff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const offset_datetime &amp;lhs, const offset_datetime &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="617" column="13" bodyfile="external/toml/datetime.hpp" bodystart="617" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abd10c0a7b1fb382b0d4b355177e3d978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const offset_datetime &amp;dt)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/datetime.hpp" line="617" column="13" bodyfile="external/toml/datetime.hpp" bodystart="624" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a2e4b27fae0d9dc6b824e77b12112f313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; &amp;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; &amp; toml::get</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="20" column="1" bodyfile="external/toml/get.hpp" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ad4cf0aabc6151d86a55f9961c8af8401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; const &amp;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; const  &amp; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="28" column="1" bodyfile="external/toml/get.hpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a989e56af2b30adcdd248621a4a9b1a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="36" column="1" bodyfile="external/toml/get.hpp" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a786250bd7babba1948976732c51c6b81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; &amp; toml::get</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="47" column="1" bodyfile="external/toml/get.hpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a3e185035e8f2ab69a5d440a4aaf2969c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; const &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; const  &amp; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="55" column="1" bodyfile="external/toml/get.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a2507fecad69911d76353aa93246eb522" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="63" column="1" bodyfile="external/toml/get.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac293b2bf8f667bc9067b331c69ddc873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">detail::is_basic_value</ref>&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::is_basic_value&lt; T &gt;, detail::negation&lt; std::is_same&lt; T, basic_value&lt; C, M, V &gt; &gt; &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="76" column="1" bodyfile="external/toml/get.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a3c8a49c51cac201ed7e4f48e8cb04959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; std::is_integral&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, bool &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; std::is_integral&lt; T &gt;, detail::negation&lt; std::is_same&lt; T, bool &gt; &gt;, detail::negation&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt; &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="92" column="1" bodyfile="external/toml/get.hpp" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9bac8bbf4a0c5bc6bf7c99435615bdf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; std::is_floating_point&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; std::is_floating_point&lt; T &gt;, detail::negation&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt; &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="107" column="1" bodyfile="external/toml/get.hpp" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1afb591e6dea05e661f52f42f9becb8ca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt; &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, std::string &gt;::value, std::string &gt; &amp; toml::get</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="119" column="1" bodyfile="external/toml/get.hpp" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a4ffa4465e68d373d9cf5674f6f3796e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt; const &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, std::string &gt;::value, std::string &gt; const  &amp; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="127" column="1" bodyfile="external/toml/get.hpp" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a243231571ef463242860d778ece5df22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, std::string &gt;::value, std::string &gt; toml::get</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="135" column="1" bodyfile="external/toml/get.hpp" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9eba384204ba88c885ba78f190e597ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__chrono__duration" kindref="compound">detail::is_chrono_duration</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_chrono_duration&lt; T &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="159" column="1" bodyfile="external/toml/get.hpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ae3fca75622011b715337332629c981ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; std::chrono::system_clock::time_point, T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; std::chrono::system_clock::time_point, T &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="172" column="1" bodyfile="external/toml/get.hpp" bodystart="172" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af0cc01c108aec88344680eb65b44e960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">detail::is_container</ref>&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1has__push__back__method" kindref="compound">detail::has_push_back_method</ref>&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::is_container&lt; T &gt;, detail::has_push_back_method&lt; T &gt;, detail::negation&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt; &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="286" column="1" bodyfile="external/toml/get.hpp" bodystart="286" bodyend="299" declfile="external/toml/get.hpp" declline="210" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aee3e3b3d3eb31f0dc6245a8327653660" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">detail::is_container</ref>&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1has__push__back__method" kindref="compound">detail::has_push_back_method</ref>&lt; T &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1has__specialized__from" kindref="compound">detail::has_specialized_from</ref>&lt; T &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::is_container&lt; T &gt;, detail::negation&lt; detail::has_push_back_method&lt; T &gt; &gt;, detail::negation&lt; detail::has_specialized_from&lt; T &gt; &gt;, detail::negation&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt; &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="332" column="1" bodyfile="external/toml/get.hpp" bodystart="332" bodyend="351" declfile="external/toml/get.hpp" declline="222" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aa0df34dae6aa7a4a11cfb1947d8ddb5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__std__pair" kindref="compound">detail::is_std_pair</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_std_pair&lt; T &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="359" column="1" bodyfile="external/toml/get.hpp" bodystart="359" bodyend="373" declfile="external/toml/get.hpp" declline="228" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a29b9f4101e99205196c82f4e730834e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__std__tuple" kindref="compound">detail::is_std_tuple</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_std_tuple&lt; T &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="391" column="1" bodyfile="external/toml/get.hpp" bodystart="391" bodyend="403" declfile="external/toml/get.hpp" declline="234" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abcbebb2ff72de8c58b583b166d7a95b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">detail::is_map</ref>&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::is_map&lt; T &gt;, detail::negation&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt; &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="415" column="1" bodyfile="external/toml/get.hpp" bodystart="415" bodyend="428" declfile="external/toml/get.hpp" declline="244" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abef8b9991456ebfde59a8dede286381f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt;, <ref refid="structtoml_1_1detail_1_1has__from__toml__method" kindref="compound">detail::has_from_toml_method</ref>&lt; T, C, M, V &gt;, std::is_default_constructible&lt; T &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::negation&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt; &gt;, detail::has_from_toml_method&lt; T, C, M, V &gt;, std::is_default_constructible&lt; T &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="441" column="1" bodyfile="external/toml/get.hpp" bodystart="441" bodyend="446" declfile="external/toml/get.hpp" declline="255" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab8a821e13ec13374c93121d4bcb7b905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1has__specialized__from" kindref="compound">detail::has_specialized_from</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::has_specialized_from&lt; T &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="450" column="1" bodyfile="external/toml/get.hpp" bodystart="450" bodyend="453" declfile="external/toml/get.hpp" declline="261" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9d037a90a8e081bed62df5ca627d02ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">detail::is_basic_value</ref>&lt; T &gt; &gt;, std::is_constructible&lt; T, const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1has__from__toml__method" kindref="compound">detail::has_from_toml_method</ref>&lt; T, C, M, V &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1has__specialized__from" kindref="compound">detail::has_specialized_from</ref>&lt; T &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::negation&lt; detail::is_basic_value&lt; T &gt; &gt;, std::is_constructible&lt; T, const basic_value&lt; C, M, V &gt; &amp; &gt;, detail::negation&lt; detail::has_from_toml_method&lt; T, C, M, V &gt; &gt;, detail::negation&lt; detail::has_specialized_from&lt; T &gt; &gt; &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="463" column="1" bodyfile="external/toml/get.hpp" bodystart="463" bodyend="466" declfile="external/toml/get.hpp" declline="273" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a0178f381bdc520b67d66d37548771b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__std__forward__list" kindref="compound">detail::is_std_forward_list</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_std_forward_list&lt; T &gt;::value, T &gt; toml::get</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>get</name>
        <qualifiedname>toml::get</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="308" column="1" bodyfile="external/toml/get.hpp" bodystart="308" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a3c294619df763838622f55f8d0bab275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; const &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; const  &amp; toml::find</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const key &amp;ky)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="475" column="19" bodyfile="external/toml/get.hpp" bodystart="475" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a57daf4370cfd8c90e4354a67c4391abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; &amp; toml::find</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, const key &amp;ky)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="486" column="13" bodyfile="external/toml/get.hpp" bodystart="486" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a30a1ca648afb042d6ba0831910d85e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt;</type>
        <definition>basic_value&lt; C, M, V &gt; toml::find</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, const key &amp;ky)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="497" column="13" bodyfile="external/toml/get.hpp" bodystart="497" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab1954c060b780114811ab1da388c3e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; const &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; const  &amp; toml::find</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const std::size_t idx)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="512" column="1" bodyfile="external/toml/get.hpp" bodystart="512" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a26f69885639420ef31ef10e486f3caaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; &amp; toml::find</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, const std::size_t idx)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="524" column="13" bodyfile="external/toml/get.hpp" bodystart="524" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a24f09b8264fee895e6a5feca2c8a4477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt;</type>
        <definition>basic_value&lt; C, M, V &gt; toml::find</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, const std::size_t idx)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="536" column="13" bodyfile="external/toml/get.hpp" bodystart="536" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af3c0c34f5507c422247af7d089d41bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>typename Key1</type>
          </param>
          <param>
            <type>typename Key2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Keys</declname>
            <defname>Keys</defname>
          </param>
        </templateparamlist>
        <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        <definition>const basic_value&lt; C, M, V &gt; &amp; toml::find</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, Key1 &amp;&amp;k1, Key2 &amp;&amp;k2, Keys &amp;&amp;... keys)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Key1 &amp;&amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Key2 &amp;&amp;</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>Keys &amp;&amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="679" column="1" bodyfile="external/toml/get.hpp" bodystart="679" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af20a927273ab3d6c4b270f0ea9067e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>typename Key1</type>
          </param>
          <param>
            <type>typename Key2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Keys</declname>
            <defname>Keys</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; &amp; toml::find</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, Key1 &amp;&amp;k1, Key2 &amp;&amp;k2, Keys &amp;&amp;... keys)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Key1 &amp;&amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Key2 &amp;&amp;</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>Keys &amp;&amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="688" column="1" bodyfile="external/toml/get.hpp" bodystart="688" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1acf855f0adf051797079a57130604f628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
          <param>
            <type>typename Key1</type>
          </param>
          <param>
            <type>typename Key2</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Keys</declname>
            <defname>Keys</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt;</type>
        <definition>basic_value&lt; C, M, V &gt; toml::find</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, Key1 &amp;&amp;k1, Key2 &amp;&amp;k2, Keys &amp;&amp;... keys)</argsstring>
        <name>find</name>
        <qualifiedname>toml::find</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Key1 &amp;&amp;</type>
          <declname>k1</declname>
        </param>
        <param>
          <type>Key2 &amp;&amp;</type>
          <declname>k2</declname>
        </param>
        <param>
          <type>Keys &amp;&amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="697" column="1" bodyfile="external/toml/get.hpp" bodystart="697" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aee831fac191301c5d2821d231881fb5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; const &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; const  &amp; toml::get_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="737" column="1" bodyfile="external/toml/get.hpp" bodystart="737" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a1d885346ca0b949a7cf0b1db758df3b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; &amp; toml::get_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, basic_value&lt; C, M, V &gt; &amp;)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="744" column="1" bodyfile="external/toml/get.hpp" bodystart="744" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ad2f02e282c74dbe85633195bcbeb12fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt;</type>
        <definition>basic_value&lt; C, M, V &gt; toml::get_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, basic_value&lt; C, M, V &gt; &amp;&amp;)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="751" column="1" bodyfile="external/toml/get.hpp" bodystart="751" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1afacd7cc578e3096def891b08b528ba4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; const &amp;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; const  &amp; toml::get_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const T &amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="763" column="1" bodyfile="external/toml/get.hpp" bodystart="763" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ae36ea4e5ddfb2c21fbae483c9fbea6c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; &amp;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; &amp; toml::get_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, T &amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="778" column="1" bodyfile="external/toml/get.hpp" bodystart="778" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a50d35e799ef030f68fa55752e1529b65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt;, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt; &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; detail::remove_cvref_t&lt; T &gt;, basic_value&lt; C, M, V &gt; &gt;::value, detail::remove_cvref_t&lt; T &gt; &gt; toml::get_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, T &amp;&amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="793" column="1" bodyfile="external/toml/get.hpp" bodystart="793" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9fb4cd871c358e0e89054107a67c3a9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt;, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt; const &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; detail::remove_cvref_t&lt; T &gt;, std::string &gt;::value, std::string &gt; const  &amp; toml::get_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const T &amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="812" column="1" bodyfile="external/toml/get.hpp" bodystart="812" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aac8e620fd3e66be36a2824c9b52dcc0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt; &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, std::string &gt;::value, std::string &gt; &amp; toml::get_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, T &amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="826" column="1" bodyfile="external/toml/get.hpp" bodystart="826" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ad9698c78ddd0589b54b897d8608cd21e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt;, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; detail::remove_cvref_t&lt; T &gt;, std::string &gt;::value, std::string &gt; toml::get_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, T &amp;&amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="841" column="1" bodyfile="external/toml/get.hpp" bodystart="841" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a7869ca35179f064c2195076544b3b96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__string__literal" kindref="compound">detail::is_string_literal</ref>&lt; typename std::remove_reference&lt; T &gt;::type &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_string_literal&lt; typename std::remove_reference&lt; T &gt;::type &gt;::value, std::string &gt; toml::get_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, T &amp;&amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="860" column="1" bodyfile="external/toml/get.hpp" bodystart="860" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a386281b6a2b481fde83769796beccd16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt;, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; std::string, <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt; &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__string__literal" kindref="compound">detail::is_string_literal</ref>&lt; typename std::remove_reference&lt; T &gt;::type &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt; &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::negation&lt; detail::is_exact_toml_type&lt; detail::remove_cvref_t&lt; T &gt;, basic_value&lt; C, M, V &gt; &gt; &gt;, detail::negation&lt; std::is_same&lt; std::string, detail::remove_cvref_t&lt; T &gt; &gt; &gt;, detail::negation&lt; detail::is_string_literal&lt; typename std::remove_reference&lt; T &gt;::type &gt; &gt; &gt;::value, detail::remove_cvref_t&lt; T &gt; &gt; toml::get_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, T &amp;&amp;opt)</argsstring>
        <name>get_or</name>
        <qualifiedname>toml::get_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="884" column="1" bodyfile="external/toml/get.hpp" bodystart="884" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a34fb7cea6c5ed3988dd2d3944bfd6b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; const &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; const  &amp; toml::find_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const key &amp;ky, const basic_value&lt; C, M, V &gt; &amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="902" column="1" bodyfile="external/toml/get.hpp" bodystart="902" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9f06b255c9a103b100d9cf14d3131257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
        <definition>basic_value&lt; C, M, V &gt; &amp; toml::find_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, const toml::key &amp;ky, basic_value&lt; C, M, V &gt; &amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="914" column="1" bodyfile="external/toml/get.hpp" bodystart="914" bodyend="920"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a4c93db3c4b16b3f2b42c2cd82b882083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt;</type>
        <definition>basic_value&lt; C, M, V &gt; toml::find_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, const toml::key &amp;ky, basic_value&lt; C, M, V &gt; &amp;&amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="925" column="1" bodyfile="external/toml/get.hpp" bodystart="925" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ae34c8f79d2e88bcb39be9e90cf055357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; const &amp;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; const  &amp; toml::find_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const key &amp;ky, const T &amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="939" column="1" bodyfile="external/toml/get.hpp" bodystart="939" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac5860e02c6a476e5c04a4b36ecd1b1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, T &gt; &amp;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, T &gt; &amp; toml::find_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, const toml::key &amp;ky, T &amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="951" column="1" bodyfile="external/toml/get.hpp" bodystart="951" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aacd5809ef81c57540e113e43c0c2579b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt; &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_exact_toml_type&lt; T, basic_value&lt; C, M, V &gt; &gt;::value, detail::remove_cvref_t&lt; T &gt; &gt; toml::find_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, const toml::key &amp;ky, T &amp;&amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="964" column="1" bodyfile="external/toml/get.hpp" bodystart="964" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abbb32281594436244c5651bec4530c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt; const &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, std::string &gt;::value, std::string &gt; const  &amp; toml::find_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const key &amp;ky, const T &amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="978" column="1" bodyfile="external/toml/get.hpp" bodystart="978" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a5e892647ff31ca9ef13960e1e231dd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt; &amp;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, std::string &gt;::value, std::string &gt; &amp; toml::find_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;v, const toml::key &amp;ky, T &amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="988" column="1" bodyfile="external/toml/get.hpp" bodystart="988" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a38b0517d3598ba4c326f3ce08c5d11c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; std::is_same&lt; T, std::string &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt;</type>
        <definition>detail::enable_if_t&lt; std::is_same&lt; T, std::string &gt;::value, std::string &gt; toml::find_or</definition>
        <argsstring>(basic_value&lt; C, M, V &gt; &amp;&amp;v, const toml::key &amp;ky, T &amp;&amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="998" column="1" bodyfile="external/toml/get.hpp" bodystart="998" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a9ff07b39606121da2f748ab9dd4f12d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__string__literal" kindref="compound">detail::is_string_literal</ref>&lt; typename std::remove_reference&lt; T &gt;::type &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::string &gt;</type>
        <definition>detail::enable_if_t&lt; detail::is_string_literal&lt; typename std::remove_reference&lt; T &gt;::type &gt;::value, std::string &gt; toml::find_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const toml::key &amp;ky, T &amp;&amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="1013" column="1" bodyfile="external/toml/get.hpp" bodystart="1013" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a98bb90cdc1f8d715b958e772c4f18700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">detail::enable_if_t</ref>&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt;, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; std::string, <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt; &gt; &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__string__literal" kindref="compound">detail::is_string_literal</ref>&lt; typename std::remove_reference&lt; T &gt;::type &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, <ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">detail::remove_cvref_t</ref>&lt; T &gt; &gt;</type>
        <definition>detail::enable_if_t&lt; detail::conjunction&lt; detail::negation&lt; detail::is_exact_toml_type&lt; detail::remove_cvref_t&lt; T &gt;, basic_value&lt; C, M, V &gt; &gt; &gt;, detail::negation&lt; std::is_same&lt; std::string, detail::remove_cvref_t&lt; T &gt; &gt; &gt;, detail::negation&lt; detail::is_string_literal&lt; typename std::remove_reference&lt; T &gt;::type &gt; &gt; &gt;::value, detail::remove_cvref_t&lt; T &gt; &gt; toml::find_or</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const toml::key &amp;ky, T &amp;&amp;opt)</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="1035" column="1" bodyfile="external/toml/get.hpp" bodystart="1035" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1acf4a80d2e36cd2bfe2b78ead81c34c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ks</declname>
            <defname>Ks</defname>
          </param>
          <param>
            <type>typename detail::enable_if_t&lt;(sizeof...(Ks) &gt; 1), std::nullptr_t &gt;</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto toml::find_or</definition>
        <argsstring>(Value &amp;&amp;v, const toml::key &amp;ky, Ks &amp;&amp;... keys) -&gt; decltype(find_or(std::forward&lt; Value &gt;(v), ky, detail::last_one(std::forward&lt; Ks &gt;(keys)...)))</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type>Value &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>Ks &amp;&amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="1050" column="6" bodyfile="external/toml/get.hpp" bodystart="1050" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac1041238bb8c4958d4e9fc3fd9cc3e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ks</declname>
            <defname>Ks</defname>
          </param>
          <param>
            <type>typename detail::enable_if_t&lt;(sizeof...(Ks) &gt; 1), std::nullptr_t &gt;</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto toml::find_or</definition>
        <argsstring>(Value &amp;&amp;v, const toml::key &amp;ky, Ks &amp;&amp;... keys) -&gt; decltype(find_or&lt; T &gt;(std::forward&lt; Value &gt;(v), ky, detail::last_one(std::forward&lt; Ks &gt;(keys)...)))</argsstring>
        <name>find_or</name>
        <qualifiedname>toml::find_or</qualifiedname>
        <param>
          <type>Value &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>ky</declname>
        </param>
        <param>
          <type>Ks &amp;&amp;...</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="1072" column="6" bodyfile="external/toml/get.hpp" bodystart="1072" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a303d95485a58e3396a677b8e852b6481" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; T, std::string &gt;</type>
        <definition>result&lt; T, std::string &gt; toml::expect</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v) noexcept</argsstring>
        <name>expect</name>
        <qualifiedname>toml::expect</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="1092" column="8" bodyfile="external/toml/get.hpp" bodystart="1092" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a09489518c2b4f07d78dbee504f905e38" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; T, std::string &gt;</type>
        <definition>result&lt; T, std::string &gt; toml::expect</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, const toml::key &amp;k) noexcept</argsstring>
        <name>expect</name>
        <qualifiedname>toml::expect</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">toml::key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/get.hpp" line="1106" column="1" bodyfile="external/toml/get.hpp" bodystart="1106" bodyend="1116"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1literals_1_1toml__literals_1a1fce2e7bf1c3e9c72746c794fba65eba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>inline <ref refid="classtoml_1_1basic__value" kindref="compound">::toml::basic_value</ref>&lt; <ref refid="comments_8hpp_1ac5952aa66c2a24cfdbb3d82f70f22618" kindref="member">TOML11_DEFAULT_COMMENT_STRATEGY</ref>, std::unordered_map, std::vector &gt;</type>
        <definition>inline ::toml::basic_value&lt; TOML11_DEFAULT_COMMENT_STRATEGY, std::unordered_map, std::vector &gt; toml::literals::toml_literals::literal_internal_impl</definition>
        <argsstring>(::toml::detail::location loc)</argsstring>
        <name>literal_internal_impl</name>
        <qualifiedname>toml::literals::toml_literals::literal_internal_impl</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1location" kindref="compound">::toml::detail::location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/literal.hpp" line="16" column="1" bodyfile="external/toml/literal.hpp" bodystart="16" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1_1literals_1_1toml__literals_1a20a98173d1553ae30b2f0d51029186b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>inline <ref refid="classtoml_1_1basic__value" kindref="compound">::toml::basic_value</ref>&lt; <ref refid="comments_8hpp_1ac5952aa66c2a24cfdbb3d82f70f22618" kindref="member">TOML11_DEFAULT_COMMENT_STRATEGY</ref>, std::unordered_map, std::vector &gt;</type>
        <definition>inline ::toml::basic_value&lt; TOML11_DEFAULT_COMMENT_STRATEGY, std::unordered_map, std::vector &gt; toml::literals::toml_literals::operator&quot;&quot;_toml</definition>
        <argsstring>(const char *str, std::size_t len)</argsstring>
        <name>operator&quot;&quot;_toml</name>
        <qualifiedname>toml::literals::toml_literals::operator&quot;&quot;_toml</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/literal.hpp" line="85" column="1" bodyfile="external/toml/literal.hpp" bodystart="85" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aad36cfb12076c9628033eeaab7492942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Comment</type>
            <defval><ref refid="comments_8hpp_1ac5952aa66c2a24cfdbb3d82f70f22618" kindref="member">TOML11_DEFAULT_COMMENT_STRATEGY</ref></defval>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>Table</declname>
            <defname>Table</defname>
            <defval>std::unordered_map</defval>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>Array</declname>
            <defname>Array</defname>
            <defval>std::vector</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; Comment, Table, Array &gt;</type>
        <definition>basic_value&lt; Comment, Table, Array &gt; toml::parse</definition>
        <argsstring>(std::istream &amp;is, const std::string &amp;fname=&quot;unknown file&quot;)</argsstring>
        <name>parse</name>
        <qualifiedname>toml::parse</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
          <defval>&quot;unknown file&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="2317" column="1" bodyfile="external/toml/parser.hpp" bodystart="2317" bodyend="2367"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a53a299c66b49c179dadfd94489bbebea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Comment</type>
            <defval><ref refid="comments_8hpp_1ac5952aa66c2a24cfdbb3d82f70f22618" kindref="member">TOML11_DEFAULT_COMMENT_STRATEGY</ref></defval>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>Table</declname>
            <defname>Table</defname>
            <defval>std::unordered_map</defval>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>Array</declname>
            <defname>Array</defname>
            <defval>std::vector</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; Comment, Table, Array &gt;</type>
        <definition>basic_value&lt; Comment, Table, Array &gt; toml::parse</definition>
        <argsstring>(const std::string &amp;fname)</argsstring>
        <name>parse</name>
        <qualifiedname>toml::parse</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/parser.hpp" line="2372" column="13" bodyfile="external/toml/parser.hpp" bodystart="2372" bodyend="2380"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1success" kindref="compound">success</ref>&lt; typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type &gt;</type>
        <definition>success&lt; typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type &gt; toml::ok</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>ok</name>
        <qualifiedname>toml::ok</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="79" column="1" bodyfile="external/toml/result.hpp" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&lt; typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type &gt;</type>
        <definition>failure&lt; typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type &gt; toml::err</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>err</name>
        <qualifiedname>toml::err</qualifiedname>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="87" column="1" bodyfile="external/toml/result.hpp" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a3b84098da4d3adedec5a981c193acc42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1success" kindref="compound">success</ref>&lt; std::string &gt;</type>
        <definition>success&lt; std::string &gt; toml::ok</definition>
        <argsstring>(const char *literal)</argsstring>
        <name>ok</name>
        <qualifiedname>toml::ok</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>literal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="94" column="16" bodyfile="external/toml/result.hpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1afa1cf81c964183c111288be08f39982e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&lt; std::string &gt;</type>
        <definition>failure&lt; std::string &gt; toml::err</definition>
        <argsstring>(const char *literal)</argsstring>
        <name>err</name>
        <qualifiedname>toml::err</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>literal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="98" column="16" bodyfile="external/toml/result.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a1732c45ca02aef231eab61bcb0da0cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toml::swap</definition>
        <argsstring>(result&lt; T, E &gt; &amp;lhs, result&lt; T, E &gt; &amp;rhs)</argsstring>
        <name>swap</name>
        <qualifiedname>toml::swap</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; T, E &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1result" kindref="compound">result</ref>&lt; T, E &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/result.hpp" line="672" column="6" bodyfile="external/toml/result.hpp" bodystart="672" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1abcb26a66988b38ebb8f5e48b1aa36dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; charT, traits, Alloc &gt;</type>
        <definition>std::basic_string&lt; charT, traits, Alloc &gt; toml::format_key</definition>
        <argsstring>(const std::basic_string&lt; charT, traits, Alloc &gt; &amp;k)</argsstring>
        <name>format_key</name>
        <qualifiedname>toml::format_key</qualifiedname>
        <param>
          <type>const std::basic_string&lt; charT, traits, Alloc &gt; &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/serializer.hpp" line="30" column="1" bodyfile="external/toml/serializer.hpp" bodystart="30" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac3d6191211e58a592190751a6c5ca92f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; charT, traits, Alloc &gt;</type>
        <definition>std::basic_string&lt; charT, traits, Alloc &gt; toml::format_keys</definition>
        <argsstring>(const std::vector&lt; std::basic_string&lt; charT, traits, Alloc &gt; &gt; &amp;keys)</argsstring>
        <name>format_keys</name>
        <qualifiedname>toml::format_keys</qualifiedname>
        <param>
          <type>const std::vector&lt; std::basic_string&lt; charT, traits, Alloc &gt; &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/serializer.hpp" line="67" column="1" bodyfile="external/toml/serializer.hpp" bodystart="67" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a63b9229f5457581fe01b48f68b06bfe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::format</definition>
        <argsstring>(const basic_value&lt; C, M, V &gt; &amp;v, std::size_t w=80u, int fprec=std::numeric_limits&lt; toml::floating &gt;::max_digits10, bool no_comment=false, bool force_inline=false)</argsstring>
        <name>format</name>
        <qualifiedname>toml::format</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>w</declname>
          <defval>80u</defval>
        </param>
        <param>
          <type>int</type>
          <declname>fprec</declname>
          <defval>std::numeric_limits&lt; <ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">toml::floating</ref> &gt;::max_digits10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>no_comment</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force_inline</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/serializer.hpp" line="821" column="1" bodyfile="external/toml/serializer.hpp" bodystart="821" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aa91272393b6055932099c3978967c361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::nocomment</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os)</argsstring>
        <name>nocomment</name>
        <qualifiedname>toml::nocomment</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/serializer.hpp" line="855" column="1" bodyfile="external/toml/serializer.hpp" bodystart="855" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a6de013bda68e2aad137f8fdadecb53f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::showcomment</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os)</argsstring>
        <name>showcomment</name>
        <qualifiedname>toml::showcomment</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/serializer.hpp" line="864" column="1" bodyfile="external/toml/serializer.hpp" bodystart="864" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a00c4025a20903e89000200d884e3eb87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const basic_value&lt; C, M, V &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, M, V &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/serializer.hpp" line="864" column="1" bodyfile="external/toml/serializer.hpp" bodystart="874" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af821f04e104f9c2e5756665f41034fe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="77" column="13" bodyfile="external/toml/string.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1afb120775858495e35f6b59da44c7787d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="81" column="13" bodyfile="external/toml/string.hpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af85352b3f7004847a00443445138fc43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="85" column="8" bodyfile="external/toml/string.hpp" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aa7ed10ecccc5696b44b4441544e0e308" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="89" column="13" bodyfile="external/toml/string.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a4cb1a47db77c94b694f8145dcfae1779" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="93" column="8" bodyfile="external/toml/string.hpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a8652ec20b891953069da410fa7791ec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="97" column="13" bodyfile="external/toml/string.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aae82eafb51a70ad17ce35283b8cd6714" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="103" column="1" bodyfile="external/toml/string.hpp" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a578428e2dc3aa70d1cf1251bd93a1803" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="105" column="1" bodyfile="external/toml/string.hpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a6b37318113399e23d0304f18f1069918" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="106" column="8" bodyfile="external/toml/string.hpp" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a31998ba2b47944dbdcbac1543a45fc5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="109" column="1" bodyfile="external/toml/string.hpp" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a1a1a7d070d20a09cd84a2a807e84e0d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="110" column="8" bodyfile="external/toml/string.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a54380480644f00f716bd2bca5e63c41b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const string &amp;lhs, const std::string &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="113" column="1" bodyfile="external/toml/string.hpp" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1adacb7fb70084b050e3a485f27289e558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const std::string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="116" column="1" bodyfile="external/toml/string.hpp" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ad18a8fed349896b341331b72a23ca22f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const std::string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="118" column="1" bodyfile="external/toml/string.hpp" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a19668462b83acdadcbf3445bb94367c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const std::string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="119" column="8" bodyfile="external/toml/string.hpp" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a99d56c1f6e7db4d9852cf0e46c8bdb4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const std::string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="122" column="1" bodyfile="external/toml/string.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aba7bde36fb62bb1df706d5e287e3364a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const std::string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="123" column="8" bodyfile="external/toml/string.hpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1add030e687868f6307a6cf4feb20a9e1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const std::string &amp;lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="126" column="1" bodyfile="external/toml/string.hpp" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1add3621d234992f20be3cefab53bf00c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const string &amp;lhs, const char *rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="129" column="1" bodyfile="external/toml/string.hpp" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a6c25df0b8dafad3e1b446cba9bec213d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const string &amp;lhs, const char *rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="131" column="1" bodyfile="external/toml/string.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aad9b8d3edd9e3ef9cdbca0a474d348f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const string &amp;lhs, const char *rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="132" column="8" bodyfile="external/toml/string.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a3788c78d0856a6c16f258374a44fe02b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const string &amp;lhs, const char *rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="135" column="1" bodyfile="external/toml/string.hpp" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a066ee1ee5722a807301a4b2f41f28c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const string &amp;lhs, const char *rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="136" column="8" bodyfile="external/toml/string.hpp" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ae797da48aa857cfb159c29cf27b08e32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const string &amp;lhs, const char *rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="139" column="1" bodyfile="external/toml/string.hpp" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1adf39cb23af02997f63b15bad450f6077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const char *lhs, const string &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="142" column="1" bodyfile="external/toml/string.hpp" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a6b138db76a3b39c56414d568a37a369b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const char *lhs, const string &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="144" column="1" bodyfile="external/toml/string.hpp" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a914c3f5d73230b8613ff7e8be6b2a658" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;</definition>
        <argsstring>(const char *lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="145" column="8" bodyfile="external/toml/string.hpp" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a53027f33d9549afe21860e0d5b9b2ea5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;</definition>
        <argsstring>(const char *lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="148" column="1" bodyfile="external/toml/string.hpp" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ae041e5af9dab098d3b5ae3aaa5b2a76d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&lt;=</definition>
        <argsstring>(const char *lhs, const string &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="149" column="8" bodyfile="external/toml/string.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a0b32ded32cc74616034c25bfa65a133c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::operator&gt;=</definition>
        <argsstring>(const char *lhs, const string &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="152" column="1" bodyfile="external/toml/string.hpp" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a7301e424470596120ee1f2ca29f29a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, const string &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/string.hpp" line="152" column="1" bodyfile="external/toml/string.hpp" bodystart="156" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab1aeea0aefa47363a15402d82ac2a03d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
          </param>
          <param>
            <type>typename traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt; charT, traits &gt; &amp; toml::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; charT, traits &gt; &amp;os, value_t t)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>toml::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::basic_ostream&lt; charT, traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="1" column="0" bodyfile="external/toml/types.hpp" bodystart="80" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aaf1e28f553918a844120bf20679de5c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename charT</type>
            <defval>char</defval>
          </param>
          <param>
            <type>typename traits</type>
            <defval>std::char_traits&lt;charT&gt;</defval>
          </param>
          <param>
            <type>typename alloc</type>
            <defval>std::allocator&lt;charT&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::basic_string&lt; charT, traits, alloc &gt;</type>
        <definition>std::basic_string&lt; charT, traits, alloc &gt; toml::stringize</definition>
        <argsstring>(value_t t)</argsstring>
        <name>stringize</name>
        <qualifiedname>toml::stringize</qualifiedname>
        <param>
          <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/types.hpp" line="102" column="26" bodyfile="external/toml/types.hpp" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab85090fe18497486c537b90fbe0215b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T &gt;</type>
        <definition>std::unique_ptr&lt; T &gt; toml::make_unique</definition>
        <argsstring>(Ts &amp;&amp;... args)</argsstring>
        <name>make_unique</name>
        <qualifiedname>toml::make_unique</qualifiedname>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="32" column="24" bodyfile="external/toml/utility.hpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a43b2eee284e11d113543783cd1e44026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void toml::try_reserve</definition>
        <argsstring>(Container &amp;container, std::size_t N)</argsstring>
        <name>try_reserve</name>
        <qualifiedname>toml::try_reserve</qualifiedname>
        <param>
          <type>Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="55" column="6" bodyfile="external/toml/utility.hpp" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1adea2ccfef76e94dc32396c306a550c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::concat_to_string</definition>
        <argsstring>(Ts &amp;&amp;... args)</argsstring>
        <name>concat_to_string</name>
        <qualifiedname>toml::concat_to_string</qualifiedname>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="77" column="13" bodyfile="external/toml/utility.hpp" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a144e8677775017ad83a192909e812a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T toml::from_string</definition>
        <argsstring>(const std::string &amp;str, T opt)</argsstring>
        <name>from_string</name>
        <qualifiedname>toml::from_string</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>T</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/utility.hpp" line="85" column="3" bodyfile="external/toml/utility.hpp" bodystart="85" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a79f6e255d6a696d94ad33f90e884ad82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::operator==</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;lhs, const basic_value&lt; C, T, A &gt; &amp;rhs)</argsstring>
        <name>operator==</name>
        <qualifiedname>toml::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1760" column="1" bodyfile="external/toml/value.hpp" bodystart="1760" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a67ee833ee542c3b611907ec11547d5a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::operator!=</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;lhs, const basic_value&lt; C, T, A &gt; &amp;rhs)</argsstring>
        <name>operator!=</name>
        <qualifiedname>toml::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1813" column="13" bodyfile="external/toml/value.hpp" bodystart="1813" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a1eb01006eef9af7d053358caad9913a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, bool &gt;::type</type>
        <definition>std::enable_if&lt; detail::conjunction&lt; detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;::value, bool &gt;::type toml::operator&lt;</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;lhs, const basic_value&lt; C, T, A &gt; &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>toml::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1822" column="3" bodyfile="external/toml/value.hpp" bodystart="1823" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ab72e158cc0f4ff2f955ed2ac97e94fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, bool &gt;::type</type>
        <definition>std::enable_if&lt; detail::conjunction&lt; detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;::value, bool &gt;::type toml::operator&lt;=</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;lhs, const basic_value&lt; C, T, A &gt; &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>toml::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1903" column="3" bodyfile="external/toml/value.hpp" bodystart="1904" bodyend="1907"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ac3d0aa45bab6f2ff4920d03807a3199b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, bool &gt;::type</type>
        <definition>std::enable_if&lt; detail::conjunction&lt; detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;::value, bool &gt;::type toml::operator&gt;</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;lhs, const basic_value&lt; C, T, A &gt; &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>toml::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1913" column="1" bodyfile="external/toml/value.hpp" bodystart="1913" bodyend="1916"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af0fedfb903f875b0ff0742fc37a98f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, <ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">detail::is_comparable</ref>&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, bool &gt;::type</type>
        <definition>std::enable_if&lt; detail::conjunction&lt; detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::array_type &gt;, detail::is_comparable&lt; typenamebasic_value&lt; C, T, A &gt;::table_type &gt; &gt;::value, bool &gt;::type toml::operator&gt;=</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;lhs, const basic_value&lt; C, T, A &gt; &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>toml::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1922" column="1" bodyfile="external/toml/value.hpp" bodystart="1922" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1af7b41f59a3dcc37f785776b1b9601bfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::format_error</definition>
        <argsstring>(const std::string &amp;err_msg, const basic_value&lt; C, T, A &gt; &amp;v, const std::string &amp;comment, std::vector&lt; std::string &gt; hints={}, const bool colorize=TOML11_ERROR_MESSAGE_COLORIZED)</argsstring>
        <name>format_error</name>
        <qualifiedname>toml::format_error</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>err_msg</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>hints</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>colorize</declname>
          <defval><ref refid="color_8hpp_1a63d2da22da25b1656684d1514d81f4dc" kindref="member">TOML11_ERROR_MESSAGE_COLORIZED</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1928" column="20" bodyfile="external/toml/value.hpp" bodystart="1928" bodyend="1935"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a6138dea8ad26cfc3d400766d4441112d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::format_error</definition>
        <argsstring>(const std::string &amp;err_msg, const toml::basic_value&lt; C, T, A &gt; &amp;v1, const std::string &amp;comment1, const toml::basic_value&lt; C, T, A &gt; &amp;v2, const std::string &amp;comment2, std::vector&lt; std::string &gt; hints={}, const bool colorize=TOML11_ERROR_MESSAGE_COLORIZED)</argsstring>
        <name>format_error</name>
        <qualifiedname>toml::format_error</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>err_msg</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment1</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment2</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>hints</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>colorize</declname>
          <defval><ref refid="color_8hpp_1a63d2da22da25b1656684d1514d81f4dc" kindref="member">TOML11_ERROR_MESSAGE_COLORIZED</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1938" column="20" bodyfile="external/toml/value.hpp" bodystart="1938" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1a4a63ed9f01b3ee20eef3b54fb9b19863" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string toml::format_error</definition>
        <argsstring>(const std::string &amp;err_msg, const toml::basic_value&lt; C, T, A &gt; &amp;v1, const std::string &amp;comment1, const toml::basic_value&lt; C, T, A &gt; &amp;v2, const std::string &amp;comment2, const toml::basic_value&lt; C, T, A &gt; &amp;v3, const std::string &amp;comment3, std::vector&lt; std::string &gt; hints={}, const bool colorize=TOML11_ERROR_MESSAGE_COLORIZED)</argsstring>
        <name>format_error</name>
        <qualifiedname>toml::format_error</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>err_msg</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment1</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment2</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>comment3</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>hints</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>colorize</declname>
          <defval><ref refid="color_8hpp_1a63d2da22da25b1656684d1514d81f4dc" kindref="member">TOML11_ERROR_MESSAGE_COLORIZED</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1950" column="20" bodyfile="external/toml/value.hpp" bodystart="1950" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1afdb46445ef5dd69d0f3405f62b0d76b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t</ref>&lt; Visitor, const <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">toml::boolean</ref> &amp; &gt;</type>
        <definition>detail::return_type_of_t&lt; Visitor, const toml::boolean &amp; &gt; toml::visit</definition>
        <argsstring>(Visitor &amp;&amp;visitor, const toml::basic_value&lt; C, T, A &gt; &amp;v)</argsstring>
        <name>visit</name>
        <qualifiedname>toml::visit</qualifiedname>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1965" column="1" bodyfile="external/toml/value.hpp" bodystart="1965" bodyend="1984"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1aee0770f85bedbd87d0256ed11220ea7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t</ref>&lt; Visitor, <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">toml::boolean</ref> &amp; &gt;</type>
        <definition>detail::return_type_of_t&lt; Visitor, toml::boolean &amp; &gt; toml::visit</definition>
        <argsstring>(Visitor &amp;&amp;visitor, toml::basic_value&lt; C, T, A &gt; &amp;v)</argsstring>
        <name>visit</name>
        <qualifiedname>toml::visit</qualifiedname>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1989" column="1" bodyfile="external/toml/value.hpp" bodystart="1989" bodyend="2008"/>
      </memberdef>
      <memberdef kind="function" id="namespacetoml_1ad74838a6e141c5990deba2c008c746f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t</ref>&lt; Visitor, <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">toml::boolean</ref> &amp;&amp; &gt;</type>
        <definition>detail::return_type_of_t&lt; Visitor, toml::boolean &amp;&amp; &gt; toml::visit</definition>
        <argsstring>(Visitor &amp;&amp;visitor, toml::basic_value&lt; C, T, A &gt; &amp;&amp;v)</argsstring>
        <name>visit</name>
        <qualifiedname>toml::visit</qualifiedname>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt; C, T, A &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="2013" column="1" bodyfile="external/toml/value.hpp" bodystart="2013" bodyend="2032"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="external/toml/color.hpp" line="12" column="1"/>
  </compounddef>
</doxygen>
