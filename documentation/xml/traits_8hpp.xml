<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="traits_8hpp" kind="file" language="C++">
    <compoundname>traits.hpp</compoundname>
    <includes refid="from_8hpp" local="yes">from.hpp</includes>
    <includes refid="into_8hpp" local="yes">into.hpp</includes>
    <includes refid="version_8hpp" local="yes">version.hpp</includes>
    <includes local="no">chrono</includes>
    <includes local="no">forward_list</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includedby refid="combinator_8hpp" local="yes">external/toml/combinator.hpp</includedby>
    <includedby refid="result_8hpp" local="yes">external/toml/result.hpp</includedby>
    <includedby refid="types_8hpp" local="yes">external/toml/types.hpp</includedby>
    <includedby refid="utility_8hpp" local="yes">external/toml/utility.hpp</includedby>
    <includedby refid="value_8hpp" local="yes">external/toml/value.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>from.hpp</label>
        <link refid="from_8hpp"/>
      </node>
      <node id="3">
        <label>into.hpp</label>
        <link refid="into_8hpp"/>
      </node>
      <node id="1">
        <label>external/toml/traits.hpp</label>
        <link refid="traits_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>version.hpp</label>
        <link refid="version_8hpp"/>
      </node>
      <node id="5">
        <label>chrono</label>
      </node>
      <node id="6">
        <label>forward_list</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>tuple</label>
      </node>
      <node id="9">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>Game/Game.cpp</label>
        <link refid="_game_8cpp"/>
      </node>
      <node id="7">
        <label>Game/Game.hpp</label>
        <link refid="_game_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Player/Player.cpp</label>
        <link refid="_player_8cpp"/>
      </node>
      <node id="12">
        <label>Player/Player.hpp</label>
        <link refid="_player_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SettingsManager/SettingsManager.cpp</label>
        <link refid="_settings_manager_8cpp"/>
      </node>
      <node id="6">
        <label>SettingsManager/SettingsManager.hpp</label>
        <link refid="_settings_manager_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>SpriteContoller/SpriteController.cpp</label>
        <link refid="_sprite_controller_8cpp"/>
      </node>
      <node id="11">
        <label>SpriteContoller/SpriteController.hpp</label>
        <link refid="_sprite_controller_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>external/toml.hpp</label>
        <link refid="toml_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>external/toml/combinator.hpp</label>
        <link refid="combinator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>external/toml/get.hpp</label>
        <link refid="get_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>external/toml/lexer.hpp</label>
        <link refid="lexer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>external/toml/literal.hpp</label>
        <link refid="literal_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>external/toml/parser.hpp</label>
        <link refid="parser_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>external/toml/result.hpp</label>
        <link refid="result_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>external/toml/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>external/toml/storage.hpp</label>
        <link refid="storage_8hpp"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>external/toml/traits.hpp</label>
        <link refid="traits_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>external/toml/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>external/toml/utility.hpp</label>
        <link refid="utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>external/toml/value.hpp</label>
        <link refid="value_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtoml_1_1detail_1_1has__iterator__impl" prot="public">toml::detail::has_iterator_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__value__type__impl" prot="public">toml::detail::has_value_type_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__key__type__impl" prot="public">toml::detail::has_key_type_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__mapped__type__impl" prot="public">toml::detail::has_mapped_type_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__reserve__method__impl" prot="public">toml::detail::has_reserve_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__push__back__method__impl" prot="public">toml::detail::has_push_back_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__comparable__impl" prot="public">toml::detail::is_comparable_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__from__toml__method__impl" prot="public">toml::detail::has_from_toml_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__into__toml__method__impl" prot="public">toml::detail::has_into_toml_method_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__from__impl" prot="public">toml::detail::has_specialized_from_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__into__impl" prot="public">toml::detail::has_specialized_into_impl</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__iterator" prot="public">toml::detail::has_iterator</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__value__type" prot="public">toml::detail::has_value_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__key__type" prot="public">toml::detail::has_key_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__mapped__type" prot="public">toml::detail::has_mapped_type</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__reserve__method" prot="public">toml::detail::has_reserve_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__push__back__method" prot="public">toml::detail::has_push_back_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__comparable" prot="public">toml::detail::is_comparable</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__from__toml__method" prot="public">toml::detail::has_from_toml_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__into__toml__method" prot="public">toml::detail::has_into_toml_method</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__from" prot="public">toml::detail::has_specialized_from</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1has__specialized__into" prot="public">toml::detail::has_specialized_into</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1conjunction" prot="public">toml::detail::conjunction</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1conjunction_3_01_t_01_4" prot="public">toml::detail::conjunction&lt; T &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1conjunction_3_01_t_00_01_ts_8_8_8_01_4" prot="public">toml::detail::conjunction&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1disjunction" prot="public">toml::detail::disjunction</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1disjunction_3_01_t_01_4" prot="public">toml::detail::disjunction&lt; T &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1disjunction_3_01_t_00_01_ts_8_8_8_01_4" prot="public">toml::detail::disjunction&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1negation" prot="public">toml::detail::negation</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__pair" prot="public">toml::detail::is_std_pair</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__pair_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" prot="public">toml::detail::is_std_pair&lt; std::pair&lt; T1, T2 &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__tuple" prot="public">toml::detail::is_std_tuple</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__tuple_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">toml::detail::is_std_tuple&lt; std::tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__forward__list" prot="public">toml::detail::is_std_forward_list</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__std__forward__list_3_01std_1_1forward__list_3_01_t_01_4_01_4" prot="public">toml::detail::is_std_forward_list&lt; std::forward_list&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__chrono__duration" prot="public">toml::detail::is_chrono_duration</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__chrono__duration_3_01std_1_1chrono_1_1duration_3_01_rep_00_01_period_01_4_01_4" prot="public">toml::detail::is_chrono_duration&lt; std::chrono::duration&lt; Rep, Period &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map" prot="public">toml::detail::is_map</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01_6_01_4" prot="public">toml::detail::is_map&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01const_01_6_01_4" prot="public">toml::detail::is_map&lt; T const &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01volatile_01_6_01_4" prot="public">toml::detail::is_map&lt; T volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__map_3_01_t_01const_01volatile_01_6_01_4" prot="public">toml::detail::is_map&lt; T const volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container" prot="public">toml::detail::is_container</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01_6_01_4" prot="public">toml::detail::is_container&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01const_01_6_01_4" prot="public">toml::detail::is_container&lt; T const &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01volatile_01_6_01_4" prot="public">toml::detail::is_container&lt; T volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__container_3_01_t_01const_01volatile_01_6_01_4" prot="public">toml::detail::is_container&lt; T const volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value" prot="public">toml::detail::is_basic_value</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01const_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T const &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01volatile_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01const_01volatile_01_6_01_4" prot="public">toml::detail::is_basic_value&lt; T const volatile &amp; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__basic__value_3_1_1toml_1_1basic__value_3_01_c_00_01_m_00_01_v_01_4_01_4" prot="public">toml::detail::is_basic_value&lt;::toml::basic_value&lt; C, M, V &gt; &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1index__sequence" prot="public">toml::detail::index_sequence</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1push__back__index__sequence" prot="public">toml::detail::push_back_index_sequence</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1push__back__index__sequence_3_01index__sequence_3_01_ns_8_8_8_01_4_00_01_n_01_4" prot="public">toml::detail::push_back_index_sequence&lt; index_sequence&lt; Ns... &gt;, N &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1index__sequence__maker" prot="public">toml::detail::index_sequence_maker</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1index__sequence__maker_3_010_01_4" prot="public">toml::detail::index_sequence_maker&lt; 0 &gt;</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1is__string__literal" prot="public">toml::detail::is_string_literal</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1remove__cvref" prot="public">toml::detail::remove_cvref</innerclass>
    <innernamespace refid="namespacetoml">toml</innernamespace>
    <innernamespace refid="namespacetoml_1_1detail">toml::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Toru<sp/>Niina<sp/>2017.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOML11_TRAITS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOML11_TRAITS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="from_8hpp" kindref="compound">from.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="into_8hpp" kindref="compound">into.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="version_8hpp" kindref="compound">version.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;forward_list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;string_view&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>has_include(&lt;string_view&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>cplusplus<sp/><sp/><sp/>&gt;=<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetoml" kindref="compound">toml</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">basic_value;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>type<sp/>T<sp/>is<sp/>a<sp/>kind<sp/>of<sp/>container/map<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structtoml_1_1detail_1_1has__iterator__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__iterator__impl" kindref="compound">has_iterator_impl</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35" refid="structtoml_1_1detail_1_1has__iterator__impl_1a3fa0efcf1d739740edc44d259a62ab38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__iterator__impl_1a3fa0efcf1d739740edc44d259a62ab38" kindref="member">check</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::iterator*);</highlight></codeline>
<codeline lineno="36" refid="structtoml_1_1detail_1_1has__iterator__impl_1af33c063bd5b1d984e7c9be27dad0e189" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__iterator__impl_1af33c063bd5b1d984e7c9be27dad0e189" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">};</highlight></codeline>
<codeline lineno="38" refid="structtoml_1_1detail_1_1has__value__type__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__value__type__impl" kindref="compound">has_value_type_impl</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="structtoml_1_1detail_1_1has__value__type__impl_1a7ea04684daf5397eedde830378d1badc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__value__type__impl_1a7ea04684daf5397eedde830378d1badc" kindref="member">check</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type*);</highlight></codeline>
<codeline lineno="41" refid="structtoml_1_1detail_1_1has__value__type__impl_1a5e9b700ec22ae508a0f08c75b38d1bcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__value__type__impl_1a5e9b700ec22ae508a0f08c75b38d1bcc" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">};</highlight></codeline>
<codeline lineno="43" refid="structtoml_1_1detail_1_1has__key__type__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__key__type__impl" kindref="compound">has_key_type_impl</ref></highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45" refid="structtoml_1_1detail_1_1has__key__type__impl_1aa76b96d045894e23efd71f2b0cff8b32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__key__type__impl_1aa76b96d045894e23efd71f2b0cff8b32" kindref="member">check</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::key_type*);</highlight></codeline>
<codeline lineno="46" refid="structtoml_1_1detail_1_1has__key__type__impl_1afc3126ce7ed5381a1723716b632846b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__key__type__impl_1afc3126ce7ed5381a1723716b632846b4" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48" refid="structtoml_1_1detail_1_1has__mapped__type__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__mapped__type__impl" kindref="compound">has_mapped_type_impl</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50" refid="structtoml_1_1detail_1_1has__mapped__type__impl_1a4c74c54280e4ded1f8d1b2db557b969f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__mapped__type__impl_1a4c74c54280e4ded1f8d1b2db557b969f" kindref="member">check</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::mapped_type*);</highlight></codeline>
<codeline lineno="51" refid="structtoml_1_1detail_1_1has__mapped__type__impl_1a2a01d0545a881acc3d4c1d5c9885a73e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__mapped__type__impl_1a2a01d0545a881acc3d4c1d5c9885a73e" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53" refid="structtoml_1_1detail_1_1has__reserve__method__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__reserve__method__impl" kindref="compound">has_reserve_method_impl</ref></highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55" refid="structtoml_1_1detail_1_1has__reserve__method__impl_1a1cf7e771ace33da83b0c51070ba4c5a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__reserve__method__impl_1a1cf7e771ace33da83b0c51070ba4c5a3" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="56" refid="structtoml_1_1detail_1_1has__reserve__method__impl_1acb1ce22bfc9031d509c1c7ae067a1593" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__reserve__method__impl_1acb1ce22bfc9031d509c1c7ae067a1593" kindref="member">check</ref>(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T&gt;().reserve(std::declval&lt;std::size_t&gt;()))*);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59" refid="structtoml_1_1detail_1_1has__push__back__method__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__push__back__method__impl" kindref="compound">has_push_back_method_impl</ref></highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61" refid="structtoml_1_1detail_1_1has__push__back__method__impl_1a6481c413a9a2ddaa07d0e4e490363703" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__push__back__method__impl_1a6481c413a9a2ddaa07d0e4e490363703" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="62" refid="structtoml_1_1detail_1_1has__push__back__method__impl_1a6aa616c8cd936a896d4e91c57834574a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__push__back__method__impl_1a6aa616c8cd936a896d4e91c57834574a" kindref="member">check</ref>(</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T&gt;().push_back(std::declval&lt;typename<sp/>T::value_type&gt;()))*);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65" refid="structtoml_1_1detail_1_1is__comparable__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__comparable__impl" kindref="compound">is_comparable_impl</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67" refid="structtoml_1_1detail_1_1is__comparable__impl_1a14290c321d4e9483b4384667b2cc1d77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1is__comparable__impl_1a14290c321d4e9483b4384667b2cc1d77" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="68" refid="structtoml_1_1detail_1_1is__comparable__impl_1a72f790d36a7f54edb07c73d91e390964" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1is__comparable__impl_1a72f790d36a7f54edb07c73d91e390964" kindref="member">check</ref>(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T&gt;()<sp/>&lt;<sp/>std::declval&lt;T&gt;())*);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structtoml_1_1detail_1_1has__from__toml__method__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__from__toml__method__impl" kindref="compound">has_from_toml_method_impl</ref></highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tb,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A&gt;</highlight></codeline>
<codeline lineno="76" refid="structtoml_1_1detail_1_1has__from__toml__method__impl_1a669f1090d8e39928d3cf9d06c04d6547" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__from__toml__method__impl_1a669f1090d8e39928d3cf9d06c04d6547" kindref="member">check</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T&gt;().from_toml(</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;<ref refid="classtoml_1_1basic__value" kindref="compound">::toml::basic_value&lt;C, Tb, A&gt;</ref>&gt;()))*);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tb,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A&gt;</highlight></codeline>
<codeline lineno="82" refid="structtoml_1_1detail_1_1has__from__toml__method__impl_1ad2548f76f2157dcade39f7a5097db3b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__from__toml__method__impl_1ad2548f76f2157dcade39f7a5097db3b7" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">};</highlight></codeline>
<codeline lineno="84" refid="structtoml_1_1detail_1_1has__into__toml__method__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__into__toml__method__impl" kindref="compound">has_into_toml_method_impl</ref></highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="87" refid="structtoml_1_1detail_1_1has__into__toml__method__impl_1addc3818b667e90780bf3caf1a3adb392" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><sp/><ref refid="structtoml_1_1detail_1_1has__into__toml__method__impl_1addc3818b667e90780bf3caf1a3adb392" kindref="member">check</ref>(</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;T&gt;().into_toml())*);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="89" refid="structtoml_1_1detail_1_1has__into__toml__method__impl_1a436c95617e43235119f72d1bef7cdce4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__into__toml__method__impl_1a436c95617e43235119f72d1bef7cdce4" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structtoml_1_1detail_1_1has__specialized__from__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__specialized__from__impl" kindref="compound">has_specialized_from_impl</ref></highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="95" refid="structtoml_1_1detail_1_1has__specialized__from__impl_1a508f43fdfba0c81188f26d40cdc86851" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__specialized__from__impl_1a508f43fdfba0c81188f26d40cdc86851" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>sizeof(::toml::from&lt;T&gt;)&gt;</highlight></codeline>
<codeline lineno="97" refid="structtoml_1_1detail_1_1has__specialized__from__impl_1a53bdb6c5af33482b9f887cc554695cdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><ref refid="structtoml_1_1detail_1_1has__specialized__from__impl_1a53bdb6c5af33482b9f887cc554695cdf" kindref="member">check</ref>(<ref refid="structtoml_1_1from" kindref="compound">::toml::from&lt;T&gt;</ref>*);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99" refid="structtoml_1_1detail_1_1has__specialized__into__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__specialized__into__impl" kindref="compound">has_specialized_into_impl</ref></highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102" refid="structtoml_1_1detail_1_1has__specialized__into__impl_1a626d5c9028d44efe77c5351518f8a79d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::false_type<sp/><ref refid="structtoml_1_1detail_1_1has__specialized__into__impl_1a626d5c9028d44efe77c5351518f8a79d" kindref="member">check</ref>(...);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S<sp/>=<sp/>sizeof(::toml::</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">o&lt;T&gt;)&gt;</highlight></codeline>
<codeline lineno="104" refid="structtoml_1_1detail_1_1has__specialized__into__impl_1a6062a28438249533028da26ba2863641" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::true_type<sp/><ref refid="structtoml_1_1detail_1_1has__specialized__into__impl_1a6062a28438249533028da26ba2863641" kindref="member">check</ref>(<ref refid="structtoml_1_1from" kindref="compound">::toml::from&lt;T&gt;</ref>*);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor">#ifdef<sp/>__INTEL_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>decltype(...)<sp/>std::enable_if&lt;true,<sp/>decltype(__VA_ARGS__)&gt;::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="115" refid="structtoml_1_1detail_1_1has__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__iterator" kindref="compound">has_iterator</ref><sp/><sp/><sp/><sp/>:<sp/>decltype(has_iterator_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="117" refid="structtoml_1_1detail_1_1has__value__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__value__type" kindref="compound">has_value_type</ref><sp/><sp/>:<sp/>decltype(has_value_type_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="119" refid="structtoml_1_1detail_1_1has__key__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__key__type" kindref="compound">has_key_type</ref><sp/><sp/><sp/><sp/>:<sp/>decltype(has_key_type_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="121" refid="structtoml_1_1detail_1_1has__mapped__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__mapped__type" kindref="compound">has_mapped_type</ref><sp/>:<sp/>decltype(has_mapped_type_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="123" refid="structtoml_1_1detail_1_1has__reserve__method" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__reserve__method" kindref="compound">has_reserve_method</ref><sp/>:<sp/>decltype(has_reserve_method_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="125" refid="structtoml_1_1detail_1_1has__push__back__method" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__push__back__method" kindref="compound">has_push_back_method</ref><sp/>:<sp/>decltype(has_push_back_method_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="127" refid="structtoml_1_1detail_1_1is__comparable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__comparable" kindref="compound">is_comparable</ref><sp/>:<sp/>decltype(is_comparable_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Tb,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">A&gt;</highlight></codeline>
<codeline lineno="131" refid="structtoml_1_1detail_1_1has__from__toml__method" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__from__toml__method" kindref="compound">has_from_toml_method</ref></highlight></codeline>
<codeline lineno="132"><highlight class="normal">:<sp/>decltype(has_from_toml_method_impl::check&lt;T,<sp/>C,<sp/>Tb,<sp/>A&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="135" refid="structtoml_1_1detail_1_1has__into__toml__method" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__into__toml__method" kindref="compound">has_into_toml_method</ref></highlight></codeline>
<codeline lineno="136"><highlight class="normal">:<sp/>decltype(has_into_toml_method_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="139" refid="structtoml_1_1detail_1_1has__specialized__from" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__specialized__from" kindref="compound">has_specialized_from</ref><sp/>:<sp/>decltype(has_specialized_from_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="141" refid="structtoml_1_1detail_1_1has__specialized__into" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1has__specialized__into" kindref="compound">has_specialized_into</ref><sp/>:<sp/>decltype(has_specialized_into_impl::check&lt;T&gt;(nullptr)){};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__INTEL_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>decltype</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++17<sp/>and/or/not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::conjunction;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::disjunction;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::negation;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="structtoml_1_1detail_1_1conjunction" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">conjunction</ref><sp/>:<sp/>std::true_type{};</highlight></codeline>
<codeline lineno="159" refid="structtoml_1_1detail_1_1conjunction_3_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1conjunction_3_01_t_01_4" kindref="compound">conjunction&lt;T&gt;</ref><sp/>:<sp/>T{};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="161" refid="structtoml_1_1detail_1_1conjunction_3_01_t_00_01_ts_8_8_8_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">conjunction</ref>&lt;T,<sp/>Ts...&gt;<sp/>:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::conditional&lt;static_cast&lt;bool&gt;(T::value),<sp/>conjunction&lt;Ts...&gt;,<sp/>T&gt;::type</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="structtoml_1_1detail_1_1disjunction" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1disjunction" kindref="compound">disjunction</ref><sp/>:<sp/>std::false_type{};</highlight></codeline>
<codeline lineno="166" refid="structtoml_1_1detail_1_1disjunction_3_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1disjunction_3_01_t_01_4" kindref="compound">disjunction&lt;T&gt;</ref><sp/>:<sp/>T<sp/>{};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="168" refid="structtoml_1_1detail_1_1disjunction_3_01_t_00_01_ts_8_8_8_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1disjunction" kindref="compound">disjunction</ref>&lt;T,<sp/>Ts...&gt;<sp/>:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::conditional&lt;static_cast&lt;bool&gt;(T::value),<sp/>T,<sp/>disjunction&lt;Ts...&gt;&gt;::type</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="173" refid="structtoml_1_1detail_1_1negation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1negation" kindref="compound">negation</ref><sp/>:<sp/>std::integral_constant&lt;bool,<sp/>!static_cast&lt;bool&gt;(T::value)&gt;{};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>checkers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="structtoml_1_1detail_1_1is__std__pair" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__std__pair" kindref="compound">is_std_pair</ref><sp/>:<sp/>std::false_type{};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="182" refid="structtoml_1_1detail_1_1is__std__pair_3_01std_1_1pair_3_01_t1_00_01_t2_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__std__pair" kindref="compound">is_std_pair</ref>&lt;std::pair&lt;T1,<sp/>T2&gt;&gt;<sp/>:<sp/>std::true_type{};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="structtoml_1_1detail_1_1is__std__tuple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__std__tuple" kindref="compound">is_std_tuple</ref><sp/>:<sp/>std::false_type{};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="186" refid="structtoml_1_1detail_1_1is__std__tuple_3_01std_1_1tuple_3_01_ts_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__std__tuple" kindref="compound">is_std_tuple</ref>&lt;std::tuple&lt;Ts...&gt;&gt;<sp/>:<sp/>std::true_type{};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="structtoml_1_1detail_1_1is__std__forward__list" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__std__forward__list" kindref="compound">is_std_forward_list</ref><sp/>:<sp/>std::false_type{};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="190" refid="structtoml_1_1detail_1_1is__std__forward__list_3_01std_1_1forward__list_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__std__forward__list" kindref="compound">is_std_forward_list</ref>&lt;std::forward_list&lt;T&gt;&gt;<sp/>:<sp/>std::true_type{};</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="structtoml_1_1detail_1_1is__chrono__duration" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__chrono__duration" kindref="compound">is_chrono_duration</ref>:<sp/>std::false_type{};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Rep,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Period&gt;</highlight></codeline>
<codeline lineno="194" refid="structtoml_1_1detail_1_1is__chrono__duration_3_01std_1_1chrono_1_1duration_3_01_rep_00_01_period_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__chrono__duration" kindref="compound">is_chrono_duration</ref>&lt;std::chrono::duration&lt;Rep,<sp/>Period&gt;&gt;:<sp/>std::true_type{};</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="197" refid="structtoml_1_1detail_1_1is__map" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map</ref><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">conjunction</ref>&lt;<sp/></highlight><highlight class="comment">//<sp/>map<sp/>satisfies<sp/>all<sp/>the<sp/>following<sp/>conditions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>has_iterator&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>T::iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>has_value_type&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>T::value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>has_key_type&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>T::key_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>has_mapped_type&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>T::mapped_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;{};</highlight></codeline>
<codeline lineno="203" refid="structtoml_1_1detail_1_1is__map_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map</ref>&lt;T&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="204" refid="structtoml_1_1detail_1_1is__map_3_01_t_01const_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map</ref>&lt;T<sp/>const&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="205" refid="structtoml_1_1detail_1_1is__map_3_01_t_01volatile_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map</ref>&lt;T<sp/>volatile&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="206" refid="structtoml_1_1detail_1_1is__map_3_01_t_01const_01volatile_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map</ref>&lt;T<sp/>const<sp/>volatile&amp;&gt;<sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">is_map&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="209" refid="structtoml_1_1detail_1_1is__container" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container</ref><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">conjunction</ref>&lt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>negation&lt;is_map&lt;T&gt;&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>negation&lt;std::is_same&lt;T,<sp/>std::string&gt;&gt;,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201703L</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;string_view&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1detail_1_1negation" kindref="compound">negation</ref>&lt;std::is_same&lt;T,<sp/>std::string_view&gt;&gt;,<sp/></highlight><highlight class="comment">//<sp/>not<sp/>a<sp/>std::string_view</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>has_include(&lt;string_view&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1detail_1_1has__iterator" kindref="compound">has_iterator</ref>&lt;T&gt;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>T::iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1detail_1_1has__value__type" kindref="compound">has_value_type</ref>&lt;T&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>T::value_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;{};</highlight></codeline>
<codeline lineno="220" refid="structtoml_1_1detail_1_1is__container_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container</ref>&lt;T&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="221" refid="structtoml_1_1detail_1_1is__container_3_01_t_01const_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container</ref>&lt;T<sp/>const&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="222" refid="structtoml_1_1detail_1_1is__container_3_01_t_01volatile_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container</ref>&lt;T<sp/>volatile&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="223" refid="structtoml_1_1detail_1_1is__container_3_01_t_01const_01volatile_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container</ref>&lt;T<sp/>const<sp/>volatile&amp;&gt;<sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">is_container&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="226" refid="structtoml_1_1detail_1_1is__basic__value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value</ref>:<sp/>std::false_type{};</highlight></codeline>
<codeline lineno="227" refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value</ref>&lt;T&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="228" refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01const_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value</ref>&lt;T<sp/>const&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="229" refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01volatile_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value</ref>&lt;T<sp/>volatile&amp;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="230" refid="structtoml_1_1detail_1_1is__basic__value_3_01_t_01const_01volatile_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value</ref>&lt;T<sp/>const<sp/>volatile&amp;&gt;<sp/>:<sp/><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value&lt;T&gt;</ref>{};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">M,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">V&gt;</highlight></codeline>
<codeline lineno="232" refid="structtoml_1_1detail_1_1is__basic__value_3_1_1toml_1_1basic__value_3_01_c_00_01_m_00_01_v_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__basic__value" kindref="compound">is_basic_value</ref>&lt;::<ref refid="classtoml_1_1basic__value" kindref="compound">toml::basic_value</ref>&lt;C,<sp/>M,<sp/>V&gt;&gt;:<sp/>std::true_type{};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++14<sp/>index_sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">std::index_sequence;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1ae291022c5ae9ba855f2e9dfb79926729" kindref="member">std::make_index_sequence</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="structtoml_1_1detail_1_1index__sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::size_t<sp/>...<sp/>Ns&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>{};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="structtoml_1_1detail_1_1push__back__index__sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IS,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1push__back__index__sequence" kindref="compound">push_back_index_sequence</ref>{};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::size_t<sp/>N,<sp/>std::size_t<sp/>...<sp/>Ns&gt;</highlight></codeline>
<codeline lineno="248" refid="structtoml_1_1detail_1_1push__back__index__sequence_3_01index__sequence_3_01_ns_8_8_8_01_4_00_01_n_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1push__back__index__sequence" kindref="compound">push_back_index_sequence</ref>&lt;<ref refid="structtoml_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt;Ns...&gt;,<sp/>N&gt;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250" refid="structtoml_1_1detail_1_1push__back__index__sequence_3_01index__sequence_3_01_ns_8_8_8_01_4_00_01_n_01_4_1a5dbb29551a64b374c8767d2fc2c87206" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1index__sequence" kindref="compound">index_sequence</ref>&lt;Ns...,<sp/>N&gt;<sp/><ref refid="structtoml_1_1detail_1_1push__back__index__sequence_3_01index__sequence_3_01_ns_8_8_8_01_4_00_01_n_01_4_1a5dbb29551a64b374c8767d2fc2c87206" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="254" refid="structtoml_1_1detail_1_1index__sequence__maker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1index__sequence__maker" kindref="compound">index_sequence_maker</ref></highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1push__back__index__sequence" kindref="compound">push_back_index_sequence</ref>&lt;</highlight></codeline>
<codeline lineno="257" refid="structtoml_1_1detail_1_1index__sequence__maker_1a69ea22419bc58b1bbb9e05e3cacdcf62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1index__sequence__maker" kindref="compound">index_sequence_maker</ref>&lt;N-1&gt;<ref refid="structtoml_1_1detail_1_1index__sequence__maker_1a69ea22419bc58b1bbb9e05e3cacdcf62" kindref="member">::type</ref>,<sp/>N&gt;<ref refid="structtoml_1_1detail_1_1index__sequence__maker_1a69ea22419bc58b1bbb9e05e3cacdcf62" kindref="member">::type</ref><sp/><ref refid="structtoml_1_1detail_1_1index__sequence__maker_1a69ea22419bc58b1bbb9e05e3cacdcf62" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="260" refid="structtoml_1_1detail_1_1index__sequence__maker_3_010_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1index__sequence__maker" kindref="compound">index_sequence_maker</ref>&lt;0&gt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262" refid="structtoml_1_1detail_1_1index__sequence__maker_3_010_01_4_1afad47e104b053821b98bfadc4da4b5d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1index__sequence" kindref="compound">index_sequence&lt;0&gt;</ref><sp/><ref refid="structtoml_1_1detail_1_1index__sequence__maker_3_010_01_4_1afad47e104b053821b98bfadc4da4b5d3" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="265" refid="namespacetoml_1_1detail_1ae291022c5ae9ba855f2e9dfb79926729" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1ae291022c5ae9ba855f2e9dfb79926729" kindref="member">make_index_sequence</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1index__sequence__maker" kindref="compound">index_sequence_maker</ref>&lt;N-1&gt;::type;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>cplusplus<sp/>&gt;=<sp/>2014</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++14<sp/>enable_if_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">std::enable_if_t</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="279" refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a14996ca4a7fd04f10bacfb9f59c0fa6b" kindref="member">enable_if_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;B,<sp/>T&gt;::type;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>cplusplus<sp/>&gt;=<sp/>2014</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return_type_of_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201703L<sp/>&amp;&amp;<sp/>defined(__cpp_lib_is_invocable)<sp/>&amp;&amp;<sp/>__cpp_lib_is_invocable&gt;=201703</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">return_type_of_t</ref><sp/>=<sp/>std::invoke_result_t&lt;F,<sp/>Args...&gt;;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>result_of<sp/>is<sp/>deprecated<sp/>after<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="294" refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">return_type_of_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::result_of&lt;F(Args...)&gt;::type;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is_string_literal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>use<sp/>this,<sp/>pass<sp/>`typename<sp/>remove_reference&lt;T&gt;::type`<sp/>to<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="304" refid="structtoml_1_1detail_1_1is__string__literal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1is__string__literal" kindref="compound">is_string_literal</ref>:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><ref refid="structtoml_1_1detail_1_1disjunction" kindref="compound">disjunction</ref>&lt;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_same&lt;const<sp/>char*,<sp/>T&gt;,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>conjunction&lt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_array&lt;T&gt;,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;const<sp/>char,<sp/>typename<sp/>std::remove_extent&lt;T&gt;::type&gt;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;{};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++20<sp/>remove_cvref_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="317" refid="structtoml_1_1detail_1_1remove__cvref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1remove__cvref" kindref="compound">remove_cvref</ref></highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319" refid="structtoml_1_1detail_1_1remove__cvref_1a3a65dbc417324f1b74537d76dda3fb2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1remove__cvref_1a3a65dbc417324f1b74537d76dda3fb2e" kindref="member">type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;T&gt;::type&gt;<ref refid="structtoml_1_1detail_1_1remove__cvref_1a3a65dbc417324f1b74537d76dda3fb2e" kindref="member">::type</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">};</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="324" refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacetoml_1_1detail_1aa9c03935999599ba21fb299c66c409e6" kindref="member">remove_cvref_t</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1remove__cvref_1a3a65dbc417324f1b74537d76dda3fb2e" kindref="member">remove_cvref&lt;T&gt;::type</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight><highlight class="comment">//toml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TOML_TRAITS</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="external/toml/traits.hpp"/>
  </compounddef>
</doxygen>
