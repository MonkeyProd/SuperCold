<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="_eye_enemy_8cpp" kind="file" language="C++">
    <compoundname>EyeEnemy.cpp</compoundname>
    <includes refid="_eye_enemy_8hpp" local="yes">EyeEnemy.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>Enemies/EyeEnemy.cpp</label>
        <link refid="_eye_enemy_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>EyeEnemy.hpp</label>
        <link refid="_eye_enemy_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>../GameObject/GameObject.hpp</label>
        <link refid="_game_object_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../external/PriorityQueue/PriorityQueue.hpp</label>
        <link refid="_priority_queue_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>SFML/Audio.hpp</label>
      </node>
      <node id="5">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="9">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_eye_enemy_8hpp" kindref="compound">EyeEnemy.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"><ref refid="class_eye_enemy_1aab392e8f75ee2597d5acebd4de14b0e3" kindref="member">EyeEnemy::EyeEnemy</ref>(sf::Vector2f<sp/>startPosition,</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;sf::Sprite&gt;<sp/>moveSprites,</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;sf::Sprite&gt;<sp/>attackSprites,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;sf::Sprite&gt;<sp/>takeDamageSprites,</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;sf::Sprite&gt;<sp/>deathSprites,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>speed,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>attack_distance,<sp/>std::string<sp/>enemyHitSound,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>health)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_moveSprites(moveSprites),<sp/>m_attackSprites(attackSprites),</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_takeDamageSprites(takeDamageSprites),<sp/>m_deathSprites(deathSprites),</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_speed(speed),</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject(startPosition,<sp/>moveSprites,<sp/>true,<sp/>2.8,<sp/>{50,<sp/>50}),</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_attack_distance(attack_distance),<sp/>m_health(health),</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>initial_health(health)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>attackTime<sp/>=<sp/>sf::Time();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>setPosition(startPosition);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>m_sbuffer.loadFromFile(enemyHitSound);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>hitSound.setBuffer(m_sbuffer);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>hitSound.setPitch(2);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>hitSound.setVolume(40);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>m_canAttack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="class_game_object" kindref="compound">GameObject</ref><sp/>&amp;<ref refid="class_eye_enemy_1a8e030f17965db72e517fdb3b4b6a29ba" kindref="member">EyeEnemy::getEnemyObject</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_EyeEnemyObject;<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_eye_enemy_1a81b15b848e675cde9a0f3b7505f8a64c" kindref="member">EyeEnemy::getDead</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isDead;<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_eye_enemy_1a4b111e6feb56d13e969dd90f677ca37a" kindref="member">EyeEnemy::hit</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>damage)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isHitted<sp/>&amp;&amp;<sp/>isDead)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>hitSound.setBuffer(m_sbuffer);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>hitSound.play();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>isHitted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>m_health<sp/>-=<sp/>damage;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_health<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject.<ref refid="class_game_object_1ae110f3b758e45ec3ea0bfe57c284e648" kindref="member">resetAnimation</ref>();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject.<ref refid="class_game_object_1a6ebdcd772800641b74d3771a3a4ceb79" kindref="member">stopAtEnd</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject.<ref refid="class_game_object_1a27942e782c75e53e83b8acc57758f0b5" kindref="member">m_sprites_array</ref><sp/>=<sp/>m_deathSprites;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isDead<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject.<ref refid="class_game_object_1a27942e782c75e53e83b8acc57758f0b5" kindref="member">m_sprites_array</ref><sp/>=<sp/>m_takeDamageSprites;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">sf::FloatRect<sp/><ref refid="class_eye_enemy_1ac0499d4a8de0de46779be784df973fb7" kindref="member">EyeEnemy::getNextPosition</ref>(sf::Time<sp/>deltaTime,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>positionTowards)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>velocity<sp/>=<sp/><ref refid="class_eye_enemy_1a541c089c0cf8c576e74f2caea281ba58" kindref="member">calculateTowardsVector</ref>(positionTowards);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::FloatRect<sp/>nextPosition<sp/>=<sp/>m_EyeEnemyObject.<ref refid="class_game_object_1a80cf3649948d6cd1cf8bf9277fcee741" kindref="member">getGameObjectRect</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>nextPosition.top<sp/>+=<sp/>velocity.y<sp/>*<sp/>deltaTime.asSeconds();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>nextPosition.left<sp/>+=<sp/>velocity.x<sp/>*<sp/>deltaTime.asSeconds();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nextPosition;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">sf::Vector2f<sp/><ref refid="class_eye_enemy_1a541c089c0cf8c576e74f2caea281ba58" kindref="member">EyeEnemy::calculateTowardsVector</ref>(sf::Vector2f<sp/>position)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>moveTo<sp/>=<sp/>(position<sp/>-<sp/>m_EyeEnemyObject.getPosition());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>moveTo<sp/>/=<sp/>std::sqrt(moveTo.x<sp/>*<sp/>moveTo.x<sp/>+<sp/>moveTo.y<sp/>*<sp/>moveTo.y);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>moveTo.x<sp/>*=<sp/>m_speed;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>moveTo.y<sp/>*=<sp/>m_speed;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>moveTo;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_eye_enemy_1a9f0c614de53c035af83b03c5a1cb7a42" kindref="member">EyeEnemy::moveTowards</ref>(sf::Vector2f<sp/>position,<sp/>sf::Time<sp/>deltaTime)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isHitted<sp/>&amp;&amp;<sp/>!isDead)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>moveTo<sp/>=<sp/>(position<sp/>-<sp/>m_EyeEnemyObject.getPosition());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::sqrt(moveTo.x<sp/>*<sp/>moveTo.x<sp/>+<sp/>moveTo.y<sp/>*<sp/>moveTo.y)<sp/>&lt;=</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_attack_distance)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject.<ref refid="class_game_object_1a27942e782c75e53e83b8acc57758f0b5" kindref="member">m_sprites_array</ref><sp/>=<sp/>m_attackSprites;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject.<ref refid="class_game_object_1a27942e782c75e53e83b8acc57758f0b5" kindref="member">m_sprites_array</ref><sp/>=<sp/>m_moveSprites;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveTo<sp/>/=<sp/>std::sqrt(moveTo.x<sp/>*<sp/>moveTo.x<sp/>+<sp/>moveTo.y<sp/>*<sp/>moveTo.y);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>move(moveTo<sp/>*<sp/>m_speed<sp/>*<sp/>deltaTime.asSeconds());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_EyeEnemyObject.move(moveTo<sp/>*<sp/>m_speed<sp/>*<sp/>deltaTime.asSeconds());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attackTime.asSeconds()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attackTime<sp/>=<sp/>sf::Time();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_canAttack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_EyeEnemyObject.<ref refid="class_game_object_1aebea2b95e12565a10167ef989a31fdb5" kindref="member">isLastAnimationState</ref>())</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isHitted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>attackTime<sp/>+=<sp/>deltaTime;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_eye_enemy_1a716532e043c533b563253b6b05127cad" kindref="member">EyeEnemy::draw</ref>(sf::RenderTarget<sp/>&amp;surface,<sp/>sf::RenderStates<sp/>states)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(not<sp/>isDead)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::Vector2f<sp/>HealthBarSize(80,<sp/>15);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::RectangleShape<sp/>maxhealth(HealthBarSize);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxhealth.setFillColor(sf::Color(200,<sp/>200,<sp/>200));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxhealth.setPosition(getPosition()<sp/>+<sp/>sf::Vector2f(10,<sp/>0));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface.draw(maxhealth);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sf::RectangleShape<sp/>currenthealth(sf::Vector2f(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HealthBarSize.x<sp/>*<sp/>m_health<sp/>/<sp/>initial_health,<sp/>HealthBarSize.y));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currenthealth.setFillColor(sf::Color(0,<sp/>255,<sp/>0));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currenthealth.setPosition(getPosition()<sp/>+<sp/>sf::Vector2f(10,<sp/>0));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>surface.draw(currenthealth);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>surface.draw(m_EyeEnemyObject);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_eye_enemy_1a89ca9af981f6d8d63d2976069583552e" kindref="member">EyeEnemy::canAttack</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_canAttack;<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_eye_enemy_1ae7e20f6d82c7e7ddde55fd97522b42c7" kindref="member">EyeEnemy::attacked</ref>()<sp/>{<sp/>m_canAttack<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
    </programlisting>
    <location file="Enemies/EyeEnemy.cpp"/>
  </compounddef>
</doxygen>
