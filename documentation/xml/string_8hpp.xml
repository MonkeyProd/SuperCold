<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="string_8hpp" kind="file" language="C++">
    <compoundname>string.hpp</compoundname>
    <includes refid="version_8hpp" local="yes">version.hpp</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">string</includes>
    <includedby refid="types_8hpp" local="yes">external/toml/types.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>external/toml/string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>version.hpp</label>
        <link refid="version_8hpp"/>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7">
        <label>Game/Game.cpp</label>
        <link refid="_game_8cpp"/>
      </node>
      <node id="6">
        <label>Game/Game.hpp</label>
        <link refid="_game_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>Player/Player.cpp</label>
        <link refid="_player_8cpp"/>
      </node>
      <node id="11">
        <label>Player/Player.hpp</label>
        <link refid="_player_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SettingsManager/SettingsManager.cpp</label>
        <link refid="_settings_manager_8cpp"/>
      </node>
      <node id="5">
        <label>SettingsManager/SettingsManager.hpp</label>
        <link refid="_settings_manager_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>SpriteContoller/SpriteController.cpp</label>
        <link refid="_sprite_controller_8cpp"/>
      </node>
      <node id="10">
        <label>SpriteContoller/SpriteController.hpp</label>
        <link refid="_sprite_controller_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>external/toml.hpp</label>
        <link refid="toml_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>external/toml/get.hpp</label>
        <link refid="get_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>external/toml/literal.hpp</label>
        <link refid="literal_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>external/toml/parser.hpp</label>
        <link refid="parser_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>external/toml/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>external/toml/string.hpp</label>
        <link refid="string_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>external/toml/types.hpp</label>
        <link refid="types_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>external/toml/value.hpp</label>
        <link refid="value_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtoml_1_1string" prot="public">toml::string</innerclass>
    <innernamespace refid="namespacetoml">toml</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Toru<sp/>Niina<sp/>2017.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOML11_STRING_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOML11_STRING_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="version_8hpp" kindref="compound">version.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TOML11_CPLUSPLUS_STANDARD_VERSION<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;string_view&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOML11_USING_STRING_VIEW<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetoml" kindref="compound">toml</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref><sp/>:<sp/>std::uint8_t</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">basic</ref><sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf0d674f1e0ed4292267f149c5983db02" kindref="member">literal</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structtoml_1_1string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1string" kindref="compound">string</ref></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31" refid="structtoml_1_1string_1a5f3999cc1ecc7a7677fef95f662500f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a5f3999cc1ecc7a7677fef95f662500f6" kindref="member">string</ref>()<sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32" refid="structtoml_1_1string_1a2f55dc01f6f320de416eb17c45379ebf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a2f55dc01f6f320de416eb17c45379ebf" kindref="member">~string</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33" refid="structtoml_1_1string_1ac9ee59aa2badcb4af232e2c23c41d9c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1ac9ee59aa2badcb4af232e2c23c41d9c4" kindref="member">string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34" refid="structtoml_1_1string_1a283b03aafc980b95234d455a2312eaf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a283b03aafc980b95234d455a2312eaf8" kindref="member">string</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;&amp;<sp/>s)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35" refid="structtoml_1_1string_1abb79c08ca519611f2bc734ec91f83a2c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1abb79c08ca519611f2bc734ec91f83a2c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="36" refid="structtoml_1_1string_1a5781bc882f3a60fcfd695825a4c55361" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1a5781bc882f3a60fcfd695825a4c55361" kindref="member">operator=</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;&amp;<sp/>s)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="structtoml_1_1string_1a95296f0fc36bcd35863a34bee5ec56ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a95296f0fc36bcd35863a34bee5ec56ae" kindref="member">string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s):<sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref>::<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">basic</ref>),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(s){}</highlight></codeline>
<codeline lineno="39" refid="structtoml_1_1string_1a81362490c9ff0407f7e6c5dcff577cb6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a81362490c9ff0407f7e6c5dcff577cb6" kindref="member">string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref><sp/>k):<sp/><sp/><sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(k),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(s){}</highlight></codeline>
<codeline lineno="40" refid="structtoml_1_1string_1ae119387bc15a2623894654e855e25209" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1ae119387bc15a2623894654e855e25209" kindref="member">string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref>::<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">basic</ref>),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(s){}</highlight></codeline>
<codeline lineno="41" refid="structtoml_1_1string_1a178448dbe5454516827e1fb340c717bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a178448dbe5454516827e1fb340c717bf" kindref="member">string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref><sp/>k):<sp/><sp/><sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(k),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(s){}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structtoml_1_1string_1a2505f06503d6995ece949b5ad6e94ec5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a2505f06503d6995ece949b5ad6e94ec5" kindref="member">string</ref>(std::string&amp;&amp;<sp/>s):<sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref>::<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">basic</ref>),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(std::move(s)){}</highlight></codeline>
<codeline lineno="44" refid="structtoml_1_1string_1a5fa2846cf94e6d4ff48e9e63bf67b0f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a5fa2846cf94e6d4ff48e9e63bf67b0f3" kindref="member">string</ref>(std::string&amp;&amp;<sp/>s,<sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref><sp/>k):<sp/><sp/><sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(k),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(std::move(s)){}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="structtoml_1_1string_1a59c4284332dcd926f87249fc9e84cf81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1a59c4284332dcd926f87249fc9e84cf81" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref><sp/>=<sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">string_t::basic</ref>;<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>=<sp/>s;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="48" refid="structtoml_1_1string_1a0ebb5e8d76ed9ac14e7a9dcd929db558" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1a0ebb5e8d76ed9ac14e7a9dcd929db558" kindref="member">operator=</ref>(std::string&amp;&amp;<sp/>s)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref><sp/>=<sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">string_t::basic</ref>;<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>=<sp/>std::move(s);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structtoml_1_1string_1a40e079c62c857e40679ecae48ad07307" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>()<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="52" refid="structtoml_1_1string_1a9a381a48662b5595f595f9a460a09b5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="53" refid="structtoml_1_1string_1afc69b396b1d714fbf933041466ab9d38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/>()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>);}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="structtoml_1_1string_1a911acfd5e9656b26bc0fab6e179ebfde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1a911acfd5e9656b26bc0fab6e179ebfde" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs)<sp/>{<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>+=<sp/>rhs;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="56" refid="structtoml_1_1string_1a3015cd54e087aea2ec279293db070092" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1a3015cd54e087aea2ec279293db070092" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs)<sp/>{<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>+=<sp/>rhs;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="57" refid="structtoml_1_1string_1a00b4c3bb56be07a86100962459a065ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1a00b4c3bb56be07a86100962459a065ce" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rhs)<sp/>{<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>+=<sp/>rhs;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="58" refid="structtoml_1_1string_1ab588509f5ca98c850a105b434d9a0297" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1ab588509f5ca98c850a105b434d9a0297" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/>rhs)<sp/>{<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>+=<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(TOML11_USING_STRING_VIEW)<sp/>&amp;&amp;<sp/>TOML11_USING_STRING_VIEW&gt;0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1string_1a5f3999cc1ecc7a7677fef95f662500f6" kindref="member">string</ref>(std::string_view<sp/>s):<sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref>::<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">basic</ref>),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(s){}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a5f3999cc1ecc7a7677fef95f662500f6" kindref="member">string</ref>(std::string_view<sp/>s,<sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref><sp/>k):<sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>(k),<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>(s){}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1abb79c08ca519611f2bc734ec91f83a2c" kindref="member">operator=</ref>(std::string_view<sp/>s)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref><sp/>=<sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">string_t::basic</ref>;<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>=<sp/>s;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string_view()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string_view(<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>);}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1string_1a911acfd5e9656b26bc0fab6e179ebfde" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view&amp;<sp/>rhs)<sp/>{<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>+=<sp/>rhs;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>;</highlight></codeline>
<codeline lineno="74" refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="namespacetoml_1af821f04e104f9c2e5756665f41034fe7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref><sp/>==<sp/>rhs.<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref><sp/>&amp;&amp;<sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>==<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81" refid="namespacetoml_1afb120775858495e35f6b59da44c7787d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85" refid="namespacetoml_1af85352b3f7004847a00443445138fc43" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs.<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref><sp/>==<sp/>rhs.<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>)<sp/>?<sp/>(lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&lt;<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>)<sp/>:<sp/>(lhs.<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref><sp/>&lt;<sp/>rhs.<ref refid="structtoml_1_1string_1a18fe37d79cc0714a21301b29eaf946c1" kindref="member">kind</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89" refid="namespacetoml_1aa7ed10ecccc5696b44b4441544e0e308" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs<sp/>&lt;<sp/>lhs;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93" refid="namespacetoml_1a4cb1a47db77c94b694f8145dcfae1779" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(rhs<sp/>&lt;<sp/>lhs);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97" refid="namespacetoml_1a8652ec20b891953069da410fa7791ec6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>&lt;<sp/>rhs);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="namespacetoml_1aae82eafb51a70ad17ce35283b8cd6714" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>==<sp/>rhs;}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="namespacetoml_1a578428e2dc3aa70d1cf1251bd93a1803" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>!=<sp/>rhs;}</highlight></codeline>
<codeline lineno="106" refid="namespacetoml_1a6b37318113399e23d0304f18f1069918" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&lt;<sp/><sp/>rhs;}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="namespacetoml_1a31998ba2b47944dbdcbac1543a45fc5c" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&gt;<sp/><sp/>rhs;}</highlight></codeline>
<codeline lineno="110" refid="namespacetoml_1a1a1a7d070d20a09cd84a2a807e84e0d6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&lt;=<sp/>rhs;}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="namespacetoml_1a54380480644f00f716bd2bca5e63c41b" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&gt;=<sp/>rhs;}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="namespacetoml_1adacb7fb70084b050e3a485f27289e558" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="namespacetoml_1ad18a8fed349896b341331b72a23ca22f" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>!=<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="119" refid="namespacetoml_1a19668462b83acdadcbf3445bb94367c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;<sp/><sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="namespacetoml_1a99d56c1f6e7db4d9852cf0e46c8bdb4b" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;<sp/><sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="123" refid="namespacetoml_1aba7bde36fb62bb1df706d5e287e3364a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&lt;=<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="namespacetoml_1add030e687868f6307a6cf4feb20a9e1c" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;=<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="namespacetoml_1add3621d234992f20be3cefab53bf00c5" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>==<sp/>std::string(rhs);}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="namespacetoml_1a6c25df0b8dafad3e1b446cba9bec213d" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>!=<sp/>std::string(rhs);}</highlight></codeline>
<codeline lineno="132" refid="namespacetoml_1aad9b8d3edd9e3ef9cdbca0a474d348f8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&lt;<sp/><sp/>std::string(rhs);}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="namespacetoml_1a3788c78d0856a6c16f258374a44fe02b" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&gt;<sp/><sp/>std::string(rhs);}</highlight></codeline>
<codeline lineno="136" refid="namespacetoml_1a066ee1ee5722a807301a4b2f41f28c82" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&lt;=<sp/>std::string(rhs);}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="namespacetoml_1ae797da48aa857cfb159c29cf27b08e32" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref><sp/>&gt;=<sp/>std::string(rhs);}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="namespacetoml_1adf39cb23af02997f63b15bad450f6077" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1ae9ac58857cfdda9535ef98266b65304b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(lhs)<sp/>==<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="namespacetoml_1a6b138db76a3b39c56414d568a37a369b" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a03e338a600f118cd5c5d3e7fee31f6c6" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(lhs)<sp/>!=<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="145" refid="namespacetoml_1a914c3f5d73230b8613ff7e8be6b2a658" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="namespacetoml_1acbb3a32f389eaf9e5097d2b23df77b4e" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(lhs)<sp/>&lt;<sp/><sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="namespacetoml_1a53027f33d9549afe21860e0d5b9b2ea5" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a993726b0c054cbf5b20674f14690d6ed" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(lhs)<sp/>&gt;<sp/><sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="149" refid="namespacetoml_1ae041e5af9dab098d3b5ae3aaa5b2a76d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="namespacetoml_1a17f8791df6efda2a712efa14c334c33d" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(lhs)<sp/>&lt;=<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="namespacetoml_1a7301e424470596120ee1f2ca29f29a25" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a6b51fe3d00e083b549644d994bd547c7" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(lhs)<sp/>&gt;=<sp/>rhs.<ref refid="structtoml_1_1string_1a5274c75c1109869cf58054277c3d7ebe" kindref="member">str</ref>;}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits&gt;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="namespacetoml_1a11b17eff44b8e4b0b49c85cc34e241c7" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;charT,<sp/>traits&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(s.kind<sp/>==<sp/><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf17aaabc20bfe045075927934fed52d2" kindref="member">string_t::basic</ref>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetoml_1a31abd17e078e497fb224d79260910b8d" kindref="member">std::find</ref>(s.str.cbegin(),<sp/>s.str.cend(),<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>s.str.cend())</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>contains<sp/>newline.<sp/>make<sp/>it<sp/>multiline<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;\&quot;\&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i=s.str.cbegin(),<sp/>e=s.str.cend();<sp/>i!=e;<sp/>++i)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(*i)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\f&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>it<sp/>is<sp/>a<sp/>multiline<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CRLF<sp/>is<sp/>not<sp/>needed<sp/>to<sp/>be<sp/>escaped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::next(i)<sp/>!=<sp/>e<sp/>&amp;&amp;<sp/>*std::next(i)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/>*i;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\n\&quot;\&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>newline.<sp/>make<sp/>it<sp/>inline.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>s.str)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(c)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\\&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\\&quot;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\b&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\b&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\f&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">:<sp/>{os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\r&quot;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/><sp/>:<sp/>{os<sp/>&lt;&lt;<sp/>c;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>string<sp/>`s`<sp/>is<sp/>literal-string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespacetoml_1a31abd17e078e497fb224d79260910b8d" kindref="member">std::find</ref>(s.str.cbegin(),<sp/>s.str.cend(),<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>s.str.cend()<sp/>||</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1a31abd17e078e497fb224d79260910b8d" kindref="member">std::find</ref>(s.str.cbegin(),<sp/>s.str.cend(),<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>s.str.cend()<sp/>)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>contains<sp/>newline<sp/>or<sp/>single<sp/>quote.<sp/>make<sp/>it<sp/>multiline.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&apos;&apos;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&apos;&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normal<sp/>literal<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.str<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>toml</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//<sp/>TOML11_STRING_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="external/toml/string.hpp"/>
  </compounddef>
</doxygen>
