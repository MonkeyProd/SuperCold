<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="result_8hpp" kind="file" language="C++">
    <compoundname>result.hpp</compoundname>
    <includes refid="traits_8hpp" local="yes">traits.hpp</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">utility</includes>
    <includes local="no">new</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">cassert</includes>
    <includedby refid="combinator_8hpp" local="yes">external/toml/combinator.hpp</includedby>
    <includedby refid="get_8hpp" local="yes">external/toml/get.hpp</includedby>
    <includedby refid="parser_8hpp" local="yes">external/toml/parser.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>from.hpp</label>
        <link refid="from_8hpp"/>
      </node>
      <node id="4">
        <label>into.hpp</label>
        <link refid="into_8hpp"/>
      </node>
      <node id="1">
        <label>external/toml/result.hpp</label>
        <link refid="result_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>traits.hpp</label>
        <link refid="traits_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>version.hpp</label>
        <link refid="version_8hpp"/>
      </node>
      <node id="15">
        <label>cassert</label>
      </node>
      <node id="6">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>forward_list</label>
      </node>
      <node id="13">
        <label>new</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="9">
        <label>tuple</label>
      </node>
      <node id="10">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>Game/Game.cpp</label>
        <link refid="_game_8cpp"/>
      </node>
      <node id="7">
        <label>Game/Game.hpp</label>
        <link refid="_game_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>Player/Player.cpp</label>
        <link refid="_player_8cpp"/>
      </node>
      <node id="12">
        <label>Player/Player.hpp</label>
        <link refid="_player_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SettingsManager/SettingsManager.cpp</label>
        <link refid="_settings_manager_8cpp"/>
      </node>
      <node id="6">
        <label>SettingsManager/SettingsManager.hpp</label>
        <link refid="_settings_manager_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>SpriteContoller/SpriteController.cpp</label>
        <link refid="_sprite_controller_8cpp"/>
      </node>
      <node id="11">
        <label>SpriteContoller/SpriteController.hpp</label>
        <link refid="_sprite_controller_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>external/toml.hpp</label>
        <link refid="toml_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>external/toml/combinator.hpp</label>
        <link refid="combinator_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>external/toml/get.hpp</label>
        <link refid="get_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>external/toml/lexer.hpp</label>
        <link refid="lexer_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>external/toml/literal.hpp</label>
        <link refid="literal_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>external/toml/parser.hpp</label>
        <link refid="parser_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>external/toml/result.hpp</label>
        <link refid="result_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>external/toml/serializer.hpp</label>
        <link refid="serializer_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtoml_1_1success" prot="public">toml::success</innerclass>
    <innerclass refid="structtoml_1_1failure" prot="public">toml::failure</innerclass>
    <innerclass refid="structtoml_1_1result" prot="public">toml::result</innerclass>
    <innerclass refid="structtoml_1_1detail_1_1none__t" prot="public">toml::detail::none_t</innerclass>
    <innernamespace refid="namespacetoml">toml</innernamespace>
    <innernamespace refid="namespacetoml_1_1detail">toml::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Toru<sp/>Niina<sp/>2017.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TOML11_RESULT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOML11_RESULT_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="traits_8hpp" kindref="compound">traits.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetoml" kindref="compound">toml</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="18" refid="structtoml_1_1success" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1success" kindref="compound">success</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20" refid="structtoml_1_1success_1a6a797a805131731620d2e2b20bf5e767" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1success_1a6a797a805131731620d2e2b20bf5e767" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="21" refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1success_1a6a797a805131731620d2e2b20bf5e767" kindref="member">value_type</ref><sp/><ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structtoml_1_1success_1a3e5aa0d4e59a65f9a7718b74873d9fe4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success_1a3e5aa0d4e59a65f9a7718b74873d9fe4" kindref="member">success</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success_1a6a797a805131731620d2e2b20bf5e767" kindref="member">value_type</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::is_nothrow_copy_constructible&lt;value_type&gt;::value</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>(v)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="27" refid="structtoml_1_1success_1a69a0dc510abe1a11b68a9e2ff6206f31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success_1a69a0dc510abe1a11b68a9e2ff6206f31" kindref="member">success</ref>(<ref refid="structtoml_1_1success_1a6a797a805131731620d2e2b20bf5e767" kindref="member">value_type</ref>&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::is_nothrow_move_constructible&lt;value_type&gt;::value</ref>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>(std::move(v))</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="33" refid="structtoml_1_1success_1a1d916354b6c04ca12f2a82869297ffb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success_1a1d916354b6c04ca12f2a82869297ffb1" kindref="member">success</ref>(U&amp;&amp;<sp/>v):<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>(std::forward&lt;U&gt;(v))<sp/>{}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="36" refid="structtoml_1_1success_1a202ec4019579d7c80a0ec11e6289afae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success_1a202ec4019579d7c80a0ec11e6289afae" kindref="member">success</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success&lt;U&gt;</ref>&amp;<sp/>v):<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>(v.<ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="38" refid="structtoml_1_1success_1a9dd0a8d2cf9af2b7f94b90e8aeac2cdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success_1a9dd0a8d2cf9af2b7f94b90e8aeac2cdf" kindref="member">success</ref>(<ref refid="structtoml_1_1success" kindref="compound">success&lt;U&gt;</ref>&amp;&amp;<sp/>v):<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>(std::move(v.<ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structtoml_1_1success_1a80d8c137e1c48df618fc7272bf6cc571" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1success_1a80d8c137e1c48df618fc7272bf6cc571" kindref="member">~success</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41" refid="structtoml_1_1success_1aee941da490143d770efa00440ff989e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1success_1aee941da490143d770efa00440ff989e8" kindref="member">success</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42" refid="structtoml_1_1success_1af3f374a9674b312eeae1617f02de21d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1success_1af3f374a9674b312eeae1617f02de21d6" kindref="member">success</ref>(<ref refid="structtoml_1_1success" kindref="compound">success</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43" refid="structtoml_1_1success_1a3e0dcc99f7d355e52a774967d9640bea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1success" kindref="compound">success</ref>&amp;<sp/><ref refid="structtoml_1_1success_1a3e0dcc99f7d355e52a774967d9640bea" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44" refid="structtoml_1_1success_1a799a68a3a2b0d4ca379a1e1da75d6ede" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1success" kindref="compound">success</ref>&amp;<sp/><ref refid="structtoml_1_1success_1a799a68a3a2b0d4ca379a1e1da75d6ede" kindref="member">operator=</ref>(<ref refid="structtoml_1_1success" kindref="compound">success</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="48" refid="structtoml_1_1failure" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1failure" kindref="compound">failure</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50" refid="structtoml_1_1failure_1ae6ecc03426a31550ea6909869cc50de2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1failure_1ae6ecc03426a31550ea6909869cc50de2" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="51" refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1failure_1ae6ecc03426a31550ea6909869cc50de2" kindref="member">value_type</ref><sp/><ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structtoml_1_1failure_1a80b69ca3c94f49932833afa4ef9f6c50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure_1a80b69ca3c94f49932833afa4ef9f6c50" kindref="member">failure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure_1ae6ecc03426a31550ea6909869cc50de2" kindref="member">value_type</ref>&amp;<sp/>v)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::is_nothrow_copy_constructible&lt;value_type&gt;::value</ref>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>(v)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="57" refid="structtoml_1_1failure_1a9c11a5e56ff9af3f1ce804471a10aa46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure_1a9c11a5e56ff9af3f1ce804471a10aa46" kindref="member">failure</ref>(<ref refid="structtoml_1_1failure_1ae6ecc03426a31550ea6909869cc50de2" kindref="member">value_type</ref>&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">(<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">std::is_nothrow_move_constructible&lt;value_type&gt;::value</ref>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>(std::move(v))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="63" refid="structtoml_1_1failure_1a818fa901c8f674e96d7b189a8729e88c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure_1a818fa901c8f674e96d7b189a8729e88c" kindref="member">failure</ref>(U&amp;&amp;<sp/>v):<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>(std::forward&lt;U&gt;(v))<sp/>{}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="66" refid="structtoml_1_1failure_1ab40c468eddee1237f891578fcb67f506" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure_1ab40c468eddee1237f891578fcb67f506" kindref="member">failure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;U&gt;</ref>&amp;<sp/>v):<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>(v.<ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="68" refid="structtoml_1_1failure_1a5495dd70db972ff9e79f686ecbd540f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure_1a5495dd70db972ff9e79f686ecbd540f9" kindref="member">failure</ref>(<ref refid="structtoml_1_1failure" kindref="compound">failure&lt;U&gt;</ref>&amp;&amp;<sp/>v):<sp/><ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>(std::move(v.<ref refid="classtoml_1_1basic__value" kindref="compound">value</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="structtoml_1_1failure_1a5f1e6b49d73444806ff719ffa23e8d22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1failure_1a5f1e6b49d73444806ff719ffa23e8d22" kindref="member">~failure</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71" refid="structtoml_1_1failure_1a0eeb2c533238e57043212f1fafa49a2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1failure_1a0eeb2c533238e57043212f1fafa49a2b" kindref="member">failure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72" refid="structtoml_1_1failure_1ae6120e392c9b89e55f6ed868041c05d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1failure_1ae6120e392c9b89e55f6ed868041c05d3" kindref="member">failure</ref>(<ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73" refid="structtoml_1_1failure_1a6c1002b945353ead3cf4a56dcb67a5f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&amp;<sp/><ref refid="structtoml_1_1failure_1a6c1002b945353ead3cf4a56dcb67a5f8" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74" refid="structtoml_1_1failure_1aacbdb7b00741f87202589042efb52b68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&amp;<sp/><ref refid="structtoml_1_1failure_1aacbdb7b00741f87202589042efb52b68" kindref="member">operator=</ref>(<ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&amp;&amp;)<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="structtoml_1_1success" kindref="compound">success&lt;typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;::type</ref>&gt;::type&gt;</highlight></codeline>
<codeline lineno="79" refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(T&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success</ref>&lt;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::type</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;(std::forward&lt;T&gt;(v));</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal">failure&lt;typename<sp/>std::remove_cv&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::type&gt;</highlight></codeline>
<codeline lineno="87" refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" refkind="member"><highlight class="normal"><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(T&amp;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure</ref>&lt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::type</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;(std::forward&lt;T&gt;(v));</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="namespacetoml_1a3b84098da4d3adedec5a981c193acc42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success&lt;std::string&gt;</ref><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>literal)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success&lt;std::string&gt;</ref>(std::string(<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf0d674f1e0ed4292267f149c5983db02" kindref="member">literal</ref>));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98" refid="namespacetoml_1afa1cf81c964183c111288be08f39982e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;std::string&gt;</ref><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>literal)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;std::string&gt;</ref>(std::string(<ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19aaf0d674f1e0ed4292267f149c5983db02" kindref="member">literal</ref>));</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="105" refid="structtoml_1_1result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1result" kindref="compound">result</ref></highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107" refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="108" refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref><sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="109" refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1success" kindref="compound">success_type</ref><sp/>=<sp/><ref refid="structtoml_1_1success" kindref="compound">success&lt;value_type&gt;</ref>;</highlight></codeline>
<codeline lineno="110" refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1failure" kindref="compound">failure_type</ref><sp/>=<sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;error_type&gt;</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structtoml_1_1result_1abb5c70134f5098179bd0a18a54013b6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1abb5c70134f5098179bd0a18a54013b6a" kindref="member">result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success_type</ref>&amp;<sp/>s):<sp/>is_ok_(true)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(s);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118" refid="structtoml_1_1result_1a49edc34d5c02916c1f4e7b855944ab16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a49edc34d5c02916c1f4e7b855944ab16" kindref="member">result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure_type</ref>&amp;<sp/>f):<sp/>is_ok_(false)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(f);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124" refid="structtoml_1_1result_1ae9d45fbc91dcbdd969d9e74b02378bfc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1ae9d45fbc91dcbdd969d9e74b02378bfc" kindref="member">result</ref>(<ref refid="structtoml_1_1success" kindref="compound">success_type</ref>&amp;&amp;<sp/>s):<sp/>is_ok_(true)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(s));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130" refid="structtoml_1_1result_1a866478463fb60e52676ce1d8b53aacb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a866478463fb60e52676ce1d8b53aacb1" kindref="member">result</ref>(<ref refid="structtoml_1_1failure" kindref="compound">failure_type</ref>&amp;&amp;<sp/>f):<sp/>is_ok_(false)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(f));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="138" refid="structtoml_1_1result_1a9838251b92a633be231e7c7321b5b5da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a9838251b92a633be231e7c7321b5b5da" kindref="member">result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success&lt;U&gt;</ref>&amp;<sp/>s):<sp/>is_ok_(true)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(s.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="145" refid="structtoml_1_1result_1a3850c14cafad48d0b8125f3aa40fdbd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a3850c14cafad48d0b8125f3aa40fdbd5" kindref="member">result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;U&gt;</ref>&amp;<sp/>f):<sp/>is_ok_(false)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(f.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="152" refid="structtoml_1_1result_1a61f5f132611cb03c10c41e1a5daa932d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a61f5f132611cb03c10c41e1a5daa932d" kindref="member">result</ref>(<ref refid="structtoml_1_1success" kindref="compound">success&lt;U&gt;</ref>&amp;&amp;<sp/>s):<sp/>is_ok_(true)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(s.value));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="159" refid="structtoml_1_1result_1ac39c73e30e7d69ed37b5a9ee02f462c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1ac39c73e30e7d69ed37b5a9ee02f462c3" kindref="member">result</ref>(<ref refid="structtoml_1_1failure" kindref="compound">failure&lt;U&gt;</ref>&amp;&amp;<sp/>f):<sp/>is_ok_(false)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(f.value));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="structtoml_1_1result_1a30f3850c24490fc803732d46e2820bd7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a30f3850c24490fc803732d46e2820bd7" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success_type</ref>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(s);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175" refid="structtoml_1_1result_1ab33b6448c67e824e41e5ef1fc34cc151" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1ab33b6448c67e824e41e5ef1fc34cc151" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure_type</ref>&amp;<sp/>f)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(f);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184" refid="structtoml_1_1result_1a88fbb386e3543e877dd461962353cc5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a88fbb386e3543e877dd461962353cc5c" kindref="member">operator=</ref>(<ref refid="structtoml_1_1success" kindref="compound">success_type</ref>&amp;&amp;<sp/>s)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(s));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193" refid="structtoml_1_1result_1a68c977ca158072f962cfbe53893d5857" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a68c977ca158072f962cfbe53893d5857" kindref="member">operator=</ref>(<ref refid="structtoml_1_1failure" kindref="compound">failure_type</ref>&amp;&amp;<sp/>f)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(f));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="204" refid="structtoml_1_1result_1a763be5d95afd897b9d7027dad089bd96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a763be5d95afd897b9d7027dad089bd96" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1success" kindref="compound">success&lt;U&gt;</ref>&amp;<sp/>s)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(s.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="214" refid="structtoml_1_1result_1acafef59ec18b0716ab5f71f6839c3242" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1acafef59ec18b0716ab5f71f6839c3242" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;U&gt;</ref>&amp;<sp/>f)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(f.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="224" refid="structtoml_1_1result_1a91cf4c2a8cb7fe7304a42731a2bdcb99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a91cf4c2a8cb7fe7304a42731a2bdcb99" kindref="member">operator=</ref>(<ref refid="structtoml_1_1success" kindref="compound">success&lt;U&gt;</ref>&amp;&amp;<sp/>s)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(s.value));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="234" refid="structtoml_1_1result_1a359ff21d89a0c9d60c8deb250e7cc757" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a359ff21d89a0c9d60c8deb250e7cc757" kindref="member">operator=</ref>(<ref refid="structtoml_1_1failure" kindref="compound">failure&lt;U&gt;</ref>&amp;&amp;<sp/>f)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;is_ok_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(f.value));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="structtoml_1_1result_1ab0a40e53bea82cf6df46059b7d942513" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1ab0a40e53bea82cf6df46059b7d942513" kindref="member">~result</ref>()<sp/>noexcept<sp/>{this-&gt;cleanup();}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="structtoml_1_1result_1ad193e83ebbf862a65ab8fc9191a4f39e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1ad193e83ebbf862a65ab8fc9191a4f39e" kindref="member">result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/>other):<sp/>is_ok_(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(other.<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(other.<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261" refid="structtoml_1_1result_1a323424143e2a547e76adfb0d073a4b42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a323424143e2a547e76adfb0d073a4b42" kindref="member">result</ref>(<ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;&amp;<sp/>other):<sp/>is_ok_(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.is_ok())</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(other.as_ok()));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(other.as_err()));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="278" refid="structtoml_1_1result_1afe756e1b20d750ac1e1d4da9c5ce0829" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1afe756e1b20d750ac1e1d4da9c5ce0829" kindref="member">result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;U, F&gt;</ref>&amp;<sp/>other):<sp/>is_ok_(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(other.<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(other.<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="294" refid="structtoml_1_1result_1aded304df3cb1bbc7892b679855de7d6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1aded304df3cb1bbc7892b679855de7d6a" kindref="member">result</ref>(<ref refid="structtoml_1_1result" kindref="compound">result&lt;U, F&gt;</ref>&amp;&amp;<sp/>other):<sp/>is_ok_(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.is_ok())</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(other.as_ok()));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(other.as_err()));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="structtoml_1_1result_1a00768edefd8c25f615ac3863b32bd7b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a00768edefd8c25f615ac3863b32bd7b0" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(other.<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(other.<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ok_<sp/>=<sp/>other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328" refid="structtoml_1_1result_1af63cf8be2e1fd03494c8fe7fb4720d59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1af63cf8be2e1fd03494c8fe7fb4720d59" kindref="member">operator=</ref>(<ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.is_ok())</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(other.as_ok()));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(other.as_err()));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ok_<sp/>=<sp/>other.is_ok();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="348" refid="structtoml_1_1result_1a7e4251cecdbb6dfebba1a38f851eb6d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1a7e4251cecdbb6dfebba1a38f851eb6d5" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;U, F&gt;</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(other.<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(other.<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ok_<sp/>=<sp/>other.<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="367" refid="structtoml_1_1result_1adbe6e97791bc55a564ac83e4ff3cf3b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/><ref refid="structtoml_1_1result_1adbe6e97791bc55a564ac83e4ff3cf3b0" kindref="member">operator=</ref>(<ref refid="structtoml_1_1result" kindref="compound">result&lt;U, F&gt;</ref>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;cleanup();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(other.is_ok())</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>))<sp/><ref refid="structtoml_1_1result_1a31a580d4f033ebbfe90d079604d81b57" kindref="member">success_type</ref>(std::move(other.as_ok()));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>::new(std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>))<sp/><ref refid="structtoml_1_1result_1a8ae6354b5d46aa704147b437d457659f" kindref="member">failure_type</ref>(std::move(other.as_err()));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(tmp<sp/>==<sp/>std::addressof(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)tmp;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_ok_<sp/>=<sp/>other.is_ok();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()<sp/><sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_ok_;}</highlight></codeline>
<codeline lineno="387" refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!is_ok_;}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="structtoml_1_1result_1ac9c61e85e9d6cde9c51a197c8e79e36e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_ok_;}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="structtoml_1_1result_1ac75aa56aa20416f01244e1936b74dbc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1ac75aa56aa20416f01244e1936b74dbc3" kindref="member">unwrap</ref>()<sp/>&amp;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>())</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;toml::result:<sp/>bad<sp/>unwrap:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_error(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400" refid="structtoml_1_1result_1ab7174af4f142252c8cc979e229ae4dc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1result_1ab7174af4f142252c8cc979e229ae4dc2" kindref="member">unwrap</ref>()<sp/>const&amp;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>())</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;toml::result:<sp/>bad<sp/>unwrap:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_error(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409" refid="structtoml_1_1result_1a1fdcfafe6ab6972e537f6347d4400769" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a1fdcfafe6ab6972e537f6347d4400769" kindref="member">unwrap</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>())</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;toml::result:<sp/>bad<sp/>unwrap:<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>format_error(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="structtoml_1_1result_1a9228eb4b14467fc5ca9cda8df9105dc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a9228eb4b14467fc5ca9cda8df9105dc6" kindref="member">unwrap_or</ref>(<ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref>&amp;<sp/>opt)<sp/>&amp;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424" refid="structtoml_1_1result_1aba9a87bb14037085457bad30853ea637" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1result_1aba9a87bb14037085457bad30853ea637" kindref="member">unwrap_or</ref>(<ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>opt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429" refid="structtoml_1_1result_1af8d1ded0824e0d8d761aeb65136b01ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1af8d1ded0824e0d8d761aeb65136b01ee" kindref="member">unwrap_or</ref>(<ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref><sp/>opt)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>())<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>opt;}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="structtoml_1_1result_1a9f8688e18874027ce0ccc1eb4dc49486" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a9f8688e18874027ce0ccc1eb4dc49486" kindref="member">unwrap_err</ref>()<sp/>&amp;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())<sp/>{</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;toml::result:<sp/>bad<sp/>unwrap_err&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440" refid="structtoml_1_1result_1a4aab3e92f73bb52232dbf00e8f602e89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1result_1a4aab3e92f73bb52232dbf00e8f602e89" kindref="member">unwrap_err</ref>()<sp/>const&amp;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())<sp/>{</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;toml::result:<sp/>bad<sp/>unwrap_err&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445" refid="structtoml_1_1result_1ae291950945f17b68b167c4bb08b25db0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1ae291950945f17b68b167c4bb08b25db0" kindref="member">unwrap_err</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>())<sp/>{</highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;toml::result:<sp/>bad<sp/>unwrap_err&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>()<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;}</highlight></codeline>
<codeline lineno="452" refid="structtoml_1_1result_1a87108031541f7813654221c315a816b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1result_1a87108031541f7813654221c315a816b7" kindref="member">as_ok</ref>()<sp/>const&amp;<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>;}</highlight></codeline>
<codeline lineno="453" refid="structtoml_1_1result_1af74c72007f5d55e6b763886a49856504" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1add7f22b3480a86a5af3053529815617b" kindref="member">value_type</ref>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1af74c72007f5d55e6b763886a49856504" kindref="member">as_ok</ref>()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.<ref refid="structtoml_1_1success_1a74e072dc16fcaa3ea1ca3c20e7845373" kindref="member">value</ref>);}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()<sp/>&amp;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>;}</highlight></codeline>
<codeline lineno="456" refid="structtoml_1_1result_1a1ad98c8a6902cdc12dcd546b7e64a04c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structtoml_1_1result_1a1ad98c8a6902cdc12dcd546b7e64a04c" kindref="member">as_err</ref>()<sp/>const&amp;<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>;}</highlight></codeline>
<codeline lineno="457" refid="structtoml_1_1result_1a186ab05799b4fb772404c336af481db4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a186ab05799b4fb772404c336af481db4" kindref="member">as_err</ref>()<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>.<ref refid="structtoml_1_1failure_1aff7e68caec6c6d4bef17f59722e52a15" kindref="member">value</ref>);}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prerequisities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F:<sp/>T<sp/>-&gt;<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retval:<sp/>result&lt;U,<sp/>E&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;detail::return_type_of_t&lt;F, value_type&amp;&gt;</ref>,<sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref>&gt;</highlight></codeline>
<codeline lineno="465" refid="structtoml_1_1result_1adda76790d56057a8322936b1e7e4bdd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1adda76790d56057a8322936b1e7e4bdd6" kindref="member">map</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(f(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>()));}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;detail::return_type_of_t&lt;F, value_type const&amp;&gt;</ref>,<sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref>&gt;</highlight></codeline>
<codeline lineno="472" refid="structtoml_1_1result_1a5c2c18bb1f0e546005c333a2a6acb910" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a5c2c18bb1f0e546005c333a2a6acb910" kindref="member">map</ref>(F&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(f(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>()));}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;detail::return_type_of_t&lt;F, value_type &amp;&amp;&gt;</ref>,<sp/><ref refid="structtoml_1_1result_1a54617f433b2c626d7304c4cf8af61601" kindref="member">error_type</ref>&gt;</highlight></codeline>
<codeline lineno="479" refid="structtoml_1_1result_1a5e5fbb4f290ed2261b7a05baecd4e432" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a5e5fbb4f290ed2261b7a05baecd4e432" kindref="member">map</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(f(std::move(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>())));}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(std::move(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prerequisities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F:<sp/>E<sp/>-&gt;<sp/>F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retval:<sp/>result&lt;T,<sp/>F&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;value_type, detail::return_type_of_t&lt;F, error_type&amp;&gt;</ref>&gt;</highlight></codeline>
<codeline lineno="490" refid="structtoml_1_1result_1af76865b12e262577815a22a88d75bedc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1af76865b12e262577815a22a88d75bedc" kindref="member">map_err</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(f(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;value_type, detail::return_type_of_t&lt;F, error_type const&amp;&gt;</ref>&gt;</highlight></codeline>
<codeline lineno="497" refid="structtoml_1_1result_1a6c772fd3f6e8fe6698b4577a2cf63a8a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a6c772fd3f6e8fe6698b4577a2cf63a8a" kindref="member">map_err</ref>(F&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(f(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;value_type, detail::return_type_of_t&lt;F, error_type&amp;&amp;&gt;</ref>&gt;</highlight></codeline>
<codeline lineno="504" refid="structtoml_1_1result_1aee813a8d32a6aeb1f99a33d785c6fbd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1aee813a8d32a6aeb1f99a33d785c6fbd0" kindref="member">map_err</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(f(std::move(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>())));}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(std::move(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>()));</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prerequisities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F:<sp/>T<sp/>-&gt;<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retval:<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, value_type&amp;&gt;</ref></highlight></codeline>
<codeline lineno="515" refid="structtoml_1_1result_1a3ae1569365d92269f87f02e57272065f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a3ae1569365d92269f87f02e57272065f" kindref="member">map_or_else</ref>(F&amp;&amp;<sp/>f,<sp/>U&amp;&amp;<sp/>opt)<sp/>&amp;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;U&gt;(opt);}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, value_type const&amp;&gt;</ref></highlight></codeline>
<codeline lineno="522" refid="structtoml_1_1result_1aa6c2c36c32c801aebdd4ae616ae04dbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1aa6c2c36c32c801aebdd4ae616ae04dbf" kindref="member">map_or_else</ref>(F&amp;&amp;<sp/>f,<sp/>U&amp;&amp;<sp/>opt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;U&gt;(opt);}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, value_type&amp;&amp;&gt;</ref></highlight></codeline>
<codeline lineno="529" refid="structtoml_1_1result_1a9be00b6a49a77c9e8b774435bb25d218" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a9be00b6a49a77c9e8b774435bb25d218" kindref="member">map_or_else</ref>(F&amp;&amp;<sp/>f,<sp/>U&amp;&amp;<sp/>opt)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;U&gt;(opt);}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(std::move(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>()));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prerequisities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F:<sp/>E<sp/>-&gt;<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retval:<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, error_type&amp;&gt;</ref></highlight></codeline>
<codeline lineno="540" refid="structtoml_1_1result_1a77a0dc0f5ce631875002dabda340956a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a77a0dc0f5ce631875002dabda340956a" kindref="member">map_err_or_else</ref>(F&amp;&amp;<sp/>f,<sp/>U&amp;&amp;<sp/>opt)<sp/>&amp;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;U&gt;(opt);}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, error_type const&amp;&gt;</ref></highlight></codeline>
<codeline lineno="547" refid="structtoml_1_1result_1a87c421920b55d3810aa219eb52338c26" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a87c421920b55d3810aa219eb52338c26" kindref="member">map_err_or_else</ref>(F&amp;&amp;<sp/>f,<sp/>U&amp;&amp;<sp/>opt)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;U&gt;(opt);}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, error_type&amp;&amp;&gt;</ref></highlight></codeline>
<codeline lineno="554" refid="structtoml_1_1result_1aad0d8e20f4429912d9d701a741276d90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1aad0d8e20f4429912d9d701a741276d90" kindref="member">map_err_or_else</ref>(F&amp;&amp;<sp/>f,<sp/>U&amp;&amp;<sp/>opt)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;U&gt;(opt);}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(std::move(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prerequisities:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F:<sp/>func<sp/>T<sp/>-&gt;<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>toml::err(error_type)<sp/>should<sp/>be<sp/>convertible<sp/>to<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normally,<sp/>type<sp/>U<sp/>is<sp/>another<sp/>result&lt;S,<sp/>F&gt;<sp/>and<sp/>E<sp/>is<sp/>convertible<sp/>to<sp/>F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, value_type&amp;&gt;</ref></highlight></codeline>
<codeline lineno="566" refid="structtoml_1_1result_1af490dbce4dfa4f2d14708de7d71f868e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1af490dbce4dfa4f2d14708de7d71f868e" kindref="member">and_then</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, value_type const&amp;&gt;</ref></highlight></codeline>
<codeline lineno="573" refid="structtoml_1_1result_1ad52c61fc853ce3f0bb642076ac77998f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1ad52c61fc853ce3f0bb642076ac77998f" kindref="member">and_then</ref>(F&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, value_type&amp;&amp;&gt;</ref></highlight></codeline>
<codeline lineno="580" refid="structtoml_1_1result_1a3684938c7e98c2d205b0becb52213afd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a3684938c7e98c2d205b0becb52213afd" kindref="member">and_then</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(std::move(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>()));}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1aaa49b96abbd03a5fd434e4098839efaf" kindref="member">err</ref>(std::move(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prerequisities:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F:<sp/>func<sp/>E<sp/>-&gt;<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>toml::ok(value_type)<sp/>should<sp/>be<sp/>convertible<sp/>to<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normally,<sp/>type<sp/>U<sp/>is<sp/>another<sp/>result&lt;S,<sp/>F&gt;<sp/>and<sp/>T<sp/>is<sp/>convertible<sp/>to<sp/>S</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, error_type&amp;&gt;</ref></highlight></codeline>
<codeline lineno="592" refid="structtoml_1_1result_1a7a78f15aac6d4b32cb36d908c9b5dcf4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a7a78f15aac6d4b32cb36d908c9b5dcf4" kindref="member">or_else</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, error_type const&amp;&gt;</ref></highlight></codeline>
<codeline lineno="599" refid="structtoml_1_1result_1a3ed934110d93a9bcd56cb40b6e0ac9fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a3ed934110d93a9bcd56cb40b6e0ac9fc" kindref="member">or_else</ref>(F&amp;&amp;<sp/>f)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>());}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>());</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetoml_1_1detail_1a727c7ef6533c345fb5521b6b60ff3295" kindref="member">detail::return_type_of_t&lt;F, error_type&amp;&amp;&gt;</ref></highlight></codeline>
<codeline lineno="606" refid="structtoml_1_1result_1a71052f26332d7dba21276d9e52b164a9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result_1a71052f26332d7dba21276d9e52b164a9" kindref="member">or_else</ref>(F&amp;&amp;<sp/>f)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(std::move(this-&gt;<ref refid="structtoml_1_1result_1afee245eac77ff9a41a15be21915379b8" kindref="member">as_err</ref>()));}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a6e429ce41fe363c8d981d8c929fd26f6" kindref="member">ok</ref>(std::move(this-&gt;<ref refid="structtoml_1_1result_1a6a550aa27274597c925efbb701d4f608" kindref="member">as_ok</ref>()));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>*this<sp/>is<sp/>error,<sp/>returns<sp/>*this.<sp/>otherwise,<sp/>returns<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="structtoml_1_1result_1a717089e4d0699dbe2d5f0d92a310fa29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/><ref refid="structtoml_1_1result_1a717089e4d0699dbe2d5f0d92a310fa29" kindref="member">and_other</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()<sp/>?<sp/>*this<sp/>:<sp/>other;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617" refid="structtoml_1_1result_1ae99c425ae60dd7f6859a7bd65e6495e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/><ref refid="structtoml_1_1result_1ae99c425ae60dd7f6859a7bd65e6495e8" kindref="member">and_other</ref>(<ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;&amp;<sp/>other)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1aae92ef3abc3bbc32a92789b87c772b75" kindref="member">is_err</ref>()<sp/>?<sp/>std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>:<sp/>std::move(other);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>*this<sp/>is<sp/>okay,<sp/>returns<sp/>*this.<sp/>otherwise,<sp/>returns<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="structtoml_1_1result_1a99dfe27384c1c22b534e81eea0417d3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/><ref refid="structtoml_1_1result_1a99dfe27384c1c22b534e81eea0417d3f" kindref="member">or_other</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()<sp/>?<sp/>*this<sp/>:<sp/>other;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627" refid="structtoml_1_1result_1ac0dfc2b4cce4d2de37704ab11b43187e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result</ref><sp/><ref refid="structtoml_1_1result_1ac0dfc2b4cce4d2de37704ab11b43187e" kindref="member">or_other</ref>(<ref refid="structtoml_1_1result" kindref="compound">result</ref>&amp;&amp;<sp/>other)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="structtoml_1_1result_1a024b6a6a853f3b3efa5097261f86dc05" kindref="member">is_ok</ref>()<sp/>?<sp/>std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>:<sp/>std::move(other);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632" refid="structtoml_1_1result_1a297145575c860f7b007c9e18d7c5513c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1result_1a297145575c860f7b007c9e18d7c5513c" kindref="member">swap</ref>(<ref refid="structtoml_1_1result" kindref="compound">result&lt;T, E&gt;</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;T, E&gt;</ref><sp/>tmp(std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>std::move(other);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other<sp/>=<sp/>std::move(tmp);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>format_error(std::exception<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>excpt)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(excpt.what());</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_base_of&lt;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::exception,<sp/>U&gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>,<sp/>std::nullptr_t&gt;::type<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>format_error(U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>others)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;<sp/>oss<sp/>&lt;&lt;<sp/>others;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup()<sp/>noexcept</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;is_ok_)<sp/>{this-&gt;<ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>.~success_type();}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{this-&gt;<ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>.~failure_type();}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_ok_;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="666" refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1success" kindref="compound">success_type</ref><sp/><ref refid="structtoml_1_1result_1a1cd008a6d4136271139a0b0a4b8fe254" kindref="member">succ</ref>;</highlight></codeline>
<codeline lineno="667" refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure_type</ref><sp/><ref refid="structtoml_1_1result_1a164eaf2931830770dbbc22f16b08e4ad" kindref="member">fail</ref>;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="669"><highlight class="normal">};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="672" refid="namespacetoml_1a1732c45ca02aef231eab61bcb0da0cd1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1a9a68dfa1ac6b1762835738786dbb3cf2" kindref="member">swap</ref>(<ref refid="structtoml_1_1result" kindref="compound">result&lt;T, E&gt;</ref>&amp;<sp/>lhs,<sp/><ref refid="structtoml_1_1result" kindref="compound">result&lt;T, E&gt;</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs.<ref refid="structtoml_1_1result_1a297145575c860f7b007c9e18d7c5513c" kindref="member">swap</ref>(rhs);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>might<sp/>be<sp/>confusing<sp/>because<sp/>it<sp/>eagerly<sp/>evaluated,<sp/>while<sp/>in<sp/>the<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cases<sp/>operator<sp/>&amp;&amp;<sp/>and<sp/>||<sp/>are<sp/>short-circuited.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>E&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>result&lt;T,<sp/>E&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator&amp;&amp;(const<sp/>result&lt;T,<sp/>E&gt;&amp;<sp/>lhs,<sp/>const<sp/>result&lt;T,<sp/>E&gt;&amp;<sp/>rhs)<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>lhs.is_ok()<sp/>?<sp/>rhs<sp/>:<sp/>lhs;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;typename<sp/>T,<sp/>typename<sp/>E&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>result&lt;T,<sp/>E&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator||(const<sp/>result&lt;T,<sp/>E&gt;&amp;<sp/>lhs,<sp/>const<sp/>result&lt;T,<sp/>E&gt;&amp;<sp/>rhs)<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>lhs.is_ok()<sp/>?<sp/>lhs<sp/>:<sp/>rhs;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>re-use<sp/>result&lt;T,<sp/>E&gt;<sp/>as<sp/>a<sp/>optional&lt;T&gt;<sp/>with<sp/>none_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700" refid="structtoml_1_1detail_1_1none__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref><sp/>{};</highlight></codeline>
<codeline lineno="701" refid="namespacetoml_1_1detail_1acca1a6e00fc61468632be91a176b05aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1af32e4e42a39aa2b9fc2bd8e9d3f97cd8" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="702" refid="namespacetoml_1_1detail_1a3537431c41937e784f86fb9eaad76ca0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1aa4437dc0ba9e506dec5d6922504fccb5" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="703" refid="namespacetoml_1_1detail_1a7485f7981881219eb777858cdf664987" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1a020cb01199da9b349b09e05f732e4694" kindref="member">operator&lt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="704" refid="namespacetoml_1_1detail_1aa34f918cd10f91bcd2e97816cf65cf9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1adb0f553fbf0b2ddb642de75f9a2f1b84" kindref="member">operator&lt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="705" refid="namespacetoml_1_1detail_1a40c65a35c7312e7659f9eef2792ebf82" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1ab0aa1507d1ed1b957274d535fe27c42b" kindref="member">operator&gt; </ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="706" refid="namespacetoml_1_1detail_1a498c1f69bf8f9885641b4db79720e8c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetoml_1_1detail_1af42e8bbe713ac03abc32455bde9bcd03" kindref="member">operator&gt;=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>&amp;)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traitsT&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal">std::basic_ostream&lt;charT,<sp/>traitsT&gt;&amp;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><ref refid="namespacetoml_1_1detail_1a498c1f69bf8f9885641b4db79720e8c2" kindref="member">operator&lt;&lt;</ref>(std::basic_ostream&lt;charT,<sp/>traitsT&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>none_t&amp;)</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="714" refid="namespacetoml_1_1detail_1af16c59120242cf5708a3d4763ef84fda" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;none_t&gt;</ref><sp/><ref refid="namespacetoml_1_1detail_1af16c59120242cf5708a3d4763ef84fda" kindref="member">none</ref>()<sp/>noexcept<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtoml_1_1failure" kindref="compound">failure&lt;none_t&gt;</ref>{<ref refid="structtoml_1_1detail_1_1none__t" kindref="compound">none_t</ref>{}};}</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>toml11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//<sp/>TOML11_RESULT_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="external/toml/result.hpp"/>
  </compounddef>
</doxygen>
