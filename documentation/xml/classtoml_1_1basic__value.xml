<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classtoml_1_1basic__value" kind="class" language="C++" prot="public">
    <compoundname>toml::basic_value</compoundname>
    <includes refid="value_8hpp" local="no">value.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Comment</type>
      </param>
      <param>
        <type>template&lt; typename ... &gt; class</type>
        <declname>Table</declname>
        <defname>Table</defname>
        <defval>std::unordered_map</defval>
      </param>
      <param>
        <type>template&lt; typename ... &gt; class</type>
        <declname>Array</declname>
        <defname>Array</defname>
        <defval>std::vector</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a6c932c4b8ed23e1db10aa64e2f019c06" prot="private" static="no">
        <type><ref refid="structtoml_1_1detail_1_1region__base" kindref="compound">detail::region_base</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::region_base =  detail::region_base</definition>
        <argsstring></argsstring>
        <name>region_base</name>
        <qualifiedname>toml::basic_value::region_base</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="181" column="5" bodyfile="external/toml/value.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1afccd34961cf93e0ea08eacbacd6c10d0" prot="private" static="no">
        <type><ref refid="structtoml_1_1detail_1_1storage" kindref="compound">detail::storage</ref>&lt; <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &gt;</type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::array_storage =  detail::storage&lt;array_type&gt;</definition>
        <argsstring></argsstring>
        <name>array_storage</name>
        <qualifiedname>toml::basic_value::array_storage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1731" column="5" bodyfile="external/toml/value.hpp" bodystart="1731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a9eb798c571cbba787d5191fef47ed8c8" prot="private" static="no">
        <type><ref refid="structtoml_1_1detail_1_1storage" kindref="compound">detail::storage</ref>&lt; <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &gt;</type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::table_storage =  detail::storage&lt;table_type&gt;</definition>
        <argsstring></argsstring>
        <name>table_storage</name>
        <qualifiedname>toml::basic_value::table_storage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1732" column="5" bodyfile="external/toml/value.hpp" bodystart="1732" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1aabbcc042ee2a6626149624de4e4c0de3" prot="public" static="no">
        <type>Comment</type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::comment_type =  Comment</definition>
        <argsstring></argsstring>
        <name>comment_type</name>
        <qualifiedname>toml::basic_value::comment_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="189" column="5" bodyfile="external/toml/value.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a0b0664d2c7f6f4d7562560f9378ea002" prot="public" static="no">
        <type><ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">::toml::key</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::key_type =  ::toml::key</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <qualifiedname>toml::basic_value::key_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="190" column="5" bodyfile="external/toml/value.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" prot="public" static="no">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; <ref refid="classtoml_1_1basic__value_1aabbcc042ee2a6626149624de4e4c0de3" kindref="member">comment_type</ref>, Table, Array &gt;</type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::value_type =  basic_value&lt;comment_type, Table, Array&gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>toml::basic_value::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="191" column="5" bodyfile="external/toml/value.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a602e75a07abc59bd28bf5d3e4544236f" prot="public" static="no">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">::toml::boolean</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::boolean_type =  ::toml::boolean</definition>
        <argsstring></argsstring>
        <name>boolean_type</name>
        <qualifiedname>toml::basic_value::boolean_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="192" column="5" bodyfile="external/toml/value.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a06c7c48e86aa536d8b23d7c0b7bf77cb" prot="public" static="no">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">::toml::integer</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::integer_type =  ::toml::integer</definition>
        <argsstring></argsstring>
        <name>integer_type</name>
        <qualifiedname>toml::basic_value::integer_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="193" column="5" bodyfile="external/toml/value.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1abcbcd1275dac02abb4d04248d8584db7" prot="public" static="no">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">::toml::floating</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::floating_type =  ::toml::floating</definition>
        <argsstring></argsstring>
        <name>floating_type</name>
        <qualifiedname>toml::basic_value::floating_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="194" column="5" bodyfile="external/toml/value.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a7b20b2d6fe1b3a1574d91ce733e01813" prot="public" static="no">
        <type><ref refid="structtoml_1_1string" kindref="compound">::toml::string</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::string_type =  ::toml::string</definition>
        <argsstring></argsstring>
        <name>string_type</name>
        <qualifiedname>toml::basic_value::string_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="195" column="5" bodyfile="external/toml/value.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a2f9965e91eeb596f17406e2ab752f5b7" prot="public" static="no">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">::toml::local_time</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::local_time_type =  ::toml::local_time</definition>
        <argsstring></argsstring>
        <name>local_time_type</name>
        <qualifiedname>toml::basic_value::local_time_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="196" column="5" bodyfile="external/toml/value.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a0de2989d733997608033cd95543f5994" prot="public" static="no">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">::toml::local_date</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::local_date_type =  ::toml::local_date</definition>
        <argsstring></argsstring>
        <name>local_date_type</name>
        <qualifiedname>toml::basic_value::local_date_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="197" column="5" bodyfile="external/toml/value.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a4387f677f05e3a5bd5a7c3672c7d426a" prot="public" static="no">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">::toml::local_datetime</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::local_datetime_type =  ::toml::local_datetime</definition>
        <argsstring></argsstring>
        <name>local_datetime_type</name>
        <qualifiedname>toml::basic_value::local_datetime_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="198" column="5" bodyfile="external/toml/value.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a38ba457a7d3fd5f5e351bd3615b2f551" prot="public" static="no">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">::toml::offset_datetime</ref></type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::offset_datetime_type =  ::toml::offset_datetime</definition>
        <argsstring></argsstring>
        <name>offset_datetime_type</name>
        <qualifiedname>toml::basic_value::offset_datetime_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="199" column="5" bodyfile="external/toml/value.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" prot="public" static="no">
        <type>Array&lt; <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;</type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::array_type =  Array&lt;value_type&gt;</definition>
        <argsstring></argsstring>
        <name>array_type</name>
        <qualifiedname>toml::basic_value::array_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="200" column="5" bodyfile="external/toml/value.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" prot="public" static="no">
        <type>Table&lt; <ref refid="classtoml_1_1basic__value_1a0b0664d2c7f6f4d7562560f9378ea002" kindref="member">key_type</ref>, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;</type>
        <definition>using toml::basic_value&lt; Comment, Table, Array &gt;::table_type =  Table&lt;key_type, value_type&gt;</definition>
        <argsstring></argsstring>
        <name>table_type</name>
        <qualifiedname>toml::basic_value::table_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="201" column="5" bodyfile="external/toml/value.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtoml_1_1basic__value_1a7407c9d12c5692144265a67641377ce2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class basic_value</definition>
        <argsstring></argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="185" column="18" bodyfile="external/toml/value.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtoml_1_1basic__value_1acdd86eaa6950c5358b3e1f50fafe4f30" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1region__base" kindref="compound">region_base</ref> const *</type>
        <definition>region_base const  * detail::get_region</definition>
        <argsstring>(const Value &amp;v)</argsstring>
        <name>detail::get_region</name>
        <qualifiedname>toml::basic_value::get_region</qualifiedname>
        <param>
          <type>const Value &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1724" column="30"/>
      </memberdef>
      <memberdef kind="friend" id="classtoml_1_1basic__value_1a6d20a286eba332d3e0145c0ffb4f903c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void detail::change_region</definition>
        <argsstring>(Value &amp;v, detail::region reg)</argsstring>
        <name>detail::change_region</name>
        <qualifiedname>toml::basic_value::change_region</qualifiedname>
        <param>
          <type>Value &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1727" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a00dc5e1ad76717b755b9911de0b1c20c" prot="private" static="no" mutable="no">
        <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
        <definition>value_t toml::basic_value&lt; Comment, Table, Array &gt;::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <qualifiedname>toml::basic_value::type_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1734" column="13" bodyfile="external/toml/value.hpp" bodystart="1734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a2ff7b1e91b987b68916429ea35724181" prot="private" static="no" mutable="no">
        <type>union toml::basic_value::@2</type>
        <definition>union toml::basic_value::@2 toml::basic_value&lt; Comment, Table, Array &gt;::@3</definition>
        <argsstring></argsstring>
        <name>@3</name>
        <qualifiedname>toml::basic_value::@3</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1747" column="5"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a203fe3716047b1f00f4db17dfa2ae154" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structtoml_1_1detail_1_1region__base" kindref="compound">region_base</ref> &gt;</type>
        <definition>std::shared_ptr&lt;region_base&gt; toml::basic_value&lt; Comment, Table, Array &gt;::region_info_</definition>
        <argsstring></argsstring>
        <name>region_info_</name>
        <qualifiedname>toml::basic_value::region_info_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1748" column="21" bodyfile="external/toml/value.hpp" bodystart="1748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a3849ba2b73f9280d27df151eaa9496e5" prot="private" static="no" mutable="no">
        <type><ref refid="classtoml_1_1basic__value_1aabbcc042ee2a6626149624de4e4c0de3" kindref="member">comment_type</ref></type>
        <definition>comment_type toml::basic_value&lt; Comment, Table, Array &gt;::comments_</definition>
        <argsstring></argsstring>
        <name>comments_</name>
        <qualifiedname>toml::basic_value::comments_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1749" column="34" bodyfile="external/toml/value.hpp" bodystart="1749" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a31a4863f2acd08964a2a8d5d37fb7645" prot="public" static="no" mutable="no">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref></type>
        <definition>boolean toml::basic_value&lt; Comment, Table, Array &gt;::boolean_</definition>
        <argsstring></argsstring>
        <name>boolean_</name>
        <qualifiedname>toml::basic_value::boolean_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1737" column="25" bodyfile="external/toml/value.hpp" bodystart="1737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a07fccbc3a86b0ae1fc50faf6a5e55f80" prot="public" static="no" mutable="no">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref></type>
        <definition>integer toml::basic_value&lt; Comment, Table, Array &gt;::integer_</definition>
        <argsstring></argsstring>
        <name>integer_</name>
        <qualifiedname>toml::basic_value::integer_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1738" column="25" bodyfile="external/toml/value.hpp" bodystart="1738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1abf2677444c6b82f171dfd31d726f0642" prot="public" static="no" mutable="no">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref></type>
        <definition>floating toml::basic_value&lt; Comment, Table, Array &gt;::floating_</definition>
        <argsstring></argsstring>
        <name>floating_</name>
        <qualifiedname>toml::basic_value::floating_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1739" column="25" bodyfile="external/toml/value.hpp" bodystart="1739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a0369a126d63e8b6da909aa54c40b4cbc" prot="public" static="no" mutable="no">
        <type><ref refid="structtoml_1_1string" kindref="compound">string</ref></type>
        <definition>string toml::basic_value&lt; Comment, Table, Array &gt;::string_</definition>
        <argsstring></argsstring>
        <name>string_</name>
        <qualifiedname>toml::basic_value::string_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1740" column="25" bodyfile="external/toml/value.hpp" bodystart="1740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a1021c04200f4e3c595b0a2fb76e35b4a" prot="public" static="no" mutable="no">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref></type>
        <definition>offset_datetime toml::basic_value&lt; Comment, Table, Array &gt;::offset_datetime_</definition>
        <argsstring></argsstring>
        <name>offset_datetime_</name>
        <qualifiedname>toml::basic_value::offset_datetime_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1741" column="25" bodyfile="external/toml/value.hpp" bodystart="1741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a066d3bee724889bd583eeb9efbb92ce6" prot="public" static="no" mutable="no">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref></type>
        <definition>local_datetime toml::basic_value&lt; Comment, Table, Array &gt;::local_datetime_</definition>
        <argsstring></argsstring>
        <name>local_datetime_</name>
        <qualifiedname>toml::basic_value::local_datetime_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1742" column="25" bodyfile="external/toml/value.hpp" bodystart="1742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a0278720d8ecbfa85f8208e83b1ba1fc5" prot="public" static="no" mutable="no">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref></type>
        <definition>local_date toml::basic_value&lt; Comment, Table, Array &gt;::local_date_</definition>
        <argsstring></argsstring>
        <name>local_date_</name>
        <qualifiedname>toml::basic_value::local_date_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1743" column="25" bodyfile="external/toml/value.hpp" bodystart="1743" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a6fd530e197ace5d0abfd5edc3198784f" prot="public" static="no" mutable="no">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref></type>
        <definition>local_time toml::basic_value&lt; Comment, Table, Array &gt;::local_time_</definition>
        <argsstring></argsstring>
        <name>local_time_</name>
        <qualifiedname>toml::basic_value::local_time_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1744" column="25" bodyfile="external/toml/value.hpp" bodystart="1744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a1b8d00f53199da592e861261a95f35b6" prot="public" static="no" mutable="no">
        <type><ref refid="structtoml_1_1detail_1_1storage" kindref="compound">array_storage</ref></type>
        <definition>array_storage toml::basic_value&lt; Comment, Table, Array &gt;::array_</definition>
        <argsstring></argsstring>
        <name>array_</name>
        <qualifiedname>toml::basic_value::array_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1745" column="25" bodyfile="external/toml/value.hpp" bodystart="1745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtoml_1_1basic__value_1a1555a6436a8c132e3cd892351ef323ea" prot="public" static="no" mutable="no">
        <type><ref refid="structtoml_1_1detail_1_1storage" kindref="compound">table_storage</ref></type>
        <definition>table_storage toml::basic_value&lt; Comment, Table, Array &gt;::table_</definition>
        <argsstring></argsstring>
        <name>table_</name>
        <qualifiedname>toml::basic_value::table_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1746" column="25" bodyfile="external/toml/value.hpp" bodystart="1746" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classtoml_1_1basic__value_1a3b96f7d58c62eb477fcae612df075e3b" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void toml::basic_value&lt; Comment, Table, Array &gt;::assigner</definition>
        <argsstring>(T &amp;dst, U &amp;&amp;v)</argsstring>
        <name>assigner</name>
        <qualifiedname>toml::basic_value::assigner</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="174" column="17" bodyfile="external/toml/value.hpp" bodystart="174" bodyend="179"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtoml_1_1basic__value_1a91a9ef3a360a41036bf5e8b9c155572d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>() noexcept</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="205" column="5" bodyfile="external/toml/value.hpp" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa6528f7eee91e323ff0bc63d2338cb55" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::~basic_value</definition>
        <argsstring>() noexcept</argsstring>
        <name>~basic_value</name>
        <qualifiedname>toml::basic_value::~basic_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="209" column="5" bodyfile="external/toml/value.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a2e193fabaed80beed0099c44e7f35d2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const basic_value &amp;v)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="211" column="5" bodyfile="external/toml/value.hpp" bodystart="211" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a66c094037a3e21a5642b5f41f29eb078" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(basic_value &amp;&amp;v)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="229" column="5" bodyfile="external/toml/value.hpp" bodystart="229" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aca8d43cd6fb2a76f85eb79b045d720dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const basic_value &amp;v)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="248" column="17" bodyfile="external/toml/value.hpp" bodystart="248" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae81f48d49ec4e552c468767fcfa3d663" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(basic_value &amp;&amp;v)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="270" column="17" bodyfile="external/toml/value.hpp" bodystart="270" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a49b37bc38a4d6b52f4b287a915343a76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const basic_value &amp;v, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="295" column="5" bodyfile="external/toml/value.hpp" bodystart="295" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a449d12e42a96fda94cab0f04aedcb0b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(basic_value &amp;&amp;v, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="315" column="5" bodyfile="external/toml/value.hpp" bodystart="315" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a0d7fb4fccacf696af68f8c5ee9dfea17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;v)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="340" column="5" bodyfile="external/toml/value.hpp" bodystart="340" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a636b08096e259b822bbe607a1b3a5677" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;v, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="373" column="5" bodyfile="external/toml/value.hpp" bodystart="373" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a52d13f5734ccfb6f39eaa0b800b5d3fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>template&lt; typename ... &gt; class</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const basic_value&lt; C, T, A &gt; &amp;v)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref>&lt; C, T, A &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="407" column="17" bodyfile="external/toml/value.hpp" bodystart="407" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a8a6ad4c36dd5c1cf02979e4865ac5a5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(boolean b)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="443" column="5" bodyfile="external/toml/value.hpp" bodystart="443" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a02f48c8bb57a7d1a5d3cefc3edbd9d3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(boolean b)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="449" column="17" bodyfile="external/toml/value.hpp" bodystart="449" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a411eb732ba7016d07fc480092eb0e1b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(boolean b, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="457" column="5" bodyfile="external/toml/value.hpp" bodystart="457" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a57e2f8392c9fa433cfd5ccf8a12cae9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; std::is_integral&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(T i)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>T</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="470" column="5" bodyfile="external/toml/value.hpp" bodystart="470" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae7bedeb509e42619c0ea3573b81d7553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; std::is_integral&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(T i)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>T</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="480" column="17" bodyfile="external/toml/value.hpp" bodystart="480" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a78263343ee6588bd57f3b8a5725cbd0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; std::is_integral&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(T i, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>T</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="492" column="5" bodyfile="external/toml/value.hpp" bodystart="492" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad19bd78952566af569dd6ea8a2897f92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_floating_point&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(T f)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>T</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="504" column="5" bodyfile="external/toml/value.hpp" bodystart="504" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aff37a6c829f38f1f8abee4912bb578a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_floating_point&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(T f)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>T</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="514" column="17" bodyfile="external/toml/value.hpp" bodystart="514" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad71e1d3c84ce2681f16c02dba84e9e49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_floating_point&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(T f, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>T</type>
          <declname>f</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="525" column="5" bodyfile="external/toml/value.hpp" bodystart="525" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a1182bce2fc333e619b82f067f3e99df3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(toml::string s)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1string" kindref="compound">toml::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="535" column="5" bodyfile="external/toml/value.hpp" bodystart="535" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a1619cd64384676037c309a039d04b964" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(toml::string s)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1string" kindref="compound">toml::string</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="541" column="17" bodyfile="external/toml/value.hpp" bodystart="541" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1af223e2a094f085e9062ed8d9c8189873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(toml::string s, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1string" kindref="compound">toml::string</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="549" column="5" bodyfile="external/toml/value.hpp" bodystart="549" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a59e52727526db9d787bdb61057eb11d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::string s)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="557" column="5" bodyfile="external/toml/value.hpp" bodystart="557" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a13d7bfe4c0f461c1d0856a126c762500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(std::string s)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="563" column="17" bodyfile="external/toml/value.hpp" bodystart="563" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a04505fa251ae1372d8fff35fbf620368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::string s, string_t kind)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="571" column="5" bodyfile="external/toml/value.hpp" bodystart="571" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4fc7d58b3f5265cd4d453f207bdfe67c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::string s, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="577" column="5" bodyfile="external/toml/value.hpp" bodystart="577" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad44712985157255b9f6d86b52a0da425" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::string s, string_t kind, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="584" column="5" bodyfile="external/toml/value.hpp" bodystart="584" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1afc4c69249d8b0671441eecfda0bedfd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const char *s)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="592" column="5" bodyfile="external/toml/value.hpp" bodystart="592" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4a05f81a11c4187c04a461014b59525b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const char *s)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="598" column="17" bodyfile="external/toml/value.hpp" bodystart="598" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac72e1934dba7ad3592ebd1cddfe7df81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const char *s, string_t kind)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="606" column="5" bodyfile="external/toml/value.hpp" bodystart="606" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1af637098813f319720a063970d81f485b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const char *s, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="612" column="5" bodyfile="external/toml/value.hpp" bodystart="612" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a879ef933eff32117877b7b5f850c17d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const char *s, string_t kind, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="namespacetoml_1a54c05bb4b385f96d45e3807a92c1d19a" kindref="member">string_t</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="619" column="5" bodyfile="external/toml/value.hpp" bodystart="619" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad64001ae93d8d89b572b73e1d72630cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_date &amp;ld)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>ld</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="666" column="5" bodyfile="external/toml/value.hpp" bodystart="666" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa6872a4fabc7686ed236e9aca619d61a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const local_date &amp;ld)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>ld</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="672" column="17" bodyfile="external/toml/value.hpp" bodystart="672" bodyend="679"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a955499879354dbea6d988e995cd410a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_date &amp;ld, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>ld</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="680" column="5" bodyfile="external/toml/value.hpp" bodystart="680" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae605fbf686cfb2018f6e9f5f8714096f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_time &amp;lt)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="690" column="5" bodyfile="external/toml/value.hpp" bodystart="690" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1abae75de0022b9f4a4228df309770b8d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_time &amp;lt, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="696" column="5" bodyfile="external/toml/value.hpp" bodystart="696" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac208ec4a6a21da54311f17b9bf34c94c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const local_time &amp;lt)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="703" column="17" bodyfile="external/toml/value.hpp" bodystart="703" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9a0b758f18097d8e875a00271192f19a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rep</type>
          </param>
          <param>
            <type>typename Period</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const std::chrono::duration&lt; Rep, Period &gt; &amp;dur)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const std::chrono::duration&lt; Rep, Period &gt; &amp;</type>
          <declname>dur</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="713" column="5" bodyfile="external/toml/value.hpp" bodystart="713" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae00c1affa89b81b660424d34c8666d31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rep</type>
          </param>
          <param>
            <type>typename Period</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const std::chrono::duration&lt; Rep, Period &gt; &amp;dur, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const std::chrono::duration&lt; Rep, Period &gt; &amp;</type>
          <declname>dur</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="720" column="5" bodyfile="external/toml/value.hpp" bodystart="720" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4ddcc51bcfb36a28374182a524112574" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rep</type>
          </param>
          <param>
            <type>typename Period</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const std::chrono::duration&lt; Rep, Period &gt; &amp;dur)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const std::chrono::duration&lt; Rep, Period &gt; &amp;</type>
          <declname>dur</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="729" column="17" bodyfile="external/toml/value.hpp" bodystart="729" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a875b7686c84eaeb3c400867bebb6d93d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_datetime &amp;ldt)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>ldt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="740" column="5" bodyfile="external/toml/value.hpp" bodystart="740" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1abfcb87278a5e64c88d74a34f596ac899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_datetime &amp;ldt, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>ldt</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="746" column="5" bodyfile="external/toml/value.hpp" bodystart="746" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a62fc4cb971a2b0da65d27c863c07eab6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const local_datetime &amp;ldt)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>ldt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="753" column="17" bodyfile="external/toml/value.hpp" bodystart="753" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a16aebfef0784160cc2e9f3d4ef6f42dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const offset_datetime &amp;odt)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>odt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="764" column="5" bodyfile="external/toml/value.hpp" bodystart="764" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a98fb1d5d9f3aa490c4067c2a2a80839a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const offset_datetime &amp;odt, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>odt</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="770" column="5" bodyfile="external/toml/value.hpp" bodystart="770" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae83b750d193321a3a57170556a436f1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const offset_datetime &amp;odt)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>odt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="777" column="17" bodyfile="external/toml/value.hpp" bodystart="777" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9d988160f3df16bb49710a8abf9158a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const std::chrono::system_clock::time_point &amp;tp)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const std::chrono::system_clock::time_point &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="785" column="5" bodyfile="external/toml/value.hpp" bodystart="785" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad99bfedcdd47ec626266b4a56234794b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const std::chrono::system_clock::time_point &amp;tp, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const std::chrono::system_clock::time_point &amp;</type>
          <declname>tp</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="791" column="5" bodyfile="external/toml/value.hpp" bodystart="791" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a012196900f8a36b53b25cc5dd4a3b277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const std::chrono::system_clock::time_point &amp;tp)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const std::chrono::system_clock::time_point &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="799" column="17" bodyfile="external/toml/value.hpp" bodystart="799" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a77955ba461d3a987bcfb7d64e1c3722d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const array_type &amp;ary)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;</type>
          <declname>ary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="810" column="5" bodyfile="external/toml/value.hpp" bodystart="810" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a821fc368bf5c14915e29353cc01b4b17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const array_type &amp;ary, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;</type>
          <declname>ary</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="816" column="5" bodyfile="external/toml/value.hpp" bodystart="816" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9f76d3a0469091c9d7326ac8940694b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const array_type &amp;ary)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;</type>
          <declname>ary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="823" column="17" bodyfile="external/toml/value.hpp" bodystart="823" bodyend="830"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9071f6f205c816162cbae9d4b3dff1ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::initializer_list&lt; T &gt; list)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="837" column="5" bodyfile="external/toml/value.hpp" bodystart="837" bodyend="843"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aeddd55b0f126f0af4e71020a1722a702" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::initializer_list&lt; T &gt; list, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="847" column="5" bodyfile="external/toml/value.hpp" bodystart="847" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac442fe1a10b3afab3d071660d9b076c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_convertible&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(std::initializer_list&lt; T &gt; list)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="858" column="17" bodyfile="external/toml/value.hpp" bodystart="858" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa81dad8038a7046b699779db89b8f912" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">detail::is_container</ref>&lt; T &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const T &amp;list)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="875" column="5" bodyfile="external/toml/value.hpp" bodystart="875" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae76efbec3a291c8b69d3b38d52b00149" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">detail::is_container</ref>&lt; T &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const T &amp;list, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="890" column="5" bodyfile="external/toml/value.hpp" bodystart="890" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a28bb639dfb0b10e69271f922bc960906" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1is__container" kindref="compound">detail::is_container</ref>&lt; T &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const T &amp;list)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="906" column="17" bodyfile="external/toml/value.hpp" bodystart="906" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac85768b8ae3367992a4b479dba613def" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const table_type &amp;tab)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;</type>
          <declname>tab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="923" column="5" bodyfile="external/toml/value.hpp" bodystart="923" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac8858f0d1a85d71d5b4b386471f667c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const table_type &amp;tab, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;</type>
          <declname>tab</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="929" column="5" bodyfile="external/toml/value.hpp" bodystart="929" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa915c4888db928013603aff9036f8e5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const table_type &amp;tab)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;</type>
          <declname>tab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="936" column="17" bodyfile="external/toml/value.hpp" bodystart="936" bodyend="943"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4ec3038e0cea2a5544a540495553afe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::initializer_list&lt; std::pair&lt; key, basic_value &gt; &gt; list)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::pair&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &gt; &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="947" column="5" bodyfile="external/toml/value.hpp" bodystart="947" bodyend="954"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a58642a5223a6139f3e9351a4d787ade5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::initializer_list&lt; std::pair&lt; key, basic_value &gt; &gt; list, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::pair&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &gt; &gt;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="956" column="5" bodyfile="external/toml/value.hpp" bodystart="956" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4f2a4ddf100decea16030583419f50bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(std::initializer_list&lt; std::pair&lt; key, basic_value &gt; &gt; list)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>std::initializer_list&lt; std::pair&lt; <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref>, <ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &gt; &gt;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="966" column="17" bodyfile="external/toml/value.hpp" bodystart="966" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9af757a211454b1784314e19a7795782" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Map</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; Map, <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">detail::is_map</ref>&lt; Map &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const Map &amp;mp)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const Map &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="984" column="5" bodyfile="external/toml/value.hpp" bodystart="984" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1abbb167375337f0e6d06daf2338349f98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Map</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; Map, <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">detail::is_map</ref>&lt; Map &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const Map &amp;mp, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const Map &amp;</type>
          <declname>mp</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="996" column="5" bodyfile="external/toml/value.hpp" bodystart="996" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1afd1f5083d0d7c4ce2ba3dcad59bd8c92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Map</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; Map, <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &gt; &gt;, <ref refid="structtoml_1_1detail_1_1is__map" kindref="compound">detail::is_map</ref>&lt; Map &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const Map &amp;mp)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const Map &amp;</type>
          <declname>mp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1009" column="17" bodyfile="external/toml/value.hpp" bodystart="1009" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad4bc2a762c0f7264f4f2907542e0f795" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1has__into__toml__method" kindref="compound">detail::has_into_toml_method</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const T &amp;ud)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>ud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1027" column="5" bodyfile="external/toml/value.hpp" bodystart="1027" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1af05e927fd051187098d6258bbbe855ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1has__into__toml__method" kindref="compound">detail::has_into_toml_method</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const T &amp;ud, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>ud</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1031" column="5" bodyfile="external/toml/value.hpp" bodystart="1031" bodyend="1033"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a54c8664edf5c37f62415418867fcf71e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1has__into__toml__method" kindref="compound">detail::has_into_toml_method</ref>&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const T &amp;ud)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>ud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1036" column="17" bodyfile="external/toml/value.hpp" bodystart="1036" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad4bc2a762c0f7264f4f2907542e0f795" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
            <defval>sizeof(<ref refid="structtoml_1_1into" kindref="compound">::toml::into</ref>&lt;T&gt;)</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const T &amp;ud)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>ud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1045" column="5" bodyfile="external/toml/value.hpp" bodystart="1045" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1af05e927fd051187098d6258bbbe855ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
            <defval>sizeof(<ref refid="structtoml_1_1into" kindref="compound">::toml::into</ref>&lt;T&gt;)</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const T &amp;ud, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>ud</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1047" column="5" bodyfile="external/toml/value.hpp" bodystart="1047" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a54c8664edf5c37f62415418867fcf71e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>S</declname>
            <defname>S</defname>
            <defval>sizeof(<ref refid="structtoml_1_1into" kindref="compound">::toml::into</ref>&lt;T&gt;)</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value" kindref="compound">basic_value</ref> &amp;</type>
        <definition>basic_value &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator=</definition>
        <argsstring>(const T &amp;ud)</argsstring>
        <name>operator=</name>
        <qualifiedname>toml::basic_value::operator=</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>ud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1051" column="17" bodyfile="external/toml/value.hpp" bodystart="1051" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a1e09a2673f714156545aa193bf6c4513" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(boolean b, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1061" column="5" bodyfile="external/toml/value.hpp" bodystart="1061" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ade832859e58b2f776a0c31df1537c130" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1conjunction" kindref="compound">detail::conjunction</ref>&lt; std::is_integral&lt; T &gt;, <ref refid="structtoml_1_1detail_1_1negation" kindref="compound">detail::negation</ref>&lt; std::is_same&lt; T, <ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &gt; &gt; &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(T i, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>T</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1072" column="5" bodyfile="external/toml/value.hpp" bodystart="1072" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ab64fa0ebc083bde743bd4a6745777450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_floating_point&lt; T &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(T f, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>T</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1081" column="5" bodyfile="external/toml/value.hpp" bodystart="1081" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a87c0ca97ddf2443be5cfac6b0d50f9a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(toml::string s, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type><ref refid="structtoml_1_1string" kindref="compound">toml::string</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1088" column="5" bodyfile="external/toml/value.hpp" bodystart="1088" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aac1f3b81e234f588c62fc491b8328b20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_date &amp;ld, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
          <declname>ld</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1096" column="5" bodyfile="external/toml/value.hpp" bodystart="1096" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a5cb60008129c8c6fb9aea9329e29765b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_time &amp;lt, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1104" column="5" bodyfile="external/toml/value.hpp" bodystart="1104" bodyend="1111"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a30994b6d92d89f8d8c467949daf34400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const local_datetime &amp;ldt, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
          <declname>ldt</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1112" column="5" bodyfile="external/toml/value.hpp" bodystart="1112" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a3a76a4448b86e8c0911ee9d41cdd50f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const offset_datetime &amp;odt, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
          <declname>odt</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1120" column="5" bodyfile="external/toml/value.hpp" bodystart="1120" bodyend="1127"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a301191bf9fae08d947a7e4eb4a6ed7a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const array_type &amp;ary, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;</type>
          <declname>ary</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1128" column="5" bodyfile="external/toml/value.hpp" bodystart="1128" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ab3bc6945049f183c8f05b78956c27514" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(const table_type &amp;tab, detail::region reg, std::vector&lt; std::string &gt; cm)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;</type>
          <declname>tab</declname>
        </param>
        <param>
          <type><ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref></type>
          <declname>reg</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1136" column="5" bodyfile="external/toml/value.hpp" bodystart="1136" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a2f208be3f8eebd0eef7289ceed838b46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>toml::basic_value&lt; Comment, Table, Array &gt;::basic_value</definition>
        <argsstring>(std::pair&lt; T, detail::region &gt; parse_result, std::vector&lt; std::string &gt; com)</argsstring>
        <name>basic_value</name>
        <qualifiedname>toml::basic_value::basic_value</qualifiedname>
        <param>
          <type>std::pair&lt; T, <ref refid="structtoml_1_1detail_1_1region" kindref="compound">detail::region</ref> &gt;</type>
          <declname>parse_result</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>com</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1148" column="5" bodyfile="external/toml/value.hpp" bodystart="1148" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a3ab8d9b76f8236f194ad9e3036c11d41" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; <ref refid="structtoml_1_1detail_1_1is__exact__toml__type" kindref="compound">detail::is_exact_toml_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="namespacetoml_1a34e466167cc683c477838accdebb2578" kindref="member">::value</ref>, std::nullptr_t &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref></type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is</name>
        <qualifiedname>toml::basic_value::is</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1159" column="10" bodyfile="external/toml/value.hpp" bodystart="1159" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4b338987c0305dd56eaa105260f858bd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is</definition>
        <argsstring>(value_t t) const noexcept</argsstring>
        <name>is</name>
        <qualifiedname>toml::basic_value::is</qualifiedname>
        <param>
          <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1163" column="10" bodyfile="external/toml/value.hpp" bodystart="1163" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa9e0adf3eaf980cd7ec1224fa675280c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_uninitialized</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_uninitialized</name>
        <qualifiedname>toml::basic_value::is_uninitialized</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1165" column="10" bodyfile="external/toml/value.hpp" bodystart="1165" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a480543865f432dbc35568f954196e2e2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_boolean</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_boolean</name>
        <qualifiedname>toml::basic_value::is_boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1166" column="10" bodyfile="external/toml/value.hpp" bodystart="1166" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a0c32f842bc29c7788a0b58a1bc436378" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_integer</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_integer</name>
        <qualifiedname>toml::basic_value::is_integer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1167" column="10" bodyfile="external/toml/value.hpp" bodystart="1167" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa3ffdc3a4df542fc4bc140fa74b21e59" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_floating</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_floating</name>
        <qualifiedname>toml::basic_value::is_floating</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1168" column="10" bodyfile="external/toml/value.hpp" bodystart="1168" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa7484eeb07b564c7ea8b9728995c60c0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_string</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_string</name>
        <qualifiedname>toml::basic_value::is_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1169" column="10" bodyfile="external/toml/value.hpp" bodystart="1169" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9f593a66f7919c9e4f3c0e00a93cec88" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_offset_datetime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_offset_datetime</name>
        <qualifiedname>toml::basic_value::is_offset_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1170" column="10" bodyfile="external/toml/value.hpp" bodystart="1170" bodyend="1170"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a74e4b24b291fbcb2581a5501c14a7712" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_local_datetime</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_local_datetime</name>
        <qualifiedname>toml::basic_value::is_local_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1171" column="10" bodyfile="external/toml/value.hpp" bodystart="1171" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1abb9f5306c085b267824f5f32ed04e1b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_local_date</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_local_date</name>
        <qualifiedname>toml::basic_value::is_local_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1172" column="10" bodyfile="external/toml/value.hpp" bodystart="1172" bodyend="1172"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ada3bd713ab6e0aba5ed3e177417450d4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_local_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_local_time</name>
        <qualifiedname>toml::basic_value::is_local_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1173" column="10" bodyfile="external/toml/value.hpp" bodystart="1173" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a8c80028f02dae5fce11fa2de46e5a202" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_array</name>
        <qualifiedname>toml::basic_value::is_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1174" column="10" bodyfile="external/toml/value.hpp" bodystart="1174" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::is_table</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_table</name>
        <qualifiedname>toml::basic_value::is_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1175" column="10" bodyfile="external/toml/value.hpp" bodystart="1175" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
        <definition>value_t toml::basic_value&lt; Comment, Table, Array &gt;::type</definition>
        <argsstring>() const noexcept</argsstring>
        <name>type</name>
        <qualifiedname>toml::basic_value::type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1177" column="13" bodyfile="external/toml/value.hpp" bodystart="1177" bodyend="1177"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae5611c842305faab95e2953d3623f047" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1enum__to__type" kindref="compound">detail::enum_to_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref> &amp;</type>
        <definition>detail::enum_to_type&lt; T, value_type &gt;::type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::cast</definition>
        <argsstring>() &amp;</argsstring>
        <name>cast</name>
        <qualifiedname>toml::basic_value::cast</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1180" column="48" bodyfile="external/toml/value.hpp" bodystart="1180" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a0e5950a1aa242e885f59291ebe5cc235" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1enum__to__type" kindref="compound">detail::enum_to_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref> const &amp;</type>
        <definition>detail::enum_to_type&lt; T, value_type &gt;::type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::cast</definition>
        <argsstring>() const &amp;</argsstring>
        <name>cast</name>
        <qualifiedname>toml::basic_value::cast</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1189" column="48" bodyfile="external/toml/value.hpp" bodystart="1189" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a3e8f158332cccf49b1ce60728b296f10" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacetoml_1a99b223fe1b911188b415ace2e80d9aaa" kindref="member">value_t</ref></type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structtoml_1_1detail_1_1enum__to__type" kindref="compound">detail::enum_to_type</ref>&lt; T, <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &gt;<ref refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" kindref="member">::type</ref> &amp;&amp;</type>
        <definition>detail::enum_to_type&lt; T, value_type &gt;::type &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::cast</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>cast</name>
        <qualifiedname>toml::basic_value::cast</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1198" column="47" bodyfile="external/toml/value.hpp" bodystart="1198" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae07b24787a4e58745c6637819905a398" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> const &amp;</type>
        <definition>boolean const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_boolean</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_boolean</name>
        <qualifiedname>toml::basic_value::as_boolean</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1210" column="27" bodyfile="external/toml/value.hpp" bodystart="1210" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aca975951282724efbfdb52658a4de470" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref> const &amp;</type>
        <definition>integer const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_integer</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_integer</name>
        <qualifiedname>toml::basic_value::as_integer</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1211" column="27" bodyfile="external/toml/value.hpp" bodystart="1211" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a2e3042121a3ecaaf09bbfc7b81c3bb04" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref> const &amp;</type>
        <definition>floating const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_floating</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_floating</name>
        <qualifiedname>toml::basic_value::as_floating</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1212" column="27" bodyfile="external/toml/value.hpp" bodystart="1212" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aec4c6cab5956662a54d2ff83db6e32b6" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1string" kindref="compound">string</ref> const &amp;</type>
        <definition>string const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_string</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_string</name>
        <qualifiedname>toml::basic_value::as_string</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1213" column="27" bodyfile="external/toml/value.hpp" bodystart="1213" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ab31b634452333d71437751b91f4238a1" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> const &amp;</type>
        <definition>offset_datetime const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_offset_datetime</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_offset_datetime</name>
        <qualifiedname>toml::basic_value::as_offset_datetime</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1214" column="27" bodyfile="external/toml/value.hpp" bodystart="1214" bodyend="1214"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a13d6a5211e94af0f3af5c6a5fb69ea46" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> const &amp;</type>
        <definition>local_datetime const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_datetime</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_local_datetime</name>
        <qualifiedname>toml::basic_value::as_local_datetime</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1215" column="27" bodyfile="external/toml/value.hpp" bodystart="1215" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ab1d72b0d89ceb4ccd8fc6d2805ff7dff" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> const &amp;</type>
        <definition>local_date const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_date</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_local_date</name>
        <qualifiedname>toml::basic_value::as_local_date</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1216" column="27" bodyfile="external/toml/value.hpp" bodystart="1216" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1af758543d5a6dfe377ecf96c761bcb4b3" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> const &amp;</type>
        <definition>local_time const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_time</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_local_time</name>
        <qualifiedname>toml::basic_value::as_local_time</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1217" column="27" bodyfile="external/toml/value.hpp" bodystart="1217" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> const &amp;</type>
        <definition>array_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_array</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_array</name>
        <qualifiedname>toml::basic_value::as_array</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1218" column="27" bodyfile="external/toml/value.hpp" bodystart="1218" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> const &amp;</type>
        <definition>table_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_table</definition>
        <argsstring>(const std::nothrow_t &amp;) const &amp;noexcept</argsstring>
        <name>as_table</name>
        <qualifiedname>toml::basic_value::as_table</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1219" column="27" bodyfile="external/toml/value.hpp" bodystart="1219" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad9abe15cde1402ab219e802d36c4889a" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &amp;</type>
        <definition>boolean &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_boolean</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_boolean</name>
        <qualifiedname>toml::basic_value::as_boolean</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1221" column="21" bodyfile="external/toml/value.hpp" bodystart="1221" bodyend="1221"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a7ff781d73f00e069da45b4e573ba8afc" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref> &amp;</type>
        <definition>integer &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_integer</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_integer</name>
        <qualifiedname>toml::basic_value::as_integer</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1222" column="21" bodyfile="external/toml/value.hpp" bodystart="1222" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac096ebbdfdccb8383912fe3699ac17e4" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref> &amp;</type>
        <definition>floating &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_floating</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_floating</name>
        <qualifiedname>toml::basic_value::as_floating</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1223" column="21" bodyfile="external/toml/value.hpp" bodystart="1223" bodyend="1223"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac72bc73b4a9bd9aab93e634fef65e5c3" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
        <definition>string &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_string</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_string</name>
        <qualifiedname>toml::basic_value::as_string</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1224" column="21" bodyfile="external/toml/value.hpp" bodystart="1224" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a27aec2307d08bbb2973b21fec59ac05e" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
        <definition>offset_datetime &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_offset_datetime</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_offset_datetime</name>
        <qualifiedname>toml::basic_value::as_offset_datetime</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1225" column="21" bodyfile="external/toml/value.hpp" bodystart="1225" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a86ba3098eae5ab2e79b51442ae472c49" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
        <definition>local_datetime &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_datetime</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_local_datetime</name>
        <qualifiedname>toml::basic_value::as_local_datetime</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1226" column="21" bodyfile="external/toml/value.hpp" bodystart="1226" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a2a1c37d7a9865d5f90e2125d5aa96d02" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
        <definition>local_date &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_date</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_local_date</name>
        <qualifiedname>toml::basic_value::as_local_date</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1227" column="21" bodyfile="external/toml/value.hpp" bodystart="1227" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a87eae5bdf8069b09f10d3b9574649070" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
        <definition>local_time &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_time</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_local_time</name>
        <qualifiedname>toml::basic_value::as_local_time</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1228" column="21" bodyfile="external/toml/value.hpp" bodystart="1228" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a811f77ca58eebc6b0429b882163e55ce" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;</type>
        <definition>array_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_array</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_array</name>
        <qualifiedname>toml::basic_value::as_array</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1229" column="21" bodyfile="external/toml/value.hpp" bodystart="1229" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4989f0bc263457daed68f7a4c4c87fc8" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;</type>
        <definition>table_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_table</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;noexcept</argsstring>
        <name>as_table</name>
        <qualifiedname>toml::basic_value::as_table</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1230" column="21" bodyfile="external/toml/value.hpp" bodystart="1230" bodyend="1230"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1abc4fb7e4f0bc57bfb89c20e52812bd24" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &amp;&amp;</type>
        <definition>boolean &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_boolean</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_boolean</name>
        <qualifiedname>toml::basic_value::as_boolean</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1232" column="21" bodyfile="external/toml/value.hpp" bodystart="1232" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aaba1b67ab340cb7d997152d1bb37213c" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref> &amp;&amp;</type>
        <definition>integer &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_integer</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_integer</name>
        <qualifiedname>toml::basic_value::as_integer</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1233" column="21" bodyfile="external/toml/value.hpp" bodystart="1233" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa752eae716a788c66f020dc68602174b" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref> &amp;&amp;</type>
        <definition>floating &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_floating</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_floating</name>
        <qualifiedname>toml::basic_value::as_floating</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1234" column="21" bodyfile="external/toml/value.hpp" bodystart="1234" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a50e86c864b9bc82fa662ce788aaddc98" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;&amp;</type>
        <definition>string &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_string</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_string</name>
        <qualifiedname>toml::basic_value::as_string</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1235" column="21" bodyfile="external/toml/value.hpp" bodystart="1235" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1acca19081e834b27a62bc4ad324cc882a" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;&amp;</type>
        <definition>offset_datetime &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_offset_datetime</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_offset_datetime</name>
        <qualifiedname>toml::basic_value::as_offset_datetime</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1236" column="21" bodyfile="external/toml/value.hpp" bodystart="1236" bodyend="1236"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a447ac753c359edbd4bc3b56b5a70fdc1" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;&amp;</type>
        <definition>local_datetime &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_datetime</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_local_datetime</name>
        <qualifiedname>toml::basic_value::as_local_datetime</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1237" column="21" bodyfile="external/toml/value.hpp" bodystart="1237" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a2871b427d4631aa592cac007b23ea927" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;&amp;</type>
        <definition>local_date &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_date</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_local_date</name>
        <qualifiedname>toml::basic_value::as_local_date</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1238" column="21" bodyfile="external/toml/value.hpp" bodystart="1238" bodyend="1238"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a1e84d6fbb8c20851ae235a53851a805b" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;&amp;</type>
        <definition>local_time &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_time</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_local_time</name>
        <qualifiedname>toml::basic_value::as_local_time</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1239" column="21" bodyfile="external/toml/value.hpp" bodystart="1239" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a96a6ceddc03d2bb8ad260e3599f4af9e" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;&amp;</type>
        <definition>array_type &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_array</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_array</name>
        <qualifiedname>toml::basic_value::as_array</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1240" column="21" bodyfile="external/toml/value.hpp" bodystart="1240" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9353cfc23b4247982fcd8fd9fbafe32a" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;&amp;</type>
        <definition>table_type &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_table</definition>
        <argsstring>(const std::nothrow_t &amp;) &amp;&amp;noexcept</argsstring>
        <name>as_table</name>
        <qualifiedname>toml::basic_value::as_table</qualifiedname>
        <param>
          <type>const std::nothrow_t &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1241" column="21" bodyfile="external/toml/value.hpp" bodystart="1241" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a40a71333036cfec7ae574628ec63d3db" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> const &amp;</type>
        <definition>boolean const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_boolean</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_boolean</name>
        <qualifiedname>toml::basic_value::as_boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1248" column="19" bodyfile="external/toml/value.hpp" bodystart="1248" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aca53a0c608473973fa66f44dd3dc15c4" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref> const &amp;</type>
        <definition>integer const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_integer</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_integer</name>
        <qualifiedname>toml::basic_value::as_integer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1257" column="19" bodyfile="external/toml/value.hpp" bodystart="1257" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1adc90bfa65ca941d881fdc67d4cfd6fd5" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref> const &amp;</type>
        <definition>floating const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_floating</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_floating</name>
        <qualifiedname>toml::basic_value::as_floating</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1266" column="20" bodyfile="external/toml/value.hpp" bodystart="1266" bodyend="1274"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a5286c8fd456020b83753b194d4d42823" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1string" kindref="compound">string</ref> const &amp;</type>
        <definition>string const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_string</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_string</name>
        <qualifiedname>toml::basic_value::as_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1275" column="18" bodyfile="external/toml/value.hpp" bodystart="1275" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1abc9359a00e7381be579c356021cfe9e2" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> const &amp;</type>
        <definition>offset_datetime const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_offset_datetime</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_offset_datetime</name>
        <qualifiedname>toml::basic_value::as_offset_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1284" column="27" bodyfile="external/toml/value.hpp" bodystart="1284" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a1f36ac145644d9481e54e86c5f17490e" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> const &amp;</type>
        <definition>local_datetime const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_datetime</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_local_datetime</name>
        <qualifiedname>toml::basic_value::as_local_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1293" column="26" bodyfile="external/toml/value.hpp" bodystart="1293" bodyend="1301"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a03d9f164c3dc0873679bbb797e71ff42" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> const &amp;</type>
        <definition>local_date const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_date</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_local_date</name>
        <qualifiedname>toml::basic_value::as_local_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1302" column="22" bodyfile="external/toml/value.hpp" bodystart="1302" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a5e1688021ba2e170d0ec560133c58615" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> const &amp;</type>
        <definition>local_time const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_time</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_local_time</name>
        <qualifiedname>toml::basic_value::as_local_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1311" column="22" bodyfile="external/toml/value.hpp" bodystart="1311" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a92e13878f4a4b745460b27f91dca93b7" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> const &amp;</type>
        <definition>array_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_array</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_array</name>
        <qualifiedname>toml::basic_value::as_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1320" column="22" bodyfile="external/toml/value.hpp" bodystart="1320" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a8e1fa13a28021437af25f2a461cccf86" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> const &amp;</type>
        <definition>table_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_table</definition>
        <argsstring>() const &amp;</argsstring>
        <name>as_table</name>
        <qualifiedname>toml::basic_value::as_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1329" column="22" bodyfile="external/toml/value.hpp" bodystart="1329" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa2fe99c2857520ffcce08f53f59765d9" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &amp;</type>
        <definition>boolean &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_boolean</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_boolean</name>
        <qualifiedname>toml::basic_value::as_boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1342" column="14" bodyfile="external/toml/value.hpp" bodystart="1342" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a7efad6afc4fac215b2612665875b81fd" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref> &amp;</type>
        <definition>integer &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_integer</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_integer</name>
        <qualifiedname>toml::basic_value::as_integer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1351" column="14" bodyfile="external/toml/value.hpp" bodystart="1351" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa44759650a0970a12dc94c34cdc80ca6" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref> &amp;</type>
        <definition>floating &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_floating</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_floating</name>
        <qualifiedname>toml::basic_value::as_floating</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1360" column="15" bodyfile="external/toml/value.hpp" bodystart="1360" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a9daabfcc3cdae724526437ca68b25ff6" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;</type>
        <definition>string &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_string</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_string</name>
        <qualifiedname>toml::basic_value::as_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1369" column="13" bodyfile="external/toml/value.hpp" bodystart="1369" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad99a5ed0619ac04385846f4af86468d3" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;</type>
        <definition>offset_datetime &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_offset_datetime</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_offset_datetime</name>
        <qualifiedname>toml::basic_value::as_offset_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1378" column="22" bodyfile="external/toml/value.hpp" bodystart="1378" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a3ad18f132c084262380f5efd3b9c672f" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;</type>
        <definition>local_datetime &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_datetime</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_local_datetime</name>
        <qualifiedname>toml::basic_value::as_local_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1387" column="21" bodyfile="external/toml/value.hpp" bodystart="1387" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a37cc4f3085bf7f8f886b074996995919" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;</type>
        <definition>local_date &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_date</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_local_date</name>
        <qualifiedname>toml::basic_value::as_local_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1396" column="17" bodyfile="external/toml/value.hpp" bodystart="1396" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a90f3c6cdaef6f049cc710714d3914370" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;</type>
        <definition>local_time &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_time</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_local_time</name>
        <qualifiedname>toml::basic_value::as_local_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1405" column="17" bodyfile="external/toml/value.hpp" bodystart="1405" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a841e2f7d41b3c597075e4d36826a4c55" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;</type>
        <definition>array_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_array</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_array</name>
        <qualifiedname>toml::basic_value::as_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1414" column="17" bodyfile="external/toml/value.hpp" bodystart="1414" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1acc9775180970666bddb82c3826d3f26f" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;</type>
        <definition>table_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_table</definition>
        <argsstring>() &amp;</argsstring>
        <name>as_table</name>
        <qualifiedname>toml::basic_value::as_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1423" column="17" bodyfile="external/toml/value.hpp" bodystart="1423" bodyend="1431"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a5b4b09a86c0ae4a54c944bd73f1d50df" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1a536c45fdc142655af40475187d5a6702" kindref="member">boolean</ref> &amp;&amp;</type>
        <definition>boolean &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_boolean</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_boolean</name>
        <qualifiedname>toml::basic_value::as_boolean</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1437" column="14" bodyfile="external/toml/value.hpp" bodystart="1437" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae377e6e3efc2755ab8a484f2024539fb" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1ad9642acd2a70ea10c7c6c1b53a3caac9" kindref="member">integer</ref> &amp;&amp;</type>
        <definition>integer &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_integer</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_integer</name>
        <qualifiedname>toml::basic_value::as_integer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1446" column="14" bodyfile="external/toml/value.hpp" bodystart="1446" bodyend="1454"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a47a12759275f717266ce714dba303be1" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="namespacetoml_1a54f4b85eab8f0d6e6f0149c5ba338f6a" kindref="member">floating</ref> &amp;&amp;</type>
        <definition>floating &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_floating</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_floating</name>
        <qualifiedname>toml::basic_value::as_floating</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1455" column="15" bodyfile="external/toml/value.hpp" bodystart="1455" bodyend="1463"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a8c83b2f395261a14e87e0c0fe61983bb" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1string" kindref="compound">string</ref> &amp;&amp;</type>
        <definition>string &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_string</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_string</name>
        <qualifiedname>toml::basic_value::as_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1464" column="13" bodyfile="external/toml/value.hpp" bodystart="1464" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a4967698cf2f5bef43f6d4cd32eeb05f1" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1offset__datetime" kindref="compound">offset_datetime</ref> &amp;&amp;</type>
        <definition>offset_datetime &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_offset_datetime</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_offset_datetime</name>
        <qualifiedname>toml::basic_value::as_offset_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1473" column="22" bodyfile="external/toml/value.hpp" bodystart="1473" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a8571f269e1df87fd0211fa5a84823704" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__datetime" kindref="compound">local_datetime</ref> &amp;&amp;</type>
        <definition>local_datetime &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_datetime</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_local_datetime</name>
        <qualifiedname>toml::basic_value::as_local_datetime</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1482" column="21" bodyfile="external/toml/value.hpp" bodystart="1482" bodyend="1490"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a59103d7f2e07437dca1de5bf30b2535b" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__date" kindref="compound">local_date</ref> &amp;&amp;</type>
        <definition>local_date &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_date</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_local_date</name>
        <qualifiedname>toml::basic_value::as_local_date</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1491" column="17" bodyfile="external/toml/value.hpp" bodystart="1491" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad1febeb0081f1ef3e7d721de05a4ad37" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="structtoml_1_1local__time" kindref="compound">local_time</ref> &amp;&amp;</type>
        <definition>local_time &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_local_time</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_local_time</name>
        <qualifiedname>toml::basic_value::as_local_time</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1500" column="17" bodyfile="external/toml/value.hpp" bodystart="1500" bodyend="1508"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac33dc667c7a3dc4bcb4d369271c48279" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" kindref="member">array_type</ref> &amp;&amp;</type>
        <definition>array_type &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_array</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_array</name>
        <qualifiedname>toml::basic_value::as_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1509" column="17" bodyfile="external/toml/value.hpp" bodystart="1509" bodyend="1517"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a1a9a649237f6a8cd249c02d234038b48" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" kindref="member">table_type</ref> &amp;&amp;</type>
        <definition>table_type &amp;&amp; toml::basic_value&lt; Comment, Table, Array &gt;::as_table</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>as_table</name>
        <qualifiedname>toml::basic_value::as_table</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1518" column="17" bodyfile="external/toml/value.hpp" bodystart="1518" bodyend="1526"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ad497266e16a1aa285d224dcf51fa622a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::at</definition>
        <argsstring>(const key &amp;k)</argsstring>
        <name>at</name>
        <qualifiedname>toml::basic_value::at</qualifiedname>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1533" column="22" bodyfile="external/toml/value.hpp" bodystart="1533" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a43fd684b5442a6aa5ac803d374961bc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> const &amp;</type>
        <definition>value_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::at</definition>
        <argsstring>(const key &amp;k) const</argsstring>
        <name>at</name>
        <qualifiedname>toml::basic_value::at</qualifiedname>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1546" column="22" bodyfile="external/toml/value.hpp" bodystart="1546" bodyend="1558"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aa5708563581b8dc6a9f0e6aa200e93cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator[]</definition>
        <argsstring>(const key &amp;k)</argsstring>
        <name>operator[]</name>
        <qualifiedname>toml::basic_value::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="namespacetoml_1ab00c292fbb2e761ef69fdafd6b813348" kindref="member">key</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1559" column="22" bodyfile="external/toml/value.hpp" bodystart="1559" bodyend="1571"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a02006c53cd1001326d2288bd5c290110" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::at</definition>
        <argsstring>(const std::size_t idx)</argsstring>
        <name>at</name>
        <qualifiedname>toml::basic_value::at</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1573" column="22" bodyfile="external/toml/value.hpp" bodystart="1573" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a38cbf135dbb61fb1601f9bee4f10958f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> const &amp;</type>
        <definition>value_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::at</definition>
        <argsstring>(const std::size_t idx) const</argsstring>
        <name>at</name>
        <qualifiedname>toml::basic_value::at</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1591" column="22" bodyfile="external/toml/value.hpp" bodystart="1591" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a05aa134b8e1898b6537eccc353c55080" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator[]</definition>
        <argsstring>(const std::size_t idx) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>toml::basic_value::operator[]</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1610" column="22" bodyfile="external/toml/value.hpp" bodystart="1610" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ac62400a056fa9a058931019c28519631" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> const &amp;</type>
        <definition>value_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::operator[]</definition>
        <argsstring>(const std::size_t idx) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>toml::basic_value::operator[]</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1615" column="22" bodyfile="external/toml/value.hpp" bodystart="1615" bodyend="1619"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a5070496463735ce25ae8765ab5cb90ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void toml::basic_value&lt; Comment, Table, Array &gt;::push_back</definition>
        <argsstring>(const value_type &amp;x)</argsstring>
        <name>push_back</name>
        <qualifiedname>toml::basic_value::push_back</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1621" column="10" bodyfile="external/toml/value.hpp" bodystart="1621" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a61425ea82266c76e65199477582b01ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void toml::basic_value&lt; Comment, Table, Array &gt;::push_back</definition>
        <argsstring>(value_type &amp;&amp;x)</argsstring>
        <name>push_back</name>
        <qualifiedname>toml::basic_value::push_back</qualifiedname>
        <param>
          <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1631" column="10" bodyfile="external/toml/value.hpp" bodystart="1631" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a1da43fe1dd490ccb52bafaa019b0b336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" kindref="member">value_type</ref> &amp;</type>
        <definition>value_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::emplace_back</definition>
        <argsstring>(Ts &amp;&amp;... args)</argsstring>
        <name>emplace_back</name>
        <qualifiedname>toml::basic_value::emplace_back</qualifiedname>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1643" column="16" bodyfile="external/toml/value.hpp" bodystart="1643" bodyend="1652"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1ae9245601f921e19f5aa55d92ad5cf2c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t toml::basic_value&lt; Comment, Table, Array &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>toml::basic_value::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1654" column="17" bodyfile="external/toml/value.hpp" bodystart="1654" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a6854d91dd03053b3838ee111897d282a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t toml::basic_value&lt; Comment, Table, Array &gt;::count</definition>
        <argsstring>(const key_type &amp;k) const</argsstring>
        <name>count</name>
        <qualifiedname>toml::basic_value::count</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1a0b0664d2c7f6f4d7562560f9378ea002" kindref="member">key_type</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1681" column="17" bodyfile="external/toml/value.hpp" bodystart="1681" bodyend="1689"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1aea6f51ec9e8bcdef5dc6ca6641ab5606" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool toml::basic_value&lt; Comment, Table, Array &gt;::contains</definition>
        <argsstring>(const key_type &amp;k) const</argsstring>
        <name>contains</name>
        <qualifiedname>toml::basic_value::contains</qualifiedname>
        <param>
          <type>const <ref refid="classtoml_1_1basic__value_1a0b0664d2c7f6f4d7562560f9378ea002" kindref="member">key_type</ref> &amp;</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1691" column="10" bodyfile="external/toml/value.hpp" bodystart="1691" bodyend="1699"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a0d39990ac7a3394568165926aed4634a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtoml_1_1source__location" kindref="compound">source_location</ref></type>
        <definition>source_location toml::basic_value&lt; Comment, Table, Array &gt;::location</definition>
        <argsstring>() const</argsstring>
        <name>location</name>
        <qualifiedname>toml::basic_value::location</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1701" column="21" bodyfile="external/toml/value.hpp" bodystart="1701" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a8f30566aaf9f5bdbaeaea4f177b16ff3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1aabbcc042ee2a6626149624de4e4c0de3" kindref="member">comment_type</ref> const &amp;</type>
        <definition>comment_type const  &amp; toml::basic_value&lt; Comment, Table, Array &gt;::comments</definition>
        <argsstring>() const noexcept</argsstring>
        <name>comments</name>
        <qualifiedname>toml::basic_value::comments</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1706" column="24" bodyfile="external/toml/value.hpp" bodystart="1706" bodyend="1706"/>
      </memberdef>
      <memberdef kind="function" id="classtoml_1_1basic__value_1a02d80ca9d8d19ac48b88464478f51550" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classtoml_1_1basic__value_1aabbcc042ee2a6626149624de4e4c0de3" kindref="member">comment_type</ref> &amp;</type>
        <definition>comment_type &amp; toml::basic_value&lt; Comment, Table, Array &gt;::comments</definition>
        <argsstring>() noexcept</argsstring>
        <name>comments</name>
        <qualifiedname>toml::basic_value::comments</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1707" column="24" bodyfile="external/toml/value.hpp" bodystart="1707" bodyend="1707"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtoml_1_1basic__value_1ababfa8a356ac73d31cd1f5a3da16d5f2" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void toml::basic_value&lt; Comment, Table, Array &gt;::cleanup</definition>
        <argsstring>() noexcept</argsstring>
        <name>cleanup</name>
        <qualifiedname>toml::basic_value::cleanup</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="external/toml/value.hpp" line="1711" column="10" bodyfile="external/toml/value.hpp" bodystart="1711" bodyend="1720"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="8">
        <label>toml::detail::storage&lt; array_type &gt;</label>
        <link refid="structtoml_1_1detail_1_1storage"/>
      </node>
      <node id="9">
        <label>toml::detail::storage&lt; table_type &gt;</label>
        <link refid="structtoml_1_1detail_1_1storage"/>
      </node>
      <node id="1">
        <label>toml::basic_value&lt; Comment, Table, Array &gt;</label>
        <link refid="classtoml_1_1basic__value"/>
        <childnode refid="2" relation="usage">
          <edgelabel>string_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>offset_datetime_</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>local_datetime_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>local_date_</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>local_time_</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>array_</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>table_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>toml::local_date</label>
        <link refid="structtoml_1_1local__date"/>
      </node>
      <node id="7">
        <label>toml::local_datetime</label>
        <link refid="structtoml_1_1local__datetime"/>
        <childnode refid="4" relation="usage">
          <edgelabel>date</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>time</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>toml::local_time</label>
        <link refid="structtoml_1_1local__time"/>
      </node>
      <node id="3">
        <label>toml::offset_datetime</label>
        <link refid="structtoml_1_1offset__datetime"/>
        <childnode refid="4" relation="usage">
          <edgelabel>date</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>time</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>toml::string</label>
        <link refid="structtoml_1_1string"/>
      </node>
      <node id="6">
        <label>toml::time_offset</label>
        <link refid="structtoml_1_1time__offset"/>
      </node>
    </collaborationgraph>
    <location file="external/toml/value.hpp" line="171" column="1" bodyfile="external/toml/value.hpp" bodystart="172" bodyend="1750"/>
    <listofallmembers>
      <member refid="classtoml_1_1basic__value_1a1b8d00f53199da592e861261a95f35b6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>array_</name></member>
      <member refid="classtoml_1_1basic__value_1afccd34961cf93e0ea08eacbacd6c10d0" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>array_storage</name></member>
      <member refid="classtoml_1_1basic__value_1ab196b30c252c1f1e1c61019b0e3b8839" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>array_type</name></member>
      <member refid="classtoml_1_1basic__value_1a0be5e35d9160ba668fb82846aa31b853" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_array</name></member>
      <member refid="classtoml_1_1basic__value_1a811f77ca58eebc6b0429b882163e55ce" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_array</name></member>
      <member refid="classtoml_1_1basic__value_1a96a6ceddc03d2bb8ad260e3599f4af9e" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_array</name></member>
      <member refid="classtoml_1_1basic__value_1a92e13878f4a4b745460b27f91dca93b7" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_array</name></member>
      <member refid="classtoml_1_1basic__value_1a841e2f7d41b3c597075e4d36826a4c55" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_array</name></member>
      <member refid="classtoml_1_1basic__value_1ac33dc667c7a3dc4bcb4d369271c48279" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_array</name></member>
      <member refid="classtoml_1_1basic__value_1ae07b24787a4e58745c6637819905a398" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_boolean</name></member>
      <member refid="classtoml_1_1basic__value_1ad9abe15cde1402ab219e802d36c4889a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_boolean</name></member>
      <member refid="classtoml_1_1basic__value_1abc4fb7e4f0bc57bfb89c20e52812bd24" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_boolean</name></member>
      <member refid="classtoml_1_1basic__value_1a40a71333036cfec7ae574628ec63d3db" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_boolean</name></member>
      <member refid="classtoml_1_1basic__value_1aa2fe99c2857520ffcce08f53f59765d9" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_boolean</name></member>
      <member refid="classtoml_1_1basic__value_1a5b4b09a86c0ae4a54c944bd73f1d50df" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_boolean</name></member>
      <member refid="classtoml_1_1basic__value_1a2e3042121a3ecaaf09bbfc7b81c3bb04" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_floating</name></member>
      <member refid="classtoml_1_1basic__value_1ac096ebbdfdccb8383912fe3699ac17e4" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_floating</name></member>
      <member refid="classtoml_1_1basic__value_1aa752eae716a788c66f020dc68602174b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_floating</name></member>
      <member refid="classtoml_1_1basic__value_1adc90bfa65ca941d881fdc67d4cfd6fd5" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_floating</name></member>
      <member refid="classtoml_1_1basic__value_1aa44759650a0970a12dc94c34cdc80ca6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_floating</name></member>
      <member refid="classtoml_1_1basic__value_1a47a12759275f717266ce714dba303be1" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_floating</name></member>
      <member refid="classtoml_1_1basic__value_1aca975951282724efbfdb52658a4de470" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_integer</name></member>
      <member refid="classtoml_1_1basic__value_1a7ff781d73f00e069da45b4e573ba8afc" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_integer</name></member>
      <member refid="classtoml_1_1basic__value_1aaba1b67ab340cb7d997152d1bb37213c" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_integer</name></member>
      <member refid="classtoml_1_1basic__value_1aca53a0c608473973fa66f44dd3dc15c4" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_integer</name></member>
      <member refid="classtoml_1_1basic__value_1a7efad6afc4fac215b2612665875b81fd" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_integer</name></member>
      <member refid="classtoml_1_1basic__value_1ae377e6e3efc2755ab8a484f2024539fb" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_integer</name></member>
      <member refid="classtoml_1_1basic__value_1ab1d72b0d89ceb4ccd8fc6d2805ff7dff" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_date</name></member>
      <member refid="classtoml_1_1basic__value_1a2a1c37d7a9865d5f90e2125d5aa96d02" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_date</name></member>
      <member refid="classtoml_1_1basic__value_1a2871b427d4631aa592cac007b23ea927" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_date</name></member>
      <member refid="classtoml_1_1basic__value_1a03d9f164c3dc0873679bbb797e71ff42" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_date</name></member>
      <member refid="classtoml_1_1basic__value_1a37cc4f3085bf7f8f886b074996995919" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_date</name></member>
      <member refid="classtoml_1_1basic__value_1a59103d7f2e07437dca1de5bf30b2535b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_date</name></member>
      <member refid="classtoml_1_1basic__value_1a13d6a5211e94af0f3af5c6a5fb69ea46" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1a86ba3098eae5ab2e79b51442ae472c49" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1a447ac753c359edbd4bc3b56b5a70fdc1" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1a1f36ac145644d9481e54e86c5f17490e" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1a3ad18f132c084262380f5efd3b9c672f" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1a8571f269e1df87fd0211fa5a84823704" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1af758543d5a6dfe377ecf96c761bcb4b3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_time</name></member>
      <member refid="classtoml_1_1basic__value_1a87eae5bdf8069b09f10d3b9574649070" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_time</name></member>
      <member refid="classtoml_1_1basic__value_1a1e84d6fbb8c20851ae235a53851a805b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_time</name></member>
      <member refid="classtoml_1_1basic__value_1a5e1688021ba2e170d0ec560133c58615" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_time</name></member>
      <member refid="classtoml_1_1basic__value_1a90f3c6cdaef6f049cc710714d3914370" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_time</name></member>
      <member refid="classtoml_1_1basic__value_1ad1febeb0081f1ef3e7d721de05a4ad37" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_local_time</name></member>
      <member refid="classtoml_1_1basic__value_1ab31b634452333d71437751b91f4238a1" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_offset_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1a27aec2307d08bbb2973b21fec59ac05e" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_offset_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1acca19081e834b27a62bc4ad324cc882a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_offset_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1abc9359a00e7381be579c356021cfe9e2" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_offset_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1ad99a5ed0619ac04385846f4af86468d3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_offset_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1a4967698cf2f5bef43f6d4cd32eeb05f1" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_offset_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1aec4c6cab5956662a54d2ff83db6e32b6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_string</name></member>
      <member refid="classtoml_1_1basic__value_1ac72bc73b4a9bd9aab93e634fef65e5c3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_string</name></member>
      <member refid="classtoml_1_1basic__value_1a50e86c864b9bc82fa662ce788aaddc98" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_string</name></member>
      <member refid="classtoml_1_1basic__value_1a5286c8fd456020b83753b194d4d42823" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_string</name></member>
      <member refid="classtoml_1_1basic__value_1a9daabfcc3cdae724526437ca68b25ff6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_string</name></member>
      <member refid="classtoml_1_1basic__value_1a8c83b2f395261a14e87e0c0fe61983bb" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_string</name></member>
      <member refid="classtoml_1_1basic__value_1a7b113a731815356acb870bfe37b15e1b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_table</name></member>
      <member refid="classtoml_1_1basic__value_1a4989f0bc263457daed68f7a4c4c87fc8" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_table</name></member>
      <member refid="classtoml_1_1basic__value_1a9353cfc23b4247982fcd8fd9fbafe32a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_table</name></member>
      <member refid="classtoml_1_1basic__value_1a8e1fa13a28021437af25f2a461cccf86" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_table</name></member>
      <member refid="classtoml_1_1basic__value_1acc9775180970666bddb82c3826d3f26f" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_table</name></member>
      <member refid="classtoml_1_1basic__value_1a1a9a649237f6a8cd249c02d234038b48" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>as_table</name></member>
      <member refid="classtoml_1_1basic__value_1a3b96f7d58c62eb477fcae612df075e3b" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>assigner</name></member>
      <member refid="classtoml_1_1basic__value_1ad497266e16a1aa285d224dcf51fa622a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>at</name></member>
      <member refid="classtoml_1_1basic__value_1a43fd684b5442a6aa5ac803d374961bc8" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>at</name></member>
      <member refid="classtoml_1_1basic__value_1a02006c53cd1001326d2288bd5c290110" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>at</name></member>
      <member refid="classtoml_1_1basic__value_1a38cbf135dbb61fb1601f9bee4f10958f" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>at</name></member>
      <member refid="classtoml_1_1basic__value_1a7407c9d12c5692144265a67641377ce2" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a91a9ef3a360a41036bf5e8b9c155572d" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a2e193fabaed80beed0099c44e7f35d2e" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a66c094037a3e21a5642b5f41f29eb078" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a49b37bc38a4d6b52f4b287a915343a76" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a449d12e42a96fda94cab0f04aedcb0b7" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a0d7fb4fccacf696af68f8c5ee9dfea17" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a636b08096e259b822bbe607a1b3a5677" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a8a6ad4c36dd5c1cf02979e4865ac5a5a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a411eb732ba7016d07fc480092eb0e1b9" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a57e2f8392c9fa433cfd5ccf8a12cae9b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a78263343ee6588bd57f3b8a5725cbd0c" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ad19bd78952566af569dd6ea8a2897f92" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ad71e1d3c84ce2681f16c02dba84e9e49" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a1182bce2fc333e619b82f067f3e99df3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1af223e2a094f085e9062ed8d9c8189873" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a59e52727526db9d787bdb61057eb11d2" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a04505fa251ae1372d8fff35fbf620368" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a4fc7d58b3f5265cd4d453f207bdfe67c" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ad44712985157255b9f6d86b52a0da425" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1afc4c69249d8b0671441eecfda0bedfd1" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ac72e1934dba7ad3592ebd1cddfe7df81" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1af637098813f319720a063970d81f485b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a879ef933eff32117877b7b5f850c17d6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ad64001ae93d8d89b572b73e1d72630cc" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a955499879354dbea6d988e995cd410a8" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ae605fbf686cfb2018f6e9f5f8714096f" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1abae75de0022b9f4a4228df309770b8d8" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a9a0b758f18097d8e875a00271192f19a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ae00c1affa89b81b660424d34c8666d31" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a875b7686c84eaeb3c400867bebb6d93d" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1abfcb87278a5e64c88d74a34f596ac899" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a16aebfef0784160cc2e9f3d4ef6f42dc" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a98fb1d5d9f3aa490c4067c2a2a80839a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a9d988160f3df16bb49710a8abf9158a0" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ad99bfedcdd47ec626266b4a56234794b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a77955ba461d3a987bcfb7d64e1c3722d" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a821fc368bf5c14915e29353cc01b4b17" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a9071f6f205c816162cbae9d4b3dff1ee" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1aeddd55b0f126f0af4e71020a1722a702" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1aa81dad8038a7046b699779db89b8f912" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ae76efbec3a291c8b69d3b38d52b00149" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ac85768b8ae3367992a4b479dba613def" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ac8858f0d1a85d71d5b4b386471f667c4" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a4ec3038e0cea2a5544a540495553afe7" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a58642a5223a6139f3e9351a4d787ade5" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a9af757a211454b1784314e19a7795782" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1abbb167375337f0e6d06daf2338349f98" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ad4bc2a762c0f7264f4f2907542e0f795" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1af05e927fd051187098d6258bbbe855ca" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ad4bc2a762c0f7264f4f2907542e0f795" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1af05e927fd051187098d6258bbbe855ca" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a1e09a2673f714156545aa193bf6c4513" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ade832859e58b2f776a0c31df1537c130" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ab64fa0ebc083bde743bd4a6745777450" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a87c0ca97ddf2443be5cfac6b0d50f9a5" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1aac1f3b81e234f588c62fc491b8328b20" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a5cb60008129c8c6fb9aea9329e29765b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a30994b6d92d89f8d8c467949daf34400" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a3a76a4448b86e8c0911ee9d41cdd50f6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a301191bf9fae08d947a7e4eb4a6ed7a4" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1ab3bc6945049f183c8f05b78956c27514" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a2f208be3f8eebd0eef7289ceed838b46" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>basic_value</name></member>
      <member refid="classtoml_1_1basic__value_1a31a4863f2acd08964a2a8d5d37fb7645" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>boolean_</name></member>
      <member refid="classtoml_1_1basic__value_1a602e75a07abc59bd28bf5d3e4544236f" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>boolean_type</name></member>
      <member refid="classtoml_1_1basic__value_1ae5611c842305faab95e2953d3623f047" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>cast</name></member>
      <member refid="classtoml_1_1basic__value_1a0e5950a1aa242e885f59291ebe5cc235" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>cast</name></member>
      <member refid="classtoml_1_1basic__value_1a3e8f158332cccf49b1ce60728b296f10" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>cast</name></member>
      <member refid="classtoml_1_1basic__value_1ababfa8a356ac73d31cd1f5a3da16d5f2" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>cleanup</name></member>
      <member refid="classtoml_1_1basic__value_1aabbcc042ee2a6626149624de4e4c0de3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>comment_type</name></member>
      <member refid="classtoml_1_1basic__value_1a8f30566aaf9f5bdbaeaea4f177b16ff3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>comments</name></member>
      <member refid="classtoml_1_1basic__value_1a02d80ca9d8d19ac48b88464478f51550" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>comments</name></member>
      <member refid="classtoml_1_1basic__value_1a3849ba2b73f9280d27df151eaa9496e5" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>comments_</name></member>
      <member refid="classtoml_1_1basic__value_1aea6f51ec9e8bcdef5dc6ca6641ab5606" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>contains</name></member>
      <member refid="classtoml_1_1basic__value_1a6854d91dd03053b3838ee111897d282a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>count</name></member>
      <member refid="classtoml_1_1basic__value_1a6d20a286eba332d3e0145c0ffb4f903c" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>detail::change_region</name></member>
      <member refid="classtoml_1_1basic__value_1acdd86eaa6950c5358b3e1f50fafe4f30" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>detail::get_region</name></member>
      <member refid="classtoml_1_1basic__value_1a1da43fe1dd490ccb52bafaa019b0b336" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>emplace_back</name></member>
      <member refid="classtoml_1_1basic__value_1abf2677444c6b82f171dfd31d726f0642" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>floating_</name></member>
      <member refid="classtoml_1_1basic__value_1abcbcd1275dac02abb4d04248d8584db7" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>floating_type</name></member>
      <member refid="classtoml_1_1basic__value_1a07fccbc3a86b0ae1fc50faf6a5e55f80" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>integer_</name></member>
      <member refid="classtoml_1_1basic__value_1a06c7c48e86aa536d8b23d7c0b7bf77cb" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>integer_type</name></member>
      <member refid="classtoml_1_1basic__value_1a3ab8d9b76f8236f194ad9e3036c11d41" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is</name></member>
      <member refid="classtoml_1_1basic__value_1a4b338987c0305dd56eaa105260f858bd" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is</name></member>
      <member refid="classtoml_1_1basic__value_1a8c80028f02dae5fce11fa2de46e5a202" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_array</name></member>
      <member refid="classtoml_1_1basic__value_1a480543865f432dbc35568f954196e2e2" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_boolean</name></member>
      <member refid="classtoml_1_1basic__value_1aa3ffdc3a4df542fc4bc140fa74b21e59" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_floating</name></member>
      <member refid="classtoml_1_1basic__value_1a0c32f842bc29c7788a0b58a1bc436378" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_integer</name></member>
      <member refid="classtoml_1_1basic__value_1abb9f5306c085b267824f5f32ed04e1b5" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_local_date</name></member>
      <member refid="classtoml_1_1basic__value_1a74e4b24b291fbcb2581a5501c14a7712" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_local_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1ada3bd713ab6e0aba5ed3e177417450d4" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_local_time</name></member>
      <member refid="classtoml_1_1basic__value_1a9f593a66f7919c9e4f3c0e00a93cec88" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_offset_datetime</name></member>
      <member refid="classtoml_1_1basic__value_1aa7484eeb07b564c7ea8b9728995c60c0" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_string</name></member>
      <member refid="classtoml_1_1basic__value_1a93c66a2b01a1022e57fc21ad5a781c1a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_table</name></member>
      <member refid="classtoml_1_1basic__value_1aa9e0adf3eaf980cd7ec1224fa675280c" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>is_uninitialized</name></member>
      <member refid="classtoml_1_1basic__value_1a0b0664d2c7f6f4d7562560f9378ea002" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>key_type</name></member>
      <member refid="classtoml_1_1basic__value_1a0278720d8ecbfa85f8208e83b1ba1fc5" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>local_date_</name></member>
      <member refid="classtoml_1_1basic__value_1a0de2989d733997608033cd95543f5994" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>local_date_type</name></member>
      <member refid="classtoml_1_1basic__value_1a066d3bee724889bd583eeb9efbb92ce6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>local_datetime_</name></member>
      <member refid="classtoml_1_1basic__value_1a4387f677f05e3a5bd5a7c3672c7d426a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>local_datetime_type</name></member>
      <member refid="classtoml_1_1basic__value_1a6fd530e197ace5d0abfd5edc3198784f" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>local_time_</name></member>
      <member refid="classtoml_1_1basic__value_1a2f9965e91eeb596f17406e2ab752f5b7" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>local_time_type</name></member>
      <member refid="classtoml_1_1basic__value_1a0d39990ac7a3394568165926aed4634a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>location</name></member>
      <member refid="classtoml_1_1basic__value_1a1021c04200f4e3c595b0a2fb76e35b4a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>offset_datetime_</name></member>
      <member refid="classtoml_1_1basic__value_1a38ba457a7d3fd5f5e351bd3615b2f551" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>offset_datetime_type</name></member>
      <member refid="classtoml_1_1basic__value_1aca8d43cd6fb2a76f85eb79b045d720dd" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1ae81f48d49ec4e552c468767fcfa3d663" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a52d13f5734ccfb6f39eaa0b800b5d3fb" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a02f48c8bb57a7d1a5d3cefc3edbd9d3b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1ae7bedeb509e42619c0ea3573b81d7553" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1aff37a6c829f38f1f8abee4912bb578a2" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a1619cd64384676037c309a039d04b964" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a13d7bfe4c0f461c1d0856a126c762500" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a4a05f81a11c4187c04a461014b59525b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1aa6872a4fabc7686ed236e9aca619d61a" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1ac208ec4a6a21da54311f17b9bf34c94c" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a4ddcc51bcfb36a28374182a524112574" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a62fc4cb971a2b0da65d27c863c07eab6" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1ae83b750d193321a3a57170556a436f1b" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a012196900f8a36b53b25cc5dd4a3b277" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a9f76d3a0469091c9d7326ac8940694b3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1ac442fe1a10b3afab3d071660d9b076c2" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a28bb639dfb0b10e69271f922bc960906" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1aa915c4888db928013603aff9036f8e5e" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a4f2a4ddf100decea16030583419f50bb" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1afd1f5083d0d7c4ce2ba3dcad59bd8c92" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a54c8664edf5c37f62415418867fcf71e" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1a54c8664edf5c37f62415418867fcf71e" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator=</name></member>
      <member refid="classtoml_1_1basic__value_1aa5708563581b8dc6a9f0e6aa200e93cd" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator[]</name></member>
      <member refid="classtoml_1_1basic__value_1a05aa134b8e1898b6537eccc353c55080" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator[]</name></member>
      <member refid="classtoml_1_1basic__value_1ac62400a056fa9a058931019c28519631" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>operator[]</name></member>
      <member refid="classtoml_1_1basic__value_1a5070496463735ce25ae8765ab5cb90ad" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>push_back</name></member>
      <member refid="classtoml_1_1basic__value_1a61425ea82266c76e65199477582b01ef" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>push_back</name></member>
      <member refid="classtoml_1_1basic__value_1a6c932c4b8ed23e1db10aa64e2f019c06" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>region_base</name></member>
      <member refid="classtoml_1_1basic__value_1a203fe3716047b1f00f4db17dfa2ae154" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>region_info_</name></member>
      <member refid="classtoml_1_1basic__value_1ae9245601f921e19f5aa55d92ad5cf2c3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>size</name></member>
      <member refid="classtoml_1_1basic__value_1a0369a126d63e8b6da909aa54c40b4cbc" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>string_</name></member>
      <member refid="classtoml_1_1basic__value_1a7b20b2d6fe1b3a1574d91ce733e01813" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>string_type</name></member>
      <member refid="classtoml_1_1basic__value_1a1555a6436a8c132e3cd892351ef323ea" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>table_</name></member>
      <member refid="classtoml_1_1basic__value_1a9eb798c571cbba787d5191fef47ed8c8" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>table_storage</name></member>
      <member refid="classtoml_1_1basic__value_1a7852d8026935a2590211d675ee97568f" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>table_type</name></member>
      <member refid="classtoml_1_1basic__value_1ab2dc908989dc98538bfaa7107f9a3fa3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>type</name></member>
      <member refid="classtoml_1_1basic__value_1a00dc5e1ad76717b755b9911de0b1c20c" prot="private" virt="non-virtual"><scope>toml::basic_value</scope><name>type_</name></member>
      <member refid="classtoml_1_1basic__value_1a795fc959d5cc8ddc6888fbb33c9746a3" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>value_type</name></member>
      <member refid="classtoml_1_1basic__value_1aa6528f7eee91e323ff0bc63d2338cb55" prot="public" virt="non-virtual"><scope>toml::basic_value</scope><name>~basic_value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
