.TH "external/toml/lexer.hpp" 3 "Sat Jun 18 2022" "Version 1.0" "SuperCold" \" -*- nroff -*-
.ad l
.nh
.SH NAME
external/toml/lexer.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <istream>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <stdexcept>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include 'combinator\&.hpp'\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBtoml\fP"
.br
.ti -1c
.RI "namespace \fBtoml::detail\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "using \fBtoml::detail::lex_wschar\fP = either< character<' '>, character<'\\t'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ws\fP = repeat< lex_wschar, at_least< 1 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_newline\fP = either< character<'\\n'>, sequence< character<'\\r'>, character<'\\n'> > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_lower\fP = in_range< 'a', 'z'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_upper\fP = in_range< 'A', 'Z'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_alpha\fP = either< lex_lower, lex_upper >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_digit\fP = in_range< '0', '9'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_nonzero\fP = in_range< '1', '9'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_oct_dig\fP = in_range< '0', '7'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_bin_dig\fP = in_range< '0', '1'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_hex_dig\fP = either< lex_digit, in_range< 'A', 'F'>, in_range< 'a', 'f'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_hex_prefix\fP = sequence< character< '0'>, character< 'x'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_oct_prefix\fP = sequence< character< '0'>, character< 'o'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_bin_prefix\fP = sequence< character< '0'>, character< 'b'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_underscore\fP = character< '_'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_plus\fP = character<'+'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_minus\fP = character<'\-'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_sign\fP = either< lex_plus, lex_minus >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_unsigned_dec_int\fP = either< sequence< lex_nonzero, repeat< either< lex_digit, sequence< lex_underscore, lex_digit > >, at_least< 1 > > >, lex_digit >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_dec_int\fP = sequence< maybe< lex_sign >, lex_unsigned_dec_int >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_hex_int\fP = sequence< lex_hex_prefix, sequence< lex_hex_dig, repeat< either< lex_hex_dig, sequence< lex_underscore, lex_hex_dig > >, unlimited > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_oct_int\fP = sequence< lex_oct_prefix, sequence< lex_oct_dig, repeat< either< lex_oct_dig, sequence< lex_underscore, lex_oct_dig > >, unlimited > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_bin_int\fP = sequence< lex_bin_prefix, sequence< lex_bin_dig, repeat< either< lex_bin_dig, sequence< lex_underscore, lex_bin_dig > >, unlimited > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_integer\fP = either< lex_bin_int, lex_oct_int, lex_hex_int, lex_dec_int >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_inf\fP = sequence< character< 'i'>, character< 'n'>, character< 'f'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_nan\fP = sequence< character< 'n'>, character< 'a'>, character< 'n'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_special_float\fP = sequence< maybe< lex_sign >, either< lex_inf, lex_nan > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_zero_prefixable_int\fP = sequence< lex_digit, repeat< either< lex_digit, sequence< lex_underscore, lex_digit > >, unlimited > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_fractional_part\fP = sequence< character<'\&.'>, lex_zero_prefixable_int >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_exponent_part\fP = sequence< either< character< 'e'>, character< 'E'> >, maybe< lex_sign >, lex_zero_prefixable_int >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_float\fP = either< lex_special_float, sequence< lex_dec_int, either< lex_exponent_part, sequence< lex_fractional_part, maybe< lex_exponent_part > > > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_true\fP = sequence< character< 't'>, character< 'r'>, character< 'u'>, character< 'e'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_false\fP = sequence< character< 'f'>, character< 'a'>, character< 'l'>, character< 's'>, character< 'e'> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_boolean\fP = either< lex_true, lex_false >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_date_fullyear\fP = repeat< lex_digit, exactly< 4 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_date_month\fP = repeat< lex_digit, exactly< 2 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_date_mday\fP = repeat< lex_digit, exactly< 2 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_time_delim\fP = either< character< 'T'>, character< 't'>, character<' '> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_time_hour\fP = repeat< lex_digit, exactly< 2 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_time_minute\fP = repeat< lex_digit, exactly< 2 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_time_second\fP = repeat< lex_digit, exactly< 2 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_time_secfrac\fP = sequence< character<'\&.'>, repeat< lex_digit, at_least< 1 > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_time_numoffset\fP = sequence< either< character<'+'>, character<'\-'> >, sequence< lex_time_hour, character<':'>, lex_time_minute > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_time_offset\fP = either< character< 'Z'>, character< 'z'>, lex_time_numoffset >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_partial_time\fP = sequence< lex_time_hour, character<':'>, lex_time_minute, character<':'>, lex_time_second, maybe< lex_time_secfrac > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_full_date\fP = sequence< lex_date_fullyear, character<'\-'>, lex_date_month, character<'\-'>, lex_date_mday >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_full_time\fP = sequence< lex_partial_time, lex_time_offset >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_offset_date_time\fP = sequence< lex_full_date, lex_time_delim, lex_full_time >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_local_date_time\fP = sequence< lex_full_date, lex_time_delim, lex_partial_time >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_local_date\fP = lex_full_date"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_local_time\fP = lex_partial_time"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_quotation_mark\fP = character<'''>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_basic_unescaped\fP = exclude< either< in_range< 0x00, 0x08 >, in_range< 0x0A, 0x1F >, character< 0x22 >, character< 0x5C >, character< 0x7F > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_escape\fP = character<'\\\\'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_escape_unicode_short\fP = sequence< character< 'u'>, repeat< lex_hex_dig, exactly< 4 > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_escape_unicode_long\fP = sequence< character< 'U'>, repeat< lex_hex_dig, exactly< 8 > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_escape_seq_char\fP = either< character<'''>, character<'\\\\'>, character<'b'>, character<'f'>, character<'n'>, character<'r'>, character<'t'>, lex_escape_unicode_short, lex_escape_unicode_long >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_escaped\fP = sequence< lex_escape, lex_escape_seq_char >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_basic_char\fP = either< lex_basic_unescaped, lex_escaped >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_basic_string\fP = sequence< lex_quotation_mark, repeat< lex_basic_char, unlimited >, lex_quotation_mark >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_string_delim\fP = repeat< lex_quotation_mark, exactly< 3 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_string_open\fP = lex_ml_basic_string_delim"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_string_close\fP = sequence< repeat< lex_quotation_mark, exactly< 3 > >, maybe< lex_quotation_mark >, maybe< lex_quotation_mark > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_unescaped\fP = exclude< either< in_range< 0x00, 0x08 >, in_range< 0x0A, 0x1F >, character< 0x5C >, character< 0x7F >, lex_ml_basic_string_delim > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_escaped_newline\fP = sequence< lex_escape, maybe< lex_ws >, lex_newline, repeat< either< lex_ws, lex_newline >, unlimited > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_char\fP = either< lex_ml_basic_unescaped, lex_escaped >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_body\fP = repeat< either< lex_ml_basic_char, lex_newline, lex_ml_basic_escaped_newline >, unlimited >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_basic_string\fP = sequence< lex_ml_basic_string_open, lex_ml_basic_body, lex_ml_basic_string_close >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_literal_char\fP = exclude< either< in_range< 0x00, 0x08 >, in_range< 0x0A, 0x1F >, character< 0x7F >, character< 0x27 > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_apostrophe\fP = character<'\\''>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_literal_string\fP = sequence< lex_apostrophe, repeat< lex_literal_char, unlimited >, lex_apostrophe >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_literal_string_delim\fP = repeat< lex_apostrophe, exactly< 3 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_literal_string_open\fP = lex_ml_literal_string_delim"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_literal_string_close\fP = sequence< repeat< lex_apostrophe, exactly< 3 > >, maybe< lex_apostrophe >, maybe< lex_apostrophe > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_literal_char\fP = exclude< either< in_range< 0x00, 0x08 >, in_range< 0x0A, 0x1F >, character< 0x7F >, lex_ml_literal_string_delim > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_literal_body\fP = repeat< either< lex_ml_literal_char, lex_newline >, unlimited >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_ml_literal_string\fP = sequence< lex_ml_literal_string_open, lex_ml_literal_body, lex_ml_literal_string_close >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_string\fP = either< lex_ml_basic_string, lex_basic_string, lex_ml_literal_string, lex_literal_string >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_dot_sep\fP = sequence< maybe< lex_ws >, character<'\&.'>, maybe< lex_ws > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_unquoted_key\fP = repeat< either< lex_alpha, lex_digit, character<'\-'>, character< '_'> >, at_least< 1 > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_quoted_key\fP = either< lex_basic_string, lex_literal_string >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_simple_key\fP = either< lex_unquoted_key, lex_quoted_key >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_dotted_key\fP = sequence< lex_simple_key, repeat< sequence< lex_dot_sep, lex_simple_key >, at_least< 1 > > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_key\fP = either< lex_dotted_key, lex_simple_key >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_keyval_sep\fP = sequence< maybe< lex_ws >, character<'='>, maybe< lex_ws > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_std_table_open\fP = character<'['>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_std_table_close\fP = character<']'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_std_table\fP = sequence< lex_std_table_open, maybe< lex_ws >, lex_key, maybe< lex_ws >, lex_std_table_close >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_array_table_open\fP = sequence< lex_std_table_open, lex_std_table_open >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_array_table_close\fP = sequence< lex_std_table_close, lex_std_table_close >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_array_table\fP = sequence< lex_array_table_open, maybe< lex_ws >, lex_key, maybe< lex_ws >, lex_array_table_close >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_utf8_1byte\fP = in_range< 0x00, 0x7F >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_utf8_2byte\fP = sequence< in_range< static_cast< char >(0xC2), static_cast< char >(0xDF)>, in_range< static_cast< char >(0x80), static_cast< char >(0xBF)> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_utf8_3byte\fP = sequence< either< sequence< character< static_cast< char >(0xE0)>, in_range< static_cast< char >(0xA0), static_cast< char >(0xBF)> >, sequence< in_range< static_cast< char >(0xE1), static_cast< char >(0xEC)>, in_range< static_cast< char >(0x80), static_cast< char >(0xBF)> >, sequence< character< static_cast< char >(0xED)>, in_range< static_cast< char >(0x80), static_cast< char >(0x9F)> >, sequence< in_range< static_cast< char >(0xEE), static_cast< char >(0xEF)>, in_range< static_cast< char >(0x80), static_cast< char >(0xBF)> > >, in_range< static_cast< char >(0x80), static_cast< char >(0xBF)> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_utf8_4byte\fP = sequence< either< sequence< character< static_cast< char >(0xF0)>, in_range< static_cast< char >(0x90), static_cast< char >(0xBF)> >, sequence< in_range< static_cast< char >(0xF1), static_cast< char >(0xF3)>, in_range< static_cast< char >(0x80), static_cast< char >(0xBF)> >, sequence< character< static_cast< char >(0xF4)>, in_range< static_cast< char >(0x80), static_cast< char >(0x8F)> > >, in_range< static_cast< char >(0x80), static_cast< char >(0xBF)>, in_range< static_cast< char >(0x80), static_cast< char >(0xBF)> >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_utf8_code\fP = either< lex_utf8_1byte, lex_utf8_2byte, lex_utf8_3byte, lex_utf8_4byte >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_comment_start_symbol\fP = character<'#'>"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_non_eol_ascii\fP = either< character< 0x09 >, in_range< 0x20, 0x7E > >"
.br
.ti -1c
.RI "using \fBtoml::detail::lex_comment\fP = sequence< lex_comment_start_symbol, repeat< either< lex_non_eol_ascii, lex_utf8_2byte, lex_utf8_3byte, lex_utf8_4byte >, unlimited > >"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for SuperCold from the source code\&.
